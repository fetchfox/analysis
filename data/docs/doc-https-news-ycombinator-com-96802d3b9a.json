{
  "url": "https://news.ycombinator.com/item?id=41593216",
  "body": "<html lang=\"en\" op=\"item\"><head><meta name=\"referrer\" content=\"origin\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><link rel=\"stylesheet\" type=\"text/css\" href=\"news.css?WNnbPR2RzcIA6QwrdQmO\">\n        <link rel=\"icon\" href=\"y18.svg\">\n    <link rel=\"canonical\" href=\"https://news.ycombinator.com/item?id=41593216\"/>            <title>Show HN: Numscript, a declarative language to model financial transactions | Hacker News</title></head><body><center><table id=\"hnmain\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"85%\" bgcolor=\"#f6f6ef\">\n        <tr><td bgcolor=\"#ff6600\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"padding:2px\"><tr><td style=\"width:18px;padding-right:4px\"><a href=\"https://news.ycombinator.com\"><img src=\"y18.svg\" width=\"18\" height=\"18\" style=\"border:1px white solid; display:block\"></a></td>\n                  <td style=\"line-height:12pt; height:10px;\"><span class=\"pagetop\"><b class=\"hnname\"><a href=\"news\">Hacker News</a></b>\n                            <a href=\"newest\">new</a> | <a href=\"front\">past</a> | <a href=\"newcomments\">comments</a> | <a href=\"ask\">ask</a> | <a href=\"show\">show</a> | <a href=\"jobs\">jobs</a> | <a href=\"submit\" rel=\"nofollow\">submit</a>            </span></td><td style=\"text-align:right;padding-right:4px;\"><span class=\"pagetop\">\n                              <a href=\"login?goto=item%3Fid%3D41593216\">login</a>\n                          </span></td>\n              </tr></table></td></tr>\n<tr id=\"pagespace\" title=\"Show HN: Numscript, a declarative language to model financial transactions\" style=\"height:10px\"></tr><tr><td><table class=\"fatitem\" border=\"0\">\n        <tr class='athing' id='41593216'>\n      <td align=\"right\" valign=\"top\" class=\"title\"><span class=\"rank\"></span></td>      <td valign=\"top\" class=\"votelinks\"><center><a id='up_41593216' href='vote?id=41593216&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center></td><td class=\"title\"><span class=\"titleline\"><a href=\"https://playground.numscript.org/\">Show HN: Numscript, a declarative language to model financial transactions</a><span class=\"sitebit comhead\"> (<a href=\"from?site=numscript.org\"><span class=\"sitestr\">numscript.org</span></a>)</span></span></td></tr><tr><td colspan=\"2\"></td><td class=\"subtext\"><span class=\"subline\">\n          <span class=\"score\" id=\"score_41593216\">110 points</span> by <a href=\"user?id=superzamp\" class=\"hnuser\">superzamp</a> <span class=\"age\" title=\"2024-09-19T15:59:19.000000Z\"><a href=\"item?id=41593216\">6 hours ago</a></span> <span id=\"unv_41593216\"></span> | <a href=\"hide?id=41593216&amp;goto=item%3Fid%3D41593216\">hide</a> | <a href=\"https://hn.algolia.com/?query=Show%20HN%3A%20Numscript%2C%20a%20declarative%20language%20to%20model%20financial%20transactions&type=story&dateRange=all&sort=byDate&storyText=false&prefix&page=0\" class=\"hnpast\">past</a> | <a href=\"fave?id=41593216&amp;auth=74e12ba9d7e4fe7c74c573c6c7a914df7c118e30\">favorite</a> | <a href=\"item?id=41593216\">22&nbsp;comments</a>        </span>\n              </td></tr>\n    <tr><td style=\"height:2px\"></td></tr><tr><td colspan=\"2\"></td><td><div class=\"toptext\">Numscript is a simple, declarative language that helps you model financial transactions. You can do quite a few things with it, such as modeling:<p>* Payments involving vouchers and a user&#x27;s prepaid balance\n* Complex funds destination scenario where the customer gets cash back\n* Configurable user credit balance spending transactions<p>The main idea is to take the pain out of describing of a system dealing with money movements should behave in traditional languages such as JS&#x2F;TS&#x2F;Go&#x2F;Ruby etc, landing an expressive way to model these movements of value.<p>It is voluntarily broad in applicability—our customers use it today for use-cases ranging from marketplaces funds orchestration to home-grown loan management systems.<p>Once those transactions are modeled, they are to be picked up and committed to a system-of-record, ledgering system or executed on a set of payments and banking APIs.<p>It was initially a DSL we bundled into our Core Ledger product at Formance (YCS21) but we&#x27;re giving it more autonomy now and started to make it standalone, with the idea that anyone could eventually bolt Numscript on top of their ledgering system. We&#x27;re also exploring to make it natively compatible with other backends.<p>As part of this un-bundling, we&#x27;ve just shipping a playground which lets you fiddle with it without installing anything at <a href=\"https:&#x2F;&#x2F;playground.numscript.org&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;playground.numscript.org&#x2F;</a> (it works best on desktop).<p>Happy to chime in on any questions!</div></td></tr>        <tr><td style=\"height:10px\"></td></tr><tr><td colspan=\"2\"></td><td><form action=\"comment\" method=\"post\"><input type=\"hidden\" name=\"parent\" value=\"41593216\"><input type=\"hidden\" name=\"goto\" value=\"item?id=41593216\"><input type=\"hidden\" name=\"hmac\" value=\"f5ed2e786c429de98cfc5d55746751477f4d3d2d\"><textarea name=\"text\" rows=\"8\" cols=\"80\" wrap=\"virtual\"></textarea><br><br>\n<input type=\"submit\" value=\"add comment\"></form></td></tr>  </table><br><br><table border=\"0\" class='comment-tree'>\n            <tr class='athing comtr' id='41594311'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41594311' href='vote?id=41594311&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=abdullahkhalids\" class=\"hnuser\">abdullahkhalids</a> <span class=\"age\" title=\"2024-09-19T17:39:49.000000Z\"><a href=\"item?id=41594311\">5 hours ago</a></span> <span id=\"unv_41594311\"></span>          <span class='navs'>\n             | <a href=\"#41593946\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41594311\" n=\"5\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">How would this handle Canadian guidelines for dealing with cents in cash, where you round to the nearest 5c [1]?<p><pre><code>    Amounts ending in 1 cent and 2 cents are rounded down to the nearest 10 cents;\n    Amounts ending in 3 cents and 4 cents are rounded up to the nearest 5 cents;\n    Amounts ending in 6 cents and 7 cents are rounded down to the nearest 5 cents;\n    Amounts ending in 8 cents and 9 cents are rounded up to the nearest 10 cents;\n    Amounts ending in 0 cent and 5 cents remain unchanged.\n</code></pre>\nEDIT: I think if you send 12 cents,<p><pre><code>    send [CADCASH&#x2F;2 12] ( source = @user1 destination = @user2 )\n</code></pre>\nIt should result in sending 10 cents.<p><pre><code>    &quot;postings&quot;: [{&quot;source&quot;: &quot;user1&quot;,\n                  &quot;destination&quot;: &quot;user2&quot;,\n                  &quot;amount&quot;: 10,\n                  &quot;asset&quot;: &quot;CADCASH&#x2F;2&quot;}]\n</code></pre>\nCan this happen?<p>[1] <a href=\"https:&#x2F;&#x2F;www.canada.ca&#x2F;en&#x2F;revenue-agency&#x2F;programs&#x2F;about-canada-revenue-agency-cra&#x2F;phasing-penny.html\" rel=\"nofollow\">https:&#x2F;&#x2F;www.canada.ca&#x2F;en&#x2F;revenue-agency&#x2F;programs&#x2F;about-canad...</a></div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41594311&amp;goto=item%3Fid%3D41593216%2341594311\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41595174'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41595174' href='vote?id=41595174&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=superzamp\" class=\"hnuser\">superzamp</a> <span class=\"age\" title=\"2024-09-19T19:03:02.000000Z\"><a href=\"item?id=41595174\">3 hours ago</a></span> <span id=\"unv_41595174\"></span>          <span class='navs'>\n             | <a href=\"#41594311\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41595633\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41595174\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Well that&#x27;s definitely a good puzzle. I&#x27;ve tried to model it for a bit, but it indeed looks like we&#x27;d need to add something to the language to make it possible at all! Thanks for bringing this up.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41595174&amp;goto=item%3Fid%3D41593216%2341595174\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41595230'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41595230' href='vote?id=41595230&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=fallat\" class=\"hnuser\">fallat</a> <span class=\"age\" title=\"2024-09-19T19:07:34.000000Z\"><a href=\"item?id=41595230\">3 hours ago</a></span> <span id=\"unv_41595230\"></span>          <span class='navs'>\n             | <a href=\"#41594311\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41595174\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41595633\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41595230\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Same thing with income tax brackets. You need conditional logic.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41595230&amp;goto=item%3Fid%3D41593216%2341595230\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41595344'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41595344' href='vote?id=41595344&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=superzamp\" class=\"hnuser\">superzamp</a> <span class=\"age\" title=\"2024-09-19T19:18:45.000000Z\"><a href=\"item?id=41595344\">3 hours ago</a></span> <span id=\"unv_41595344\"></span>          <span class='navs'>\n             | <a href=\"#41594311\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41595230\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41595633\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41595344\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">For this particular case, I would say that tax-brackets sort of logic can be expressed in the destination block with ordered destinations.<p>For example, you could have something like this:<p><pre><code>    send [USD&#x2F;2 *] (\n      source = @users:1234\n      destination = {\n        &#x2F;&#x2F; first $1000 are taxed at 10%\n        max [USD&#x2F;2 100000] to {\n          10% to @taxes\n          remaining kept\n        }\n        &#x2F;&#x2F; Anything above that is, taxed at 20%\n        remaining to {\n          20% to @taxes\n          remaining kept\n        }\n      }\n    )\n</code></pre>\n(You can test it on the playground, you&#x27;ll just want to feed the &quot;users:1234&quot; account with an initial balance in the input section)</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41595344&amp;goto=item%3Fid%3D41593216%2341595344\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                        <tr class='athing comtr' id='41595633'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41595633' href='vote?id=41595633&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=euroderf\" class=\"hnuser\">euroderf</a> <span class=\"age\" title=\"2024-09-19T19:47:04.000000Z\"><a href=\"item?id=41595633\">3 hours ago</a></span> <span id=\"unv_41595633\"></span>          <span class='navs'>\n             | <a href=\"#41594311\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41595174\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41593946\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41595633\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">The rules listed (1,2,6,7 round down; 3,4,8,9 round up). AFAIK these are also the official Eurozone cash rules for countries that choose not to circulate 1 and 2 eurocent coins. (Altho of course, electronic transactions are exact to the penny.) So you might want to cover this use case.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41595633&amp;goto=item%3Fid%3D41593216%2341595633\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41593946'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41593946' href='vote?id=41593946&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=vslira\" class=\"hnuser\">vslira</a> <span class=\"age\" title=\"2024-09-19T17:04:17.000000Z\"><a href=\"item?id=41593946\">5 hours ago</a></span> <span id=\"unv_41593946\"></span>          <span class='navs'>\n             | <a href=\"#41594311\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41595699\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41593946\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Super interesting and thanks for sharing. If I understood the license page on the repository correctly, the DSL is MIT-licensed since it&#x27;s not within the enterprise directory, right?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41593946&amp;goto=item%3Fid%3D41593216%2341593946\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41594071'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41594071' href='vote?id=41594071&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=superzamp\" class=\"hnuser\">superzamp</a> <span class=\"age\" title=\"2024-09-19T17:16:27.000000Z\"><a href=\"item?id=41594071\">5 hours ago</a></span> <span id=\"unv_41594071\"></span>          <span class='navs'>\n             | <a href=\"#41593946\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41595699\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41594071\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Yes exactly! There&#x27;s actually two implementations, one tightly knit to our ledger product located at [1] and the new, standalone one (used by the playground) at [2]. In any case, in both implementations, the DSL is indeed MIT.<p>[1] <a href=\"https:&#x2F;&#x2F;github.com&#x2F;formancehq&#x2F;stack&#x2F;tree&#x2F;main&#x2F;components&#x2F;ledger&#x2F;internal&#x2F;machine\">https:&#x2F;&#x2F;github.com&#x2F;formancehq&#x2F;stack&#x2F;tree&#x2F;main&#x2F;components&#x2F;led...</a><p>[2] <a href=\"https:&#x2F;&#x2F;github.com&#x2F;formancehq&#x2F;numscript\">https:&#x2F;&#x2F;github.com&#x2F;formancehq&#x2F;numscript</a></div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41594071&amp;goto=item%3Fid%3D41593216%2341594071\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41595699'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41595699' href='vote?id=41595699&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=OutOfHere\" class=\"hnuser\">OutOfHere</a> <span class=\"age\" title=\"2024-09-19T19:51:03.000000Z\"><a href=\"item?id=41595699\">3 hours ago</a></span> <span id=\"unv_41595699\"></span>          <span class='navs'>\n             | <a href=\"#41593946\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41595699\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Can this or Formance interact with credit card systems, checking accounts, and layer 2 crypto wallets? If not, how is the money even going to come in or out?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41595699&amp;goto=item%3Fid%3D41593216%2341595699\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41593639'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41593639' href='vote?id=41593639&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=robk\" class=\"hnuser\">robk</a> <span class=\"age\" title=\"2024-09-19T16:34:05.000000Z\"><a href=\"item?id=41593639\">6 hours ago</a></span> <span id=\"unv_41593639\"></span>          <span class='navs'>\n             | <a href=\"#41595699\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41595127\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41593639\" n=\"8\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">This seems cool but what&#x27;s the intention with the USD&#x2F;2 notation? Is that for fractional sub-cent precision in rounding situations?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41593639&amp;goto=item%3Fid%3D41593216%2341593639\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41593756'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41593756' href='vote?id=41593756&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=superzamp\" class=\"hnuser\">superzamp</a> <span class=\"age\" title=\"2024-09-19T16:44:18.000000Z\"><a href=\"item?id=41593756\">6 hours ago</a></span> <span id=\"unv_41593756\"></span>          <span class='navs'>\n             | <a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41595127\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41593756\" n=\"7\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">It&#x27;s indeed relative to cents in a sense, the idea is to force you to declare the precision of the monetary amount you&#x27;re expressing.<p>You can see various interpretation of what &quot;USD&quot; means in the wild, as some APIs will happily parse USD 100 as $1.00 while some others might parse USD 100 as $100.00.<p>So we recommend this explicit [ASSET&#x2F;SCALE AMOUNT] notation, where SCALE describes the negative power of ten to multiply the AMOUNT with to obtain the decimal value in the given ASSET.<p>It makes subsequent interaction with external systems much easier. You can read a bit more about it here [1].<p>[1] <a href=\"https:&#x2F;&#x2F;docs.formance.com&#x2F;stack&#x2F;unambiguous-monetary-notation\">https:&#x2F;&#x2F;docs.formance.com&#x2F;stack&#x2F;unambiguous-monetary-notatio...</a></div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41593756&amp;goto=item%3Fid%3D41593216%2341593756\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41596932'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41596932' href='vote?id=41596932&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=girvo\" class=\"hnuser\">girvo</a> <span class=\"age\" title=\"2024-09-19T22:19:32.000000Z\"><a href=\"item?id=41596932\">39 minutes ago</a></span> <span id=\"unv_41596932\"></span>          <span class='navs'>\n             | <a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41593756\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41594568\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41596932\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Just to add to this, having also implemented a production payment system, we did the same thing. One needs to be very explicit about the scale and how it should be rounded and dealt with, and how to operate on two different scale systems. Quite a fun challenge, though I do not miss the edge cases.<p>Our system was a payment system for childcare management software, interfacing with banks and the government directly.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41596932&amp;goto=item%3Fid%3D41593216%2341596932\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41594568'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41594568' href='vote?id=41594568&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=tway_GdBRwW\" class=\"hnuser\">tway_GdBRwW</a> <span class=\"age\" title=\"2024-09-19T18:06:30.000000Z\"><a href=\"item?id=41594568\">4 hours ago</a></span> <span id=\"unv_41594568\"></span>          <span class='navs'>\n             | <a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41593756\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41596932\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41594216\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41594568\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Used to work at a payments company. Yes, you need to be *very* explicit in how you model currency amounts and precision. See also earlier post about Canadian rounding rules. Some of the &quot;logic&quot; is regulatory&#x2F;compliance driven.<p>ref child post about stocks trading for 0.0001. Yes, those are real trades and (probably) fully legal etc, but I&#x27;m not sure the Fed recognizes currency amounts less than 1 US cent ($0.01), so the accounting rules and tax rules might not match expectations based on generalized floating point math.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41594568&amp;goto=item%3Fid%3D41593216%2341594568\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41595671'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41595671' href='vote?id=41595671&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=euroderf\" class=\"hnuser\">euroderf</a> <span class=\"age\" title=\"2024-09-19T19:49:11.000000Z\"><a href=\"item?id=41595671\">3 hours ago</a></span> <span id=\"unv_41595671\"></span>          <span class='navs'>\n             | <a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41594568\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41594216\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41595671\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Doesn&#x27;t the Fed recognise mills ? They are not extinct.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41595671&amp;goto=item%3Fid%3D41593216%2341595671\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41594216'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41594216' href='vote?id=41594216&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=flockonus\" class=\"hnuser\">flockonus</a> <span class=\"age\" title=\"2024-09-19T17:31:05.000000Z\"><a href=\"item?id=41594216\">5 hours ago</a></span> <span id=\"unv_41594216\"></span>          <span class='navs'>\n             | <a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41593756\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41594568\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41595127\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41594216\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">What about units that cost sub-cent? For examples, I&#x27;ve seen private company stocks being $0.0001<p>Not sure why you&#x27;d need to make a note in the internal representation, vs. leave adapters to handle conversions.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41594216&amp;goto=item%3Fid%3D41593216%2341594216\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41594255'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41594255' href='vote?id=41594255&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=bbor\" class=\"hnuser\">bbor</a> <span class=\"age\" title=\"2024-09-19T17:34:36.000000Z\"><a href=\"item?id=41594255\">5 hours ago</a></span> <span id=\"unv_41594255\"></span>          <span class='navs'>\n             | <a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41594216\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41594543\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41594255\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Not to speak for them, but I think you’ve understood the point exactly. You need to be able to support arbitrary precision, but that support needs to be <i>intentional</i> to avoid errors. And you have to record that decision somewhere if adapters are to correctly handle your outputs; why not in the unit name?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41594255&amp;goto=item%3Fid%3D41593216%2341594255\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41594543'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41594543' href='vote?id=41594543&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=petesergeant\" class=\"hnuser\">petesergeant</a> <span class=\"age\" title=\"2024-09-19T18:03:36.000000Z\"><a href=\"item?id=41594543\">4 hours ago</a></span> <span id=\"unv_41594543\"></span>          <span class='navs'>\n             | <a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41594216\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41594255\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41595127\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41594543\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">If I understand their docs correctly, that’s equivalent to [USD&#x2F;4 1]</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41594543&amp;goto=item%3Fid%3D41593216%2341594543\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                              <tr class='athing comtr' id='41595127'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41595127' href='vote?id=41595127&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=jimbokun\" class=\"hnuser\">jimbokun</a> <span class=\"age\" title=\"2024-09-19T18:59:16.000000Z\"><a href=\"item?id=41595127\">3 hours ago</a></span> <span id=\"unv_41595127\"></span>          <span class='navs'>\n             | <a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41596494\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41595127\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Are there converters to&#x2F;from OFX for Numscript?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41595127&amp;goto=item%3Fid%3D41593216%2341595127\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41596494'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41596494' href='vote?id=41596494&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=henning\" class=\"hnuser\">henning</a> <span class=\"age\" title=\"2024-09-19T21:20:35.000000Z\"><a href=\"item?id=41596494\">1 hour ago</a></span> <span id=\"unv_41596494\"></span>          <span class='navs'>\n             | <a href=\"#41595127\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41594224\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41596494\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Ah, what better input format than JSON, a poorly defined, ambiguous format that freely mixes integers and floating points and lacks supports for bigints and bigdecimals.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41596494&amp;goto=item%3Fid%3D41593216%2341596494\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41594224'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41594224' href='vote?id=41594224&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=bbor\" class=\"hnuser\">bbor</a> <span class=\"age\" title=\"2024-09-19T17:31:44.000000Z\"><a href=\"item?id=41594224\">5 hours ago</a></span> <span id=\"unv_41594224\"></span>          <span class='navs'>\n             | <a href=\"#41596494\" class=\"clicky\" aria-hidden=\"true\">prev</a> <a class=\"togg clicky\" id=\"41594224\" n=\"4\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">To this noob, this seems like a problem that was pretty convincingly solved by double entry accounting ledgers, but from your post it sounds like this isn’t a replacement-of but rather an addition-to that model. What’s a situation where an imperative approach would be preferable to the traditional declarative approach? \nMy depth of knowledge pretty much starts and ends with the below document, so apologies if this is obvious to experts!<p><a href=\"https:&#x2F;&#x2F;beancount.github.io&#x2F;docs&#x2F;the_double_entry_counting_method.html#introduction\" rel=\"nofollow\">https:&#x2F;&#x2F;beancount.github.io&#x2F;docs&#x2F;the_double_entry_counting_m...</a><p>E: the problem being “tracking transactions”. Yes?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41594224&amp;goto=item%3Fid%3D41593216%2341594224\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41594607'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41594607' href='vote?id=41594607&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=superzamp\" class=\"hnuser\">superzamp</a> <span class=\"age\" title=\"2024-09-19T18:09:23.000000Z\"><a href=\"item?id=41594607\">4 hours ago</a></span> <span id=\"unv_41594607\"></span>          <span class='navs'>\n             | <a href=\"#41594224\" class=\"clicky\" aria-hidden=\"true\">parent</a> <a class=\"togg clicky\" id=\"41594607\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">That&#x27;s a very good question. So the DSL here operates an agnostic source&#x2F;dest transaction model, which is akin to the credit&#x2F;debit model sans the semantic baggage. The goal of this model is indeed to be &quot;tracking transactions&quot; in the abstract sense, having the benefit of not forcing accounting decisions too early on when there is (still yet) none.<p>For example, if you create a transaction moving money from &quot;@stripe:main&quot; to &quot;@acct:123&quot; and &quot;@acct:234&quot;, you&#x27;re merely representing the fact that you want this money to be moved. Wether the movement is clearing off a liability or generating revenue is another concern that you (in our model) want to take care of in a separate layer, that will also likely involve some intense intentionality and iterations from your accounting team.<p>In a sense, it&#x27;s as close to accounting than it is to warehousing money, moving unitary boxes of it from one location to another.<p>These two models have the same amount of information per entry, so they can actually be converted from one to another, enabling you to also represent some accounting-ish transactions with this DSL, e.g. with a send [USD&#x2F;2 100] from @ar:invoices:1234 to @sales.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41594607&amp;goto=item%3Fid%3D41593216%2341594607\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41595944'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41595944' href='vote?id=41595944&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=mamidon\" class=\"hnuser\">mamidon</a> <span class=\"age\" title=\"2024-09-19T20:13:52.000000Z\"><a href=\"item?id=41595944\">2 hours ago</a></span> <span id=\"unv_41595944\"></span>          <span class='navs'>\n             | <a href=\"#41594224\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41594607\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41595588\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41595944\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I&#x27;m living this life right now; except we baked in notions of Assets&#x2F;Liabilities&#x2F;Income&#x2F;Expenses into our ledger logic.  Only to realize our customers don&#x27;t care and just want to do whatever it is they&#x27;ve been doing.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41595944&amp;goto=item%3Fid%3D41593216%2341595944\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41595588'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41595588' href='vote?id=41595588&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=bbor\" class=\"hnuser\">bbor</a> <span class=\"age\" title=\"2024-09-19T19:42:37.000000Z\"><a href=\"item?id=41595588\">3 hours ago</a></span> <span id=\"unv_41595588\"></span>          <span class='navs'>\n             | <a href=\"#41594224\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41594607\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41595944\" class=\"clicky\" aria-hidden=\"true\">prev</a> <a class=\"togg clicky\" id=\"41595588\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Fascinating, thanks for taking the time to educate! Makes sense to me — it seems this tool is purpose built for situations where <i>tracking</i> is complex enough to deserve decoupling from <i>annotating</i> or <i>interpreting</i>, to put it in my own kindergarten terms.<p>I don’t have a need for this personally but I’ll definitely be bouncing this around in my head for a while, both technically (JS <i>ALL</i> the things!) and methodologically. Accounting is pretty trivial when you don’t have any income to track!</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41595588&amp;goto=item%3Fid%3D41593216%2341595588\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                        </table>\n  <br><br>\n</td></tr>\n<tr><td><img src=\"s.gif\" height=\"10\" width=\"0\"><table width=\"100%\" cellspacing=\"0\" cellpadding=\"1\"><tr><td bgcolor=\"#ff6600\"></td></tr></table><br>\n<center><span class=\"yclinks\"><a href=\"newsguidelines.html\">Guidelines</a> | <a href=\"newsfaq.html\">FAQ</a> | <a href=\"lists\">Lists</a> | <a href=\"https://github.com/HackerNews/API\">API</a> | <a href=\"security.html\">Security</a> | <a href=\"https://www.ycombinator.com/legal/\">Legal</a> | <a href=\"https://www.ycombinator.com/apply/\">Apply to YC</a> | <a href=\"mailto:hn@ycombinator.com\">Contact</a></span><br><br>\n<form method=\"get\" action=\"//hn.algolia.com/\">Search: <input type=\"text\" name=\"q\" size=\"17\" autocorrect=\"off\" spellcheck=\"false\" autocapitalize=\"off\" autocomplete=\"off\"></form></center></td></tr>      </table></center></body>\n      <script type='text/javascript' src='hn.js?WNnbPR2RzcIA6QwrdQmO'></script>\n  </html>\n",
  "html": "<html lang=\"en\" op=\"item\"><head><meta name=\"referrer\" content=\"origin\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><link rel=\"stylesheet\" type=\"text/css\" href=\"news.css?WNnbPR2RzcIA6QwrdQmO\">\n        <link rel=\"icon\" href=\"y18.svg\">\n    <link rel=\"canonical\" href=\"https://news.ycombinator.com/item?id=41593216\"/>            <title>Show HN: Numscript, a declarative language to model financial transactions | Hacker News</title></head><body><center><table id=\"hnmain\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"85%\" bgcolor=\"#f6f6ef\">\n        <tr><td bgcolor=\"#ff6600\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"padding:2px\"><tr><td style=\"width:18px;padding-right:4px\"><a href=\"https://news.ycombinator.com\"><img src=\"y18.svg\" width=\"18\" height=\"18\" style=\"border:1px white solid; display:block\"></a></td>\n                  <td style=\"line-height:12pt; height:10px;\"><span class=\"pagetop\"><b class=\"hnname\"><a href=\"news\">Hacker News</a></b>\n                            <a href=\"newest\">new</a> | <a href=\"front\">past</a> | <a href=\"newcomments\">comments</a> | <a href=\"ask\">ask</a> | <a href=\"show\">show</a> | <a href=\"jobs\">jobs</a> | <a href=\"submit\" rel=\"nofollow\">submit</a>            </span></td><td style=\"text-align:right;padding-right:4px;\"><span class=\"pagetop\">\n                              <a href=\"login?goto=item%3Fid%3D41593216\">login</a>\n                          </span></td>\n              </tr></table></td></tr>\n<tr id=\"pagespace\" title=\"Show HN: Numscript, a declarative language to model financial transactions\" style=\"height:10px\"></tr><tr><td><table class=\"fatitem\" border=\"0\">\n        <tr class='athing' id='41593216'>\n      <td align=\"right\" valign=\"top\" class=\"title\"><span class=\"rank\"></span></td>      <td valign=\"top\" class=\"votelinks\"><center><a id='up_41593216' href='vote?id=41593216&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center></td><td class=\"title\"><span class=\"titleline\"><a href=\"https://playground.numscript.org/\">Show HN: Numscript, a declarative language to model financial transactions</a><span class=\"sitebit comhead\"> (<a href=\"from?site=numscript.org\"><span class=\"sitestr\">numscript.org</span></a>)</span></span></td></tr><tr><td colspan=\"2\"></td><td class=\"subtext\"><span class=\"subline\">\n          <span class=\"score\" id=\"score_41593216\">110 points</span> by <a href=\"user?id=superzamp\" class=\"hnuser\">superzamp</a> <span class=\"age\" title=\"2024-09-19T15:59:19.000000Z\"><a href=\"item?id=41593216\">6 hours ago</a></span> <span id=\"unv_41593216\"></span> | <a href=\"hide?id=41593216&amp;goto=item%3Fid%3D41593216\">hide</a> | <a href=\"https://hn.algolia.com/?query=Show%20HN%3A%20Numscript%2C%20a%20declarative%20language%20to%20model%20financial%20transactions&type=story&dateRange=all&sort=byDate&storyText=false&prefix&page=0\" class=\"hnpast\">past</a> | <a href=\"fave?id=41593216&amp;auth=74e12ba9d7e4fe7c74c573c6c7a914df7c118e30\">favorite</a> | <a href=\"item?id=41593216\">22&nbsp;comments</a>        </span>\n              </td></tr>\n    <tr><td style=\"height:2px\"></td></tr><tr><td colspan=\"2\"></td><td><div class=\"toptext\">Numscript is a simple, declarative language that helps you model financial transactions. You can do quite a few things with it, such as modeling:<p>* Payments involving vouchers and a user&#x27;s prepaid balance\n* Complex funds destination scenario where the customer gets cash back\n* Configurable user credit balance spending transactions<p>The main idea is to take the pain out of describing of a system dealing with money movements should behave in traditional languages such as JS&#x2F;TS&#x2F;Go&#x2F;Ruby etc, landing an expressive way to model these movements of value.<p>It is voluntarily broad in applicability—our customers use it today for use-cases ranging from marketplaces funds orchestration to home-grown loan management systems.<p>Once those transactions are modeled, they are to be picked up and committed to a system-of-record, ledgering system or executed on a set of payments and banking APIs.<p>It was initially a DSL we bundled into our Core Ledger product at Formance (YCS21) but we&#x27;re giving it more autonomy now and started to make it standalone, with the idea that anyone could eventually bolt Numscript on top of their ledgering system. We&#x27;re also exploring to make it natively compatible with other backends.<p>As part of this un-bundling, we&#x27;ve just shipping a playground which lets you fiddle with it without installing anything at <a href=\"https:&#x2F;&#x2F;playground.numscript.org&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;playground.numscript.org&#x2F;</a> (it works best on desktop).<p>Happy to chime in on any questions!</div></td></tr>        <tr><td style=\"height:10px\"></td></tr><tr><td colspan=\"2\"></td><td><form action=\"comment\" method=\"post\"><input type=\"hidden\" name=\"parent\" value=\"41593216\"><input type=\"hidden\" name=\"goto\" value=\"item?id=41593216\"><input type=\"hidden\" name=\"hmac\" value=\"f5ed2e786c429de98cfc5d55746751477f4d3d2d\"><textarea name=\"text\" rows=\"8\" cols=\"80\" wrap=\"virtual\"></textarea><br><br>\n<input type=\"submit\" value=\"add comment\"></form></td></tr>  </table><br><br><table border=\"0\" class='comment-tree'>\n            <tr class='athing comtr' id='41594311'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41594311' href='vote?id=41594311&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=abdullahkhalids\" class=\"hnuser\">abdullahkhalids</a> <span class=\"age\" title=\"2024-09-19T17:39:49.000000Z\"><a href=\"item?id=41594311\">5 hours ago</a></span> <span id=\"unv_41594311\"></span>          <span class='navs'>\n             | <a href=\"#41593946\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41594311\" n=\"5\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">How would this handle Canadian guidelines for dealing with cents in cash, where you round to the nearest 5c [1]?<p><pre><code>    Amounts ending in 1 cent and 2 cents are rounded down to the nearest 10 cents;\n    Amounts ending in 3 cents and 4 cents are rounded up to the nearest 5 cents;\n    Amounts ending in 6 cents and 7 cents are rounded down to the nearest 5 cents;\n    Amounts ending in 8 cents and 9 cents are rounded up to the nearest 10 cents;\n    Amounts ending in 0 cent and 5 cents remain unchanged.\n</code></pre>\nEDIT: I think if you send 12 cents,<p><pre><code>    send [CADCASH&#x2F;2 12] ( source = @user1 destination = @user2 )\n</code></pre>\nIt should result in sending 10 cents.<p><pre><code>    &quot;postings&quot;: [{&quot;source&quot;: &quot;user1&quot;,\n                  &quot;destination&quot;: &quot;user2&quot;,\n                  &quot;amount&quot;: 10,\n                  &quot;asset&quot;: &quot;CADCASH&#x2F;2&quot;}]\n</code></pre>\nCan this happen?<p>[1] <a href=\"https:&#x2F;&#x2F;www.canada.ca&#x2F;en&#x2F;revenue-agency&#x2F;programs&#x2F;about-canada-revenue-agency-cra&#x2F;phasing-penny.html\" rel=\"nofollow\">https:&#x2F;&#x2F;www.canada.ca&#x2F;en&#x2F;revenue-agency&#x2F;programs&#x2F;about-canad...</a></div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41594311&amp;goto=item%3Fid%3D41593216%2341594311\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41595174'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41595174' href='vote?id=41595174&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=superzamp\" class=\"hnuser\">superzamp</a> <span class=\"age\" title=\"2024-09-19T19:03:02.000000Z\"><a href=\"item?id=41595174\">3 hours ago</a></span> <span id=\"unv_41595174\"></span>          <span class='navs'>\n             | <a href=\"#41594311\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41595633\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41595174\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Well that&#x27;s definitely a good puzzle. I&#x27;ve tried to model it for a bit, but it indeed looks like we&#x27;d need to add something to the language to make it possible at all! Thanks for bringing this up.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41595174&amp;goto=item%3Fid%3D41593216%2341595174\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41595230'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41595230' href='vote?id=41595230&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=fallat\" class=\"hnuser\">fallat</a> <span class=\"age\" title=\"2024-09-19T19:07:34.000000Z\"><a href=\"item?id=41595230\">3 hours ago</a></span> <span id=\"unv_41595230\"></span>          <span class='navs'>\n             | <a href=\"#41594311\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41595174\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41595633\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41595230\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Same thing with income tax brackets. You need conditional logic.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41595230&amp;goto=item%3Fid%3D41593216%2341595230\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41595344'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41595344' href='vote?id=41595344&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=superzamp\" class=\"hnuser\">superzamp</a> <span class=\"age\" title=\"2024-09-19T19:18:45.000000Z\"><a href=\"item?id=41595344\">3 hours ago</a></span> <span id=\"unv_41595344\"></span>          <span class='navs'>\n             | <a href=\"#41594311\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41595230\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41595633\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41595344\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">For this particular case, I would say that tax-brackets sort of logic can be expressed in the destination block with ordered destinations.<p>For example, you could have something like this:<p><pre><code>    send [USD&#x2F;2 *] (\n      source = @users:1234\n      destination = {\n        &#x2F;&#x2F; first $1000 are taxed at 10%\n        max [USD&#x2F;2 100000] to {\n          10% to @taxes\n          remaining kept\n        }\n        &#x2F;&#x2F; Anything above that is, taxed at 20%\n        remaining to {\n          20% to @taxes\n          remaining kept\n        }\n      }\n    )\n</code></pre>\n(You can test it on the playground, you&#x27;ll just want to feed the &quot;users:1234&quot; account with an initial balance in the input section)</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41595344&amp;goto=item%3Fid%3D41593216%2341595344\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                        <tr class='athing comtr' id='41595633'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41595633' href='vote?id=41595633&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=euroderf\" class=\"hnuser\">euroderf</a> <span class=\"age\" title=\"2024-09-19T19:47:04.000000Z\"><a href=\"item?id=41595633\">3 hours ago</a></span> <span id=\"unv_41595633\"></span>          <span class='navs'>\n             | <a href=\"#41594311\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41595174\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41593946\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41595633\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">The rules listed (1,2,6,7 round down; 3,4,8,9 round up). AFAIK these are also the official Eurozone cash rules for countries that choose not to circulate 1 and 2 eurocent coins. (Altho of course, electronic transactions are exact to the penny.) So you might want to cover this use case.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41595633&amp;goto=item%3Fid%3D41593216%2341595633\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41593946'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41593946' href='vote?id=41593946&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=vslira\" class=\"hnuser\">vslira</a> <span class=\"age\" title=\"2024-09-19T17:04:17.000000Z\"><a href=\"item?id=41593946\">5 hours ago</a></span> <span id=\"unv_41593946\"></span>          <span class='navs'>\n             | <a href=\"#41594311\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41595699\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41593946\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Super interesting and thanks for sharing. If I understood the license page on the repository correctly, the DSL is MIT-licensed since it&#x27;s not within the enterprise directory, right?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41593946&amp;goto=item%3Fid%3D41593216%2341593946\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41594071'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41594071' href='vote?id=41594071&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=superzamp\" class=\"hnuser\">superzamp</a> <span class=\"age\" title=\"2024-09-19T17:16:27.000000Z\"><a href=\"item?id=41594071\">5 hours ago</a></span> <span id=\"unv_41594071\"></span>          <span class='navs'>\n             | <a href=\"#41593946\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41595699\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41594071\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Yes exactly! There&#x27;s actually two implementations, one tightly knit to our ledger product located at [1] and the new, standalone one (used by the playground) at [2]. In any case, in both implementations, the DSL is indeed MIT.<p>[1] <a href=\"https:&#x2F;&#x2F;github.com&#x2F;formancehq&#x2F;stack&#x2F;tree&#x2F;main&#x2F;components&#x2F;ledger&#x2F;internal&#x2F;machine\">https:&#x2F;&#x2F;github.com&#x2F;formancehq&#x2F;stack&#x2F;tree&#x2F;main&#x2F;components&#x2F;led...</a><p>[2] <a href=\"https:&#x2F;&#x2F;github.com&#x2F;formancehq&#x2F;numscript\">https:&#x2F;&#x2F;github.com&#x2F;formancehq&#x2F;numscript</a></div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41594071&amp;goto=item%3Fid%3D41593216%2341594071\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41595699'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41595699' href='vote?id=41595699&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=OutOfHere\" class=\"hnuser\">OutOfHere</a> <span class=\"age\" title=\"2024-09-19T19:51:03.000000Z\"><a href=\"item?id=41595699\">3 hours ago</a></span> <span id=\"unv_41595699\"></span>          <span class='navs'>\n             | <a href=\"#41593946\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41595699\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Can this or Formance interact with credit card systems, checking accounts, and layer 2 crypto wallets? If not, how is the money even going to come in or out?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41595699&amp;goto=item%3Fid%3D41593216%2341595699\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41593639'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41593639' href='vote?id=41593639&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=robk\" class=\"hnuser\">robk</a> <span class=\"age\" title=\"2024-09-19T16:34:05.000000Z\"><a href=\"item?id=41593639\">6 hours ago</a></span> <span id=\"unv_41593639\"></span>          <span class='navs'>\n             | <a href=\"#41595699\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41595127\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41593639\" n=\"8\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">This seems cool but what&#x27;s the intention with the USD&#x2F;2 notation? Is that for fractional sub-cent precision in rounding situations?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41593639&amp;goto=item%3Fid%3D41593216%2341593639\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41593756'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41593756' href='vote?id=41593756&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=superzamp\" class=\"hnuser\">superzamp</a> <span class=\"age\" title=\"2024-09-19T16:44:18.000000Z\"><a href=\"item?id=41593756\">6 hours ago</a></span> <span id=\"unv_41593756\"></span>          <span class='navs'>\n             | <a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41595127\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41593756\" n=\"7\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">It&#x27;s indeed relative to cents in a sense, the idea is to force you to declare the precision of the monetary amount you&#x27;re expressing.<p>You can see various interpretation of what &quot;USD&quot; means in the wild, as some APIs will happily parse USD 100 as $1.00 while some others might parse USD 100 as $100.00.<p>So we recommend this explicit [ASSET&#x2F;SCALE AMOUNT] notation, where SCALE describes the negative power of ten to multiply the AMOUNT with to obtain the decimal value in the given ASSET.<p>It makes subsequent interaction with external systems much easier. You can read a bit more about it here [1].<p>[1] <a href=\"https:&#x2F;&#x2F;docs.formance.com&#x2F;stack&#x2F;unambiguous-monetary-notation\">https:&#x2F;&#x2F;docs.formance.com&#x2F;stack&#x2F;unambiguous-monetary-notatio...</a></div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41593756&amp;goto=item%3Fid%3D41593216%2341593756\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41596932'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41596932' href='vote?id=41596932&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=girvo\" class=\"hnuser\">girvo</a> <span class=\"age\" title=\"2024-09-19T22:19:32.000000Z\"><a href=\"item?id=41596932\">39 minutes ago</a></span> <span id=\"unv_41596932\"></span>          <span class='navs'>\n             | <a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41593756\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41594568\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41596932\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Just to add to this, having also implemented a production payment system, we did the same thing. One needs to be very explicit about the scale and how it should be rounded and dealt with, and how to operate on two different scale systems. Quite a fun challenge, though I do not miss the edge cases.<p>Our system was a payment system for childcare management software, interfacing with banks and the government directly.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41596932&amp;goto=item%3Fid%3D41593216%2341596932\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41594568'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41594568' href='vote?id=41594568&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=tway_GdBRwW\" class=\"hnuser\">tway_GdBRwW</a> <span class=\"age\" title=\"2024-09-19T18:06:30.000000Z\"><a href=\"item?id=41594568\">4 hours ago</a></span> <span id=\"unv_41594568\"></span>          <span class='navs'>\n             | <a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41593756\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41596932\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41594216\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41594568\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Used to work at a payments company. Yes, you need to be *very* explicit in how you model currency amounts and precision. See also earlier post about Canadian rounding rules. Some of the &quot;logic&quot; is regulatory&#x2F;compliance driven.<p>ref child post about stocks trading for 0.0001. Yes, those are real trades and (probably) fully legal etc, but I&#x27;m not sure the Fed recognizes currency amounts less than 1 US cent ($0.01), so the accounting rules and tax rules might not match expectations based on generalized floating point math.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41594568&amp;goto=item%3Fid%3D41593216%2341594568\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41595671'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41595671' href='vote?id=41595671&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=euroderf\" class=\"hnuser\">euroderf</a> <span class=\"age\" title=\"2024-09-19T19:49:11.000000Z\"><a href=\"item?id=41595671\">3 hours ago</a></span> <span id=\"unv_41595671\"></span>          <span class='navs'>\n             | <a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41594568\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41594216\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41595671\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Doesn&#x27;t the Fed recognise mills ? They are not extinct.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41595671&amp;goto=item%3Fid%3D41593216%2341595671\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41594216'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41594216' href='vote?id=41594216&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=flockonus\" class=\"hnuser\">flockonus</a> <span class=\"age\" title=\"2024-09-19T17:31:05.000000Z\"><a href=\"item?id=41594216\">5 hours ago</a></span> <span id=\"unv_41594216\"></span>          <span class='navs'>\n             | <a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41593756\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41594568\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41595127\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41594216\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">What about units that cost sub-cent? For examples, I&#x27;ve seen private company stocks being $0.0001<p>Not sure why you&#x27;d need to make a note in the internal representation, vs. leave adapters to handle conversions.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41594216&amp;goto=item%3Fid%3D41593216%2341594216\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41594255'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41594255' href='vote?id=41594255&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=bbor\" class=\"hnuser\">bbor</a> <span class=\"age\" title=\"2024-09-19T17:34:36.000000Z\"><a href=\"item?id=41594255\">5 hours ago</a></span> <span id=\"unv_41594255\"></span>          <span class='navs'>\n             | <a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41594216\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41594543\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41594255\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Not to speak for them, but I think you’ve understood the point exactly. You need to be able to support arbitrary precision, but that support needs to be <i>intentional</i> to avoid errors. And you have to record that decision somewhere if adapters are to correctly handle your outputs; why not in the unit name?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41594255&amp;goto=item%3Fid%3D41593216%2341594255\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41594543'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41594543' href='vote?id=41594543&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=petesergeant\" class=\"hnuser\">petesergeant</a> <span class=\"age\" title=\"2024-09-19T18:03:36.000000Z\"><a href=\"item?id=41594543\">4 hours ago</a></span> <span id=\"unv_41594543\"></span>          <span class='navs'>\n             | <a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41594216\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41594255\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41595127\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41594543\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">If I understand their docs correctly, that’s equivalent to [USD&#x2F;4 1]</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41594543&amp;goto=item%3Fid%3D41593216%2341594543\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                              <tr class='athing comtr' id='41595127'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41595127' href='vote?id=41595127&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=jimbokun\" class=\"hnuser\">jimbokun</a> <span class=\"age\" title=\"2024-09-19T18:59:16.000000Z\"><a href=\"item?id=41595127\">3 hours ago</a></span> <span id=\"unv_41595127\"></span>          <span class='navs'>\n             | <a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41596494\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41595127\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Are there converters to&#x2F;from OFX for Numscript?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41595127&amp;goto=item%3Fid%3D41593216%2341595127\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41596494'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41596494' href='vote?id=41596494&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=henning\" class=\"hnuser\">henning</a> <span class=\"age\" title=\"2024-09-19T21:20:35.000000Z\"><a href=\"item?id=41596494\">1 hour ago</a></span> <span id=\"unv_41596494\"></span>          <span class='navs'>\n             | <a href=\"#41595127\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41594224\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41596494\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Ah, what better input format than JSON, a poorly defined, ambiguous format that freely mixes integers and floating points and lacks supports for bigints and bigdecimals.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41596494&amp;goto=item%3Fid%3D41593216%2341596494\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41594224'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41594224' href='vote?id=41594224&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=bbor\" class=\"hnuser\">bbor</a> <span class=\"age\" title=\"2024-09-19T17:31:44.000000Z\"><a href=\"item?id=41594224\">5 hours ago</a></span> <span id=\"unv_41594224\"></span>          <span class='navs'>\n             | <a href=\"#41596494\" class=\"clicky\" aria-hidden=\"true\">prev</a> <a class=\"togg clicky\" id=\"41594224\" n=\"4\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">To this noob, this seems like a problem that was pretty convincingly solved by double entry accounting ledgers, but from your post it sounds like this isn’t a replacement-of but rather an addition-to that model. What’s a situation where an imperative approach would be preferable to the traditional declarative approach? \nMy depth of knowledge pretty much starts and ends with the below document, so apologies if this is obvious to experts!<p><a href=\"https:&#x2F;&#x2F;beancount.github.io&#x2F;docs&#x2F;the_double_entry_counting_method.html#introduction\" rel=\"nofollow\">https:&#x2F;&#x2F;beancount.github.io&#x2F;docs&#x2F;the_double_entry_counting_m...</a><p>E: the problem being “tracking transactions”. Yes?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41594224&amp;goto=item%3Fid%3D41593216%2341594224\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41594607'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41594607' href='vote?id=41594607&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=superzamp\" class=\"hnuser\">superzamp</a> <span class=\"age\" title=\"2024-09-19T18:09:23.000000Z\"><a href=\"item?id=41594607\">4 hours ago</a></span> <span id=\"unv_41594607\"></span>          <span class='navs'>\n             | <a href=\"#41594224\" class=\"clicky\" aria-hidden=\"true\">parent</a> <a class=\"togg clicky\" id=\"41594607\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">That&#x27;s a very good question. So the DSL here operates an agnostic source&#x2F;dest transaction model, which is akin to the credit&#x2F;debit model sans the semantic baggage. The goal of this model is indeed to be &quot;tracking transactions&quot; in the abstract sense, having the benefit of not forcing accounting decisions too early on when there is (still yet) none.<p>For example, if you create a transaction moving money from &quot;@stripe:main&quot; to &quot;@acct:123&quot; and &quot;@acct:234&quot;, you&#x27;re merely representing the fact that you want this money to be moved. Wether the movement is clearing off a liability or generating revenue is another concern that you (in our model) want to take care of in a separate layer, that will also likely involve some intense intentionality and iterations from your accounting team.<p>In a sense, it&#x27;s as close to accounting than it is to warehousing money, moving unitary boxes of it from one location to another.<p>These two models have the same amount of information per entry, so they can actually be converted from one to another, enabling you to also represent some accounting-ish transactions with this DSL, e.g. with a send [USD&#x2F;2 100] from @ar:invoices:1234 to @sales.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41594607&amp;goto=item%3Fid%3D41593216%2341594607\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41595944'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41595944' href='vote?id=41595944&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=mamidon\" class=\"hnuser\">mamidon</a> <span class=\"age\" title=\"2024-09-19T20:13:52.000000Z\"><a href=\"item?id=41595944\">2 hours ago</a></span> <span id=\"unv_41595944\"></span>          <span class='navs'>\n             | <a href=\"#41594224\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41594607\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41595588\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41595944\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I&#x27;m living this life right now; except we baked in notions of Assets&#x2F;Liabilities&#x2F;Income&#x2F;Expenses into our ledger logic.  Only to realize our customers don&#x27;t care and just want to do whatever it is they&#x27;ve been doing.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41595944&amp;goto=item%3Fid%3D41593216%2341595944\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41595588'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41595588' href='vote?id=41595588&amp;how=up&amp;goto=item%3Fid%3D41593216'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=bbor\" class=\"hnuser\">bbor</a> <span class=\"age\" title=\"2024-09-19T19:42:37.000000Z\"><a href=\"item?id=41595588\">3 hours ago</a></span> <span id=\"unv_41595588\"></span>          <span class='navs'>\n             | <a href=\"#41594224\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41594607\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41595944\" class=\"clicky\" aria-hidden=\"true\">prev</a> <a class=\"togg clicky\" id=\"41595588\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Fascinating, thanks for taking the time to educate! Makes sense to me — it seems this tool is purpose built for situations where <i>tracking</i> is complex enough to deserve decoupling from <i>annotating</i> or <i>interpreting</i>, to put it in my own kindergarten terms.<p>I don’t have a need for this personally but I’ll definitely be bouncing this around in my head for a while, both technically (JS <i>ALL</i> the things!) and methodologically. Accounting is pretty trivial when you don’t have any income to track!</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41595588&amp;goto=item%3Fid%3D41593216%2341595588\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                        </table>\n  <br><br>\n</td></tr>\n<tr><td><img src=\"s.gif\" height=\"10\" width=\"0\"><table width=\"100%\" cellspacing=\"0\" cellpadding=\"1\"><tr><td bgcolor=\"#ff6600\"></td></tr></table><br>\n<center><span class=\"yclinks\"><a href=\"newsguidelines.html\">Guidelines</a> | <a href=\"newsfaq.html\">FAQ</a> | <a href=\"lists\">Lists</a> | <a href=\"https://github.com/HackerNews/API\">API</a> | <a href=\"security.html\">Security</a> | <a href=\"https://www.ycombinator.com/legal/\">Legal</a> | <a href=\"https://www.ycombinator.com/apply/\">Apply to YC</a> | <a href=\"mailto:hn@ycombinator.com\">Contact</a></span><br><br>\n<form method=\"get\" action=\"//hn.algolia.com/\">Search: <input type=\"text\" name=\"q\" size=\"17\" autocorrect=\"off\" spellcheck=\"false\" autocapitalize=\"off\" autocomplete=\"off\"></form></center></td></tr>      </table></center></body>\n      <script type='text/javascript' src='hn.js?WNnbPR2RzcIA6QwrdQmO'></script>\n  </html>\n",
  "text": "        Show HN: Numscript, a declarative language to model financial transactions | Hacker News    Hacker News  new | past | comments | ask | show | jobs | submit   login          Show HN: Numscript, a declarative language to model financial transactions ( numscript.org )   110 points by superzamp  6 hours ago   | hide | past | favorite | 22 comments      Numscript is a simple, declarative language that helps you model financial transactions. You can do quite a few things with it, such as modeling: * Payments involving vouchers and a user's prepaid balance\n* Complex funds destination scenario where the customer gets cash back\n* Configurable user credit balance spending transactions The main idea is to take the pain out of describing of a system dealing with money movements should behave in traditional languages such as JS/TS/Go/Ruby etc, landing an expressive way to model these movements of value. It is voluntarily broad in applicability—our customers use it today for use-cases ranging from marketplaces funds orchestration to home-grown loan management systems. Once those transactions are modeled, they are to be picked up and committed to a system-of-record, ledgering system or executed on a set of payments and banking APIs. It was initially a DSL we bundled into our Core Ledger product at Formance (YCS21) but we're giving it more autonomy now and started to make it standalone, with the idea that anyone could eventually bolt Numscript on top of their ledgering system. We're also exploring to make it natively compatible with other backends. As part of this un-bundling, we've just shipping a playground which lets you fiddle with it without installing anything at https://playground.numscript.org/ (it works best on desktop). Happy to chime in on any questions!                       abdullahkhalids  5 hours ago    | next  [–]      How would this handle Canadian guidelines for dealing with cents in cash, where you round to the nearest 5c [1]?  Amounts ending in 1 cent and 2 cents are rounded down to the nearest 10 cents;\n    Amounts ending in 3 cents and 4 cents are rounded up to the nearest 5 cents;\n    Amounts ending in 6 cents and 7 cents are rounded down to the nearest 5 cents;\n    Amounts ending in 8 cents and 9 cents are rounded up to the nearest 10 cents;\n    Amounts ending in 0 cent and 5 cents remain unchanged. EDIT: I think if you send 12 cents,  send [CADCASH/2 12] ( source = @user1 destination = @user2 ) It should result in sending 10 cents.  \"postings\": [{\"source\": \"user1\",\n                  \"destination\": \"user2\",\n                  \"amount\": 10,\n                  \"asset\": \"CADCASH/2\"}] Can this happen? [1] https://www.canada.ca/en/revenue-agency/programs/about-canad...    reply            superzamp  3 hours ago    | parent | next  [–]      Well that's definitely a good puzzle. I've tried to model it for a bit, but it indeed looks like we'd need to add something to the language to make it possible at all! Thanks for bringing this up.    reply            fallat  3 hours ago    | root | parent | next  [–]      Same thing with income tax brackets. You need conditional logic.    reply            superzamp  3 hours ago    | root | parent | next  [–]      For this particular case, I would say that tax-brackets sort of logic can be expressed in the destination block with ordered destinations. For example, you could have something like this:  send [USD/2 *] (\n      source = @users:1234\n      destination = {\n        // first $1000 are taxed at 10%\n        max [USD/2 100000] to {\n          10% to @taxes\n          remaining kept\n        }\n        // Anything above that is, taxed at 20%\n        remaining to {\n          20% to @taxes\n          remaining kept\n        }\n      }\n    ) (You can test it on the playground, you'll just want to feed the \"users:1234\" account with an initial balance in the input section)    reply            euroderf  3 hours ago    | parent | prev | next  [–]      The rules listed (1,2,6,7 round down; 3,4,8,9 round up). AFAIK these are also the official Eurozone cash rules for countries that choose not to circulate 1 and 2 eurocent coins. (Altho of course, electronic transactions are exact to the penny.) So you might want to cover this use case.    reply            vslira  5 hours ago    | prev | next  [–]      Super interesting and thanks for sharing. If I understood the license page on the repository correctly, the DSL is MIT-licensed since it's not within the enterprise directory, right?    reply            superzamp  5 hours ago    | parent | next  [–]      Yes exactly! There's actually two implementations, one tightly knit to our ledger product located at [1] and the new, standalone one (used by the playground) at [2]. In any case, in both implementations, the DSL is indeed MIT. [1] https://github.com/formancehq/stack/tree/main/components/led... [2] https://github.com/formancehq/numscript    reply            OutOfHere  3 hours ago    | prev | next  [–]      Can this or Formance interact with credit card systems, checking accounts, and layer 2 crypto wallets? If not, how is the money even going to come in or out?    reply            robk  6 hours ago    | prev | next  [–]      This seems cool but what's the intention with the USD/2 notation? Is that for fractional sub-cent precision in rounding situations?    reply            superzamp  6 hours ago    | parent | next  [–]      It's indeed relative to cents in a sense, the idea is to force you to declare the precision of the monetary amount you're expressing. You can see various interpretation of what \"USD\" means in the wild, as some APIs will happily parse USD 100 as $1.00 while some others might parse USD 100 as $100.00. So we recommend this explicit [ASSET/SCALE AMOUNT] notation, where SCALE describes the negative power of ten to multiply the AMOUNT with to obtain the decimal value in the given ASSET. It makes subsequent interaction with external systems much easier. You can read a bit more about it here [1]. [1] https://docs.formance.com/stack/unambiguous-monetary-notatio...    reply            girvo  39 minutes ago    | root | parent | next  [–]      Just to add to this, having also implemented a production payment system, we did the same thing. One needs to be very explicit about the scale and how it should be rounded and dealt with, and how to operate on two different scale systems. Quite a fun challenge, though I do not miss the edge cases. Our system was a payment system for childcare management software, interfacing with banks and the government directly.    reply            tway_GdBRwW  4 hours ago    | root | parent | prev | next  [–]      Used to work at a payments company. Yes, you need to be *very* explicit in how you model currency amounts and precision. See also earlier post about Canadian rounding rules. Some of the \"logic\" is regulatory/compliance driven. ref child post about stocks trading for 0.0001. Yes, those are real trades and (probably) fully legal etc, but I'm not sure the Fed recognizes currency amounts less than 1 US cent ($0.01), so the accounting rules and tax rules might not match expectations based on generalized floating point math.    reply            euroderf  3 hours ago    | root | parent | next  [–]      Doesn't the Fed recognise mills ? They are not extinct.    reply            flockonus  5 hours ago    | root | parent | prev | next  [–]      What about units that cost sub-cent? For examples, I've seen private company stocks being $0.0001 Not sure why you'd need to make a note in the internal representation, vs. leave adapters to handle conversions.    reply            bbor  5 hours ago    | root | parent | next  [–]      Not to speak for them, but I think you’ve understood the point exactly. You need to be able to support arbitrary precision, but that support needs to be intentional to avoid errors. And you have to record that decision somewhere if adapters are to correctly handle your outputs; why not in the unit name?    reply            petesergeant  4 hours ago    | root | parent | prev | next  [–]      If I understand their docs correctly, that’s equivalent to [USD/4 1]    reply            jimbokun  3 hours ago    | prev | next  [–]      Are there converters to/from OFX for Numscript?    reply            henning  1 hour ago    | prev | next  [–]      Ah, what better input format than JSON, a poorly defined, ambiguous format that freely mixes integers and floating points and lacks supports for bigints and bigdecimals.    reply            bbor  5 hours ago    | prev  [–]      To this noob, this seems like a problem that was pretty convincingly solved by double entry accounting ledgers, but from your post it sounds like this isn’t a replacement-of but rather an addition-to that model. What’s a situation where an imperative approach would be preferable to the traditional declarative approach? \nMy depth of knowledge pretty much starts and ends with the below document, so apologies if this is obvious to experts! https://beancount.github.io/docs/the_double_entry_counting_m... E: the problem being “tracking transactions”. Yes?    reply            superzamp  4 hours ago    | parent  [–]      That's a very good question. So the DSL here operates an agnostic source/dest transaction model, which is akin to the credit/debit model sans the semantic baggage. The goal of this model is indeed to be \"tracking transactions\" in the abstract sense, having the benefit of not forcing accounting decisions too early on when there is (still yet) none. For example, if you create a transaction moving money from \"@stripe:main\" to \"@acct:123\" and \"@acct:234\", you're merely representing the fact that you want this money to be moved. Wether the movement is clearing off a liability or generating revenue is another concern that you (in our model) want to take care of in a separate layer, that will also likely involve some intense intentionality and iterations from your accounting team. In a sense, it's as close to accounting than it is to warehousing money, moving unitary boxes of it from one location to another. These two models have the same amount of information per entry, so they can actually be converted from one to another, enabling you to also represent some accounting-ish transactions with this DSL, e.g. with a send [USD/2 100] from @ar:invoices:1234 to @sales.    reply            mamidon  2 hours ago    | root | parent | next  [–]      I'm living this life right now; except we baked in notions of Assets/Liabilities/Income/Expenses into our ledger logic.  Only to realize our customers don't care and just want to do whatever it is they've been doing.    reply            bbor  3 hours ago    | root | parent | prev  [–]      Fascinating, thanks for taking the time to educate! Makes sense to me — it seems this tool is purpose built for situations where tracking is complex enough to deserve decoupling from annotating or interpreting , to put it in my own kindergarten terms. I don’t have a need for this personally but I’ll definitely be bouncing this around in my head for a while, both technically (JS ALL the things!) and methodologically. Accounting is pretty trivial when you don’t have any income to track!    reply              Guidelines | FAQ | Lists | API | Security | Legal | Apply to YC | Contact    Search:              Show HN: Numscript, a declarative language to model financial transactions | Hacker News Show HN: Numscript, a declarative language to model financial transactions | Hacker News    Hacker News  new | past | comments | ask | show | jobs | submit   login          Show HN: Numscript, a declarative language to model financial transactions ( numscript.org )   110 points by superzamp  6 hours ago   | hide | past | favorite | 22 comments      Numscript is a simple, declarative language that helps you model financial transactions. You can do quite a few things with it, such as modeling: * Payments involving vouchers and a user's prepaid balance\n* Complex funds destination scenario where the customer gets cash back\n* Configurable user credit balance spending transactions The main idea is to take the pain out of describing of a system dealing with money movements should behave in traditional languages such as JS/TS/Go/Ruby etc, landing an expressive way to model these movements of value. It is voluntarily broad in applicability—our customers use it today for use-cases ranging from marketplaces funds orchestration to home-grown loan management systems. Once those transactions are modeled, they are to be picked up and committed to a system-of-record, ledgering system or executed on a set of payments and banking APIs. It was initially a DSL we bundled into our Core Ledger product at Formance (YCS21) but we're giving it more autonomy now and started to make it standalone, with the idea that anyone could eventually bolt Numscript on top of their ledgering system. We're also exploring to make it natively compatible with other backends. As part of this un-bundling, we've just shipping a playground which lets you fiddle with it without installing anything at https://playground.numscript.org/ (it works best on desktop). Happy to chime in on any questions!                       abdullahkhalids  5 hours ago    | next  [–]      How would this handle Canadian guidelines for dealing with cents in cash, where you round to the nearest 5c [1]?  Amounts ending in 1 cent and 2 cents are rounded down to the nearest 10 cents;\n    Amounts ending in 3 cents and 4 cents are rounded up to the nearest 5 cents;\n    Amounts ending in 6 cents and 7 cents are rounded down to the nearest 5 cents;\n    Amounts ending in 8 cents and 9 cents are rounded up to the nearest 10 cents;\n    Amounts ending in 0 cent and 5 cents remain unchanged. EDIT: I think if you send 12 cents,  send [CADCASH/2 12] ( source = @user1 destination = @user2 ) It should result in sending 10 cents.  \"postings\": [{\"source\": \"user1\",\n                  \"destination\": \"user2\",\n                  \"amount\": 10,\n                  \"asset\": \"CADCASH/2\"}] Can this happen? [1] https://www.canada.ca/en/revenue-agency/programs/about-canad...    reply            superzamp  3 hours ago    | parent | next  [–]      Well that's definitely a good puzzle. I've tried to model it for a bit, but it indeed looks like we'd need to add something to the language to make it possible at all! Thanks for bringing this up.    reply            fallat  3 hours ago    | root | parent | next  [–]      Same thing with income tax brackets. You need conditional logic.    reply            superzamp  3 hours ago    | root | parent | next  [–]      For this particular case, I would say that tax-brackets sort of logic can be expressed in the destination block with ordered destinations. For example, you could have something like this:  send [USD/2 *] (\n      source = @users:1234\n      destination = {\n        // first $1000 are taxed at 10%\n        max [USD/2 100000] to {\n          10% to @taxes\n          remaining kept\n        }\n        // Anything above that is, taxed at 20%\n        remaining to {\n          20% to @taxes\n          remaining kept\n        }\n      }\n    ) (You can test it on the playground, you'll just want to feed the \"users:1234\" account with an initial balance in the input section)    reply            euroderf  3 hours ago    | parent | prev | next  [–]      The rules listed (1,2,6,7 round down; 3,4,8,9 round up). AFAIK these are also the official Eurozone cash rules for countries that choose not to circulate 1 and 2 eurocent coins. (Altho of course, electronic transactions are exact to the penny.) So you might want to cover this use case.    reply            vslira  5 hours ago    | prev | next  [–]      Super interesting and thanks for sharing. If I understood the license page on the repository correctly, the DSL is MIT-licensed since it's not within the enterprise directory, right?    reply            superzamp  5 hours ago    | parent | next  [–]      Yes exactly! There's actually two implementations, one tightly knit to our ledger product located at [1] and the new, standalone one (used by the playground) at [2]. In any case, in both implementations, the DSL is indeed MIT. [1] https://github.com/formancehq/stack/tree/main/components/led... [2] https://github.com/formancehq/numscript    reply            OutOfHere  3 hours ago    | prev | next  [–]      Can this or Formance interact with credit card systems, checking accounts, and layer 2 crypto wallets? If not, how is the money even going to come in or out?    reply            robk  6 hours ago    | prev | next  [–]      This seems cool but what's the intention with the USD/2 notation? Is that for fractional sub-cent precision in rounding situations?    reply            superzamp  6 hours ago    | parent | next  [–]      It's indeed relative to cents in a sense, the idea is to force you to declare the precision of the monetary amount you're expressing. You can see various interpretation of what \"USD\" means in the wild, as some APIs will happily parse USD 100 as $1.00 while some others might parse USD 100 as $100.00. So we recommend this explicit [ASSET/SCALE AMOUNT] notation, where SCALE describes the negative power of ten to multiply the AMOUNT with to obtain the decimal value in the given ASSET. It makes subsequent interaction with external systems much easier. You can read a bit more about it here [1]. [1] https://docs.formance.com/stack/unambiguous-monetary-notatio...    reply            girvo  39 minutes ago    | root | parent | next  [–]      Just to add to this, having also implemented a production payment system, we did the same thing. One needs to be very explicit about the scale and how it should be rounded and dealt with, and how to operate on two different scale systems. Quite a fun challenge, though I do not miss the edge cases. Our system was a payment system for childcare management software, interfacing with banks and the government directly.    reply            tway_GdBRwW  4 hours ago    | root | parent | prev | next  [–]      Used to work at a payments company. Yes, you need to be *very* explicit in how you model currency amounts and precision. See also earlier post about Canadian rounding rules. Some of the \"logic\" is regulatory/compliance driven. ref child post about stocks trading for 0.0001. Yes, those are real trades and (probably) fully legal etc, but I'm not sure the Fed recognizes currency amounts less than 1 US cent ($0.01), so the accounting rules and tax rules might not match expectations based on generalized floating point math.    reply            euroderf  3 hours ago    | root | parent | next  [–]      Doesn't the Fed recognise mills ? They are not extinct.    reply            flockonus  5 hours ago    | root | parent | prev | next  [–]      What about units that cost sub-cent? For examples, I've seen private company stocks being $0.0001 Not sure why you'd need to make a note in the internal representation, vs. leave adapters to handle conversions.    reply            bbor  5 hours ago    | root | parent | next  [–]      Not to speak for them, but I think you’ve understood the point exactly. You need to be able to support arbitrary precision, but that support needs to be intentional to avoid errors. And you have to record that decision somewhere if adapters are to correctly handle your outputs; why not in the unit name?    reply            petesergeant  4 hours ago    | root | parent | prev | next  [–]      If I understand their docs correctly, that’s equivalent to [USD/4 1]    reply            jimbokun  3 hours ago    | prev | next  [–]      Are there converters to/from OFX for Numscript?    reply            henning  1 hour ago    | prev | next  [–]      Ah, what better input format than JSON, a poorly defined, ambiguous format that freely mixes integers and floating points and lacks supports for bigints and bigdecimals.    reply            bbor  5 hours ago    | prev  [–]      To this noob, this seems like a problem that was pretty convincingly solved by double entry accounting ledgers, but from your post it sounds like this isn’t a replacement-of but rather an addition-to that model. What’s a situation where an imperative approach would be preferable to the traditional declarative approach? \nMy depth of knowledge pretty much starts and ends with the below document, so apologies if this is obvious to experts! https://beancount.github.io/docs/the_double_entry_counting_m... E: the problem being “tracking transactions”. Yes?    reply            superzamp  4 hours ago    | parent  [–]      That's a very good question. So the DSL here operates an agnostic source/dest transaction model, which is akin to the credit/debit model sans the semantic baggage. The goal of this model is indeed to be \"tracking transactions\" in the abstract sense, having the benefit of not forcing accounting decisions too early on when there is (still yet) none. For example, if you create a transaction moving money from \"@stripe:main\" to \"@acct:123\" and \"@acct:234\", you're merely representing the fact that you want this money to be moved. Wether the movement is clearing off a liability or generating revenue is another concern that you (in our model) want to take care of in a separate layer, that will also likely involve some intense intentionality and iterations from your accounting team. In a sense, it's as close to accounting than it is to warehousing money, moving unitary boxes of it from one location to another. These two models have the same amount of information per entry, so they can actually be converted from one to another, enabling you to also represent some accounting-ish transactions with this DSL, e.g. with a send [USD/2 100] from @ar:invoices:1234 to @sales.    reply            mamidon  2 hours ago    | root | parent | next  [–]      I'm living this life right now; except we baked in notions of Assets/Liabilities/Income/Expenses into our ledger logic.  Only to realize our customers don't care and just want to do whatever it is they've been doing.    reply            bbor  3 hours ago    | root | parent | prev  [–]      Fascinating, thanks for taking the time to educate! Makes sense to me — it seems this tool is purpose built for situations where tracking is complex enough to deserve decoupling from annotating or interpreting , to put it in my own kindergarten terms. I don’t have a need for this personally but I’ll definitely be bouncing this around in my head for a while, both technically (JS ALL the things!) and methodologically. Accounting is pretty trivial when you don’t have any income to track!    reply              Guidelines | FAQ | Lists | API | Security | Legal | Apply to YC | Contact    Search:         Hacker News  new | past | comments | ask | show | jobs | submit   login          Show HN: Numscript, a declarative language to model financial transactions ( numscript.org )   110 points by superzamp  6 hours ago   | hide | past | favorite | 22 comments      Numscript is a simple, declarative language that helps you model financial transactions. You can do quite a few things with it, such as modeling: * Payments involving vouchers and a user's prepaid balance\n* Complex funds destination scenario where the customer gets cash back\n* Configurable user credit balance spending transactions The main idea is to take the pain out of describing of a system dealing with money movements should behave in traditional languages such as JS/TS/Go/Ruby etc, landing an expressive way to model these movements of value. It is voluntarily broad in applicability—our customers use it today for use-cases ranging from marketplaces funds orchestration to home-grown loan management systems. Once those transactions are modeled, they are to be picked up and committed to a system-of-record, ledgering system or executed on a set of payments and banking APIs. It was initially a DSL we bundled into our Core Ledger product at Formance (YCS21) but we're giving it more autonomy now and started to make it standalone, with the idea that anyone could eventually bolt Numscript on top of their ledgering system. We're also exploring to make it natively compatible with other backends. As part of this un-bundling, we've just shipping a playground which lets you fiddle with it without installing anything at https://playground.numscript.org/ (it works best on desktop). Happy to chime in on any questions!                       abdullahkhalids  5 hours ago    | next  [–]      How would this handle Canadian guidelines for dealing with cents in cash, where you round to the nearest 5c [1]?  Amounts ending in 1 cent and 2 cents are rounded down to the nearest 10 cents;\n    Amounts ending in 3 cents and 4 cents are rounded up to the nearest 5 cents;\n    Amounts ending in 6 cents and 7 cents are rounded down to the nearest 5 cents;\n    Amounts ending in 8 cents and 9 cents are rounded up to the nearest 10 cents;\n    Amounts ending in 0 cent and 5 cents remain unchanged. EDIT: I think if you send 12 cents,  send [CADCASH/2 12] ( source = @user1 destination = @user2 ) It should result in sending 10 cents.  \"postings\": [{\"source\": \"user1\",\n                  \"destination\": \"user2\",\n                  \"amount\": 10,\n                  \"asset\": \"CADCASH/2\"}] Can this happen? [1] https://www.canada.ca/en/revenue-agency/programs/about-canad...    reply            superzamp  3 hours ago    | parent | next  [–]      Well that's definitely a good puzzle. I've tried to model it for a bit, but it indeed looks like we'd need to add something to the language to make it possible at all! Thanks for bringing this up.    reply            fallat  3 hours ago    | root | parent | next  [–]      Same thing with income tax brackets. You need conditional logic.    reply            superzamp  3 hours ago    | root | parent | next  [–]      For this particular case, I would say that tax-brackets sort of logic can be expressed in the destination block with ordered destinations. For example, you could have something like this:  send [USD/2 *] (\n      source = @users:1234\n      destination = {\n        // first $1000 are taxed at 10%\n        max [USD/2 100000] to {\n          10% to @taxes\n          remaining kept\n        }\n        // Anything above that is, taxed at 20%\n        remaining to {\n          20% to @taxes\n          remaining kept\n        }\n      }\n    ) (You can test it on the playground, you'll just want to feed the \"users:1234\" account with an initial balance in the input section)    reply            euroderf  3 hours ago    | parent | prev | next  [–]      The rules listed (1,2,6,7 round down; 3,4,8,9 round up). AFAIK these are also the official Eurozone cash rules for countries that choose not to circulate 1 and 2 eurocent coins. (Altho of course, electronic transactions are exact to the penny.) So you might want to cover this use case.    reply            vslira  5 hours ago    | prev | next  [–]      Super interesting and thanks for sharing. If I understood the license page on the repository correctly, the DSL is MIT-licensed since it's not within the enterprise directory, right?    reply            superzamp  5 hours ago    | parent | next  [–]      Yes exactly! There's actually two implementations, one tightly knit to our ledger product located at [1] and the new, standalone one (used by the playground) at [2]. In any case, in both implementations, the DSL is indeed MIT. [1] https://github.com/formancehq/stack/tree/main/components/led... [2] https://github.com/formancehq/numscript    reply            OutOfHere  3 hours ago    | prev | next  [–]      Can this or Formance interact with credit card systems, checking accounts, and layer 2 crypto wallets? If not, how is the money even going to come in or out?    reply            robk  6 hours ago    | prev | next  [–]      This seems cool but what's the intention with the USD/2 notation? Is that for fractional sub-cent precision in rounding situations?    reply            superzamp  6 hours ago    | parent | next  [–]      It's indeed relative to cents in a sense, the idea is to force you to declare the precision of the monetary amount you're expressing. You can see various interpretation of what \"USD\" means in the wild, as some APIs will happily parse USD 100 as $1.00 while some others might parse USD 100 as $100.00. So we recommend this explicit [ASSET/SCALE AMOUNT] notation, where SCALE describes the negative power of ten to multiply the AMOUNT with to obtain the decimal value in the given ASSET. It makes subsequent interaction with external systems much easier. You can read a bit more about it here [1]. [1] https://docs.formance.com/stack/unambiguous-monetary-notatio...    reply            girvo  39 minutes ago    | root | parent | next  [–]      Just to add to this, having also implemented a production payment system, we did the same thing. One needs to be very explicit about the scale and how it should be rounded and dealt with, and how to operate on two different scale systems. Quite a fun challenge, though I do not miss the edge cases. Our system was a payment system for childcare management software, interfacing with banks and the government directly.    reply            tway_GdBRwW  4 hours ago    | root | parent | prev | next  [–]      Used to work at a payments company. Yes, you need to be *very* explicit in how you model currency amounts and precision. See also earlier post about Canadian rounding rules. Some of the \"logic\" is regulatory/compliance driven. ref child post about stocks trading for 0.0001. Yes, those are real trades and (probably) fully legal etc, but I'm not sure the Fed recognizes currency amounts less than 1 US cent ($0.01), so the accounting rules and tax rules might not match expectations based on generalized floating point math.    reply            euroderf  3 hours ago    | root | parent | next  [–]      Doesn't the Fed recognise mills ? They are not extinct.    reply            flockonus  5 hours ago    | root | parent | prev | next  [–]      What about units that cost sub-cent? For examples, I've seen private company stocks being $0.0001 Not sure why you'd need to make a note in the internal representation, vs. leave adapters to handle conversions.    reply            bbor  5 hours ago    | root | parent | next  [–]      Not to speak for them, but I think you’ve understood the point exactly. You need to be able to support arbitrary precision, but that support needs to be intentional to avoid errors. And you have to record that decision somewhere if adapters are to correctly handle your outputs; why not in the unit name?    reply            petesergeant  4 hours ago    | root | parent | prev | next  [–]      If I understand their docs correctly, that’s equivalent to [USD/4 1]    reply            jimbokun  3 hours ago    | prev | next  [–]      Are there converters to/from OFX for Numscript?    reply            henning  1 hour ago    | prev | next  [–]      Ah, what better input format than JSON, a poorly defined, ambiguous format that freely mixes integers and floating points and lacks supports for bigints and bigdecimals.    reply            bbor  5 hours ago    | prev  [–]      To this noob, this seems like a problem that was pretty convincingly solved by double entry accounting ledgers, but from your post it sounds like this isn’t a replacement-of but rather an addition-to that model. What’s a situation where an imperative approach would be preferable to the traditional declarative approach? \nMy depth of knowledge pretty much starts and ends with the below document, so apologies if this is obvious to experts! https://beancount.github.io/docs/the_double_entry_counting_m... E: the problem being “tracking transactions”. Yes?    reply            superzamp  4 hours ago    | parent  [–]      That's a very good question. So the DSL here operates an agnostic source/dest transaction model, which is akin to the credit/debit model sans the semantic baggage. The goal of this model is indeed to be \"tracking transactions\" in the abstract sense, having the benefit of not forcing accounting decisions too early on when there is (still yet) none. For example, if you create a transaction moving money from \"@stripe:main\" to \"@acct:123\" and \"@acct:234\", you're merely representing the fact that you want this money to be moved. Wether the movement is clearing off a liability or generating revenue is another concern that you (in our model) want to take care of in a separate layer, that will also likely involve some intense intentionality and iterations from your accounting team. In a sense, it's as close to accounting than it is to warehousing money, moving unitary boxes of it from one location to another. These two models have the same amount of information per entry, so they can actually be converted from one to another, enabling you to also represent some accounting-ish transactions with this DSL, e.g. with a send [USD/2 100] from @ar:invoices:1234 to @sales.    reply            mamidon  2 hours ago    | root | parent | next  [–]      I'm living this life right now; except we baked in notions of Assets/Liabilities/Income/Expenses into our ledger logic.  Only to realize our customers don't care and just want to do whatever it is they've been doing.    reply            bbor  3 hours ago    | root | parent | prev  [–]      Fascinating, thanks for taking the time to educate! Makes sense to me — it seems this tool is purpose built for situations where tracking is complex enough to deserve decoupling from annotating or interpreting , to put it in my own kindergarten terms. I don’t have a need for this personally but I’ll definitely be bouncing this around in my head for a while, both technically (JS ALL the things!) and methodologically. Accounting is pretty trivial when you don’t have any income to track!    reply              Guidelines | FAQ | Lists | API | Security | Legal | Apply to YC | Contact    Search:      Hacker News  new | past | comments | ask | show | jobs | submit   login          Show HN: Numscript, a declarative language to model financial transactions ( numscript.org )   110 points by superzamp  6 hours ago   | hide | past | favorite | 22 comments      Numscript is a simple, declarative language that helps you model financial transactions. You can do quite a few things with it, such as modeling: * Payments involving vouchers and a user's prepaid balance\n* Complex funds destination scenario where the customer gets cash back\n* Configurable user credit balance spending transactions The main idea is to take the pain out of describing of a system dealing with money movements should behave in traditional languages such as JS/TS/Go/Ruby etc, landing an expressive way to model these movements of value. It is voluntarily broad in applicability—our customers use it today for use-cases ranging from marketplaces funds orchestration to home-grown loan management systems. Once those transactions are modeled, they are to be picked up and committed to a system-of-record, ledgering system or executed on a set of payments and banking APIs. It was initially a DSL we bundled into our Core Ledger product at Formance (YCS21) but we're giving it more autonomy now and started to make it standalone, with the idea that anyone could eventually bolt Numscript on top of their ledgering system. We're also exploring to make it natively compatible with other backends. As part of this un-bundling, we've just shipping a playground which lets you fiddle with it without installing anything at https://playground.numscript.org/ (it works best on desktop). Happy to chime in on any questions!                       abdullahkhalids  5 hours ago    | next  [–]      How would this handle Canadian guidelines for dealing with cents in cash, where you round to the nearest 5c [1]?  Amounts ending in 1 cent and 2 cents are rounded down to the nearest 10 cents;\n    Amounts ending in 3 cents and 4 cents are rounded up to the nearest 5 cents;\n    Amounts ending in 6 cents and 7 cents are rounded down to the nearest 5 cents;\n    Amounts ending in 8 cents and 9 cents are rounded up to the nearest 10 cents;\n    Amounts ending in 0 cent and 5 cents remain unchanged. EDIT: I think if you send 12 cents,  send [CADCASH/2 12] ( source = @user1 destination = @user2 ) It should result in sending 10 cents.  \"postings\": [{\"source\": \"user1\",\n                  \"destination\": \"user2\",\n                  \"amount\": 10,\n                  \"asset\": \"CADCASH/2\"}] Can this happen? [1] https://www.canada.ca/en/revenue-agency/programs/about-canad...    reply            superzamp  3 hours ago    | parent | next  [–]      Well that's definitely a good puzzle. I've tried to model it for a bit, but it indeed looks like we'd need to add something to the language to make it possible at all! Thanks for bringing this up.    reply            fallat  3 hours ago    | root | parent | next  [–]      Same thing with income tax brackets. You need conditional logic.    reply            superzamp  3 hours ago    | root | parent | next  [–]      For this particular case, I would say that tax-brackets sort of logic can be expressed in the destination block with ordered destinations. For example, you could have something like this:  send [USD/2 *] (\n      source = @users:1234\n      destination = {\n        // first $1000 are taxed at 10%\n        max [USD/2 100000] to {\n          10% to @taxes\n          remaining kept\n        }\n        // Anything above that is, taxed at 20%\n        remaining to {\n          20% to @taxes\n          remaining kept\n        }\n      }\n    ) (You can test it on the playground, you'll just want to feed the \"users:1234\" account with an initial balance in the input section)    reply            euroderf  3 hours ago    | parent | prev | next  [–]      The rules listed (1,2,6,7 round down; 3,4,8,9 round up). AFAIK these are also the official Eurozone cash rules for countries that choose not to circulate 1 and 2 eurocent coins. (Altho of course, electronic transactions are exact to the penny.) So you might want to cover this use case.    reply            vslira  5 hours ago    | prev | next  [–]      Super interesting and thanks for sharing. If I understood the license page on the repository correctly, the DSL is MIT-licensed since it's not within the enterprise directory, right?    reply            superzamp  5 hours ago    | parent | next  [–]      Yes exactly! There's actually two implementations, one tightly knit to our ledger product located at [1] and the new, standalone one (used by the playground) at [2]. In any case, in both implementations, the DSL is indeed MIT. [1] https://github.com/formancehq/stack/tree/main/components/led... [2] https://github.com/formancehq/numscript    reply            OutOfHere  3 hours ago    | prev | next  [–]      Can this or Formance interact with credit card systems, checking accounts, and layer 2 crypto wallets? If not, how is the money even going to come in or out?    reply            robk  6 hours ago    | prev | next  [–]      This seems cool but what's the intention with the USD/2 notation? Is that for fractional sub-cent precision in rounding situations?    reply            superzamp  6 hours ago    | parent | next  [–]      It's indeed relative to cents in a sense, the idea is to force you to declare the precision of the monetary amount you're expressing. You can see various interpretation of what \"USD\" means in the wild, as some APIs will happily parse USD 100 as $1.00 while some others might parse USD 100 as $100.00. So we recommend this explicit [ASSET/SCALE AMOUNT] notation, where SCALE describes the negative power of ten to multiply the AMOUNT with to obtain the decimal value in the given ASSET. It makes subsequent interaction with external systems much easier. You can read a bit more about it here [1]. [1] https://docs.formance.com/stack/unambiguous-monetary-notatio...    reply            girvo  39 minutes ago    | root | parent | next  [–]      Just to add to this, having also implemented a production payment system, we did the same thing. One needs to be very explicit about the scale and how it should be rounded and dealt with, and how to operate on two different scale systems. Quite a fun challenge, though I do not miss the edge cases. Our system was a payment system for childcare management software, interfacing with banks and the government directly.    reply            tway_GdBRwW  4 hours ago    | root | parent | prev | next  [–]      Used to work at a payments company. Yes, you need to be *very* explicit in how you model currency amounts and precision. See also earlier post about Canadian rounding rules. Some of the \"logic\" is regulatory/compliance driven. ref child post about stocks trading for 0.0001. Yes, those are real trades and (probably) fully legal etc, but I'm not sure the Fed recognizes currency amounts less than 1 US cent ($0.01), so the accounting rules and tax rules might not match expectations based on generalized floating point math.    reply            euroderf  3 hours ago    | root | parent | next  [–]      Doesn't the Fed recognise mills ? They are not extinct.    reply            flockonus  5 hours ago    | root | parent | prev | next  [–]      What about units that cost sub-cent? For examples, I've seen private company stocks being $0.0001 Not sure why you'd need to make a note in the internal representation, vs. leave adapters to handle conversions.    reply            bbor  5 hours ago    | root | parent | next  [–]      Not to speak for them, but I think you’ve understood the point exactly. You need to be able to support arbitrary precision, but that support needs to be intentional to avoid errors. And you have to record that decision somewhere if adapters are to correctly handle your outputs; why not in the unit name?    reply            petesergeant  4 hours ago    | root | parent | prev | next  [–]      If I understand their docs correctly, that’s equivalent to [USD/4 1]    reply            jimbokun  3 hours ago    | prev | next  [–]      Are there converters to/from OFX for Numscript?    reply            henning  1 hour ago    | prev | next  [–]      Ah, what better input format than JSON, a poorly defined, ambiguous format that freely mixes integers and floating points and lacks supports for bigints and bigdecimals.    reply            bbor  5 hours ago    | prev  [–]      To this noob, this seems like a problem that was pretty convincingly solved by double entry accounting ledgers, but from your post it sounds like this isn’t a replacement-of but rather an addition-to that model. What’s a situation where an imperative approach would be preferable to the traditional declarative approach? \nMy depth of knowledge pretty much starts and ends with the below document, so apologies if this is obvious to experts! https://beancount.github.io/docs/the_double_entry_counting_m... E: the problem being “tracking transactions”. Yes?    reply            superzamp  4 hours ago    | parent  [–]      That's a very good question. So the DSL here operates an agnostic source/dest transaction model, which is akin to the credit/debit model sans the semantic baggage. The goal of this model is indeed to be \"tracking transactions\" in the abstract sense, having the benefit of not forcing accounting decisions too early on when there is (still yet) none. For example, if you create a transaction moving money from \"@stripe:main\" to \"@acct:123\" and \"@acct:234\", you're merely representing the fact that you want this money to be moved. Wether the movement is clearing off a liability or generating revenue is another concern that you (in our model) want to take care of in a separate layer, that will also likely involve some intense intentionality and iterations from your accounting team. In a sense, it's as close to accounting than it is to warehousing money, moving unitary boxes of it from one location to another. These two models have the same amount of information per entry, so they can actually be converted from one to another, enabling you to also represent some accounting-ish transactions with this DSL, e.g. with a send [USD/2 100] from @ar:invoices:1234 to @sales.    reply            mamidon  2 hours ago    | root | parent | next  [–]      I'm living this life right now; except we baked in notions of Assets/Liabilities/Income/Expenses into our ledger logic.  Only to realize our customers don't care and just want to do whatever it is they've been doing.    reply            bbor  3 hours ago    | root | parent | prev  [–]      Fascinating, thanks for taking the time to educate! Makes sense to me — it seems this tool is purpose built for situations where tracking is complex enough to deserve decoupling from annotating or interpreting , to put it in my own kindergarten terms. I don’t have a need for this personally but I’ll definitely be bouncing this around in my head for a while, both technically (JS ALL the things!) and methodologically. Accounting is pretty trivial when you don’t have any income to track!    reply              Guidelines | FAQ | Lists | API | Security | Legal | Apply to YC | Contact    Search:     Hacker News  new | past | comments | ask | show | jobs | submit   login          Show HN: Numscript, a declarative language to model financial transactions ( numscript.org )   110 points by superzamp  6 hours ago   | hide | past | favorite | 22 comments      Numscript is a simple, declarative language that helps you model financial transactions. You can do quite a few things with it, such as modeling: * Payments involving vouchers and a user's prepaid balance\n* Complex funds destination scenario where the customer gets cash back\n* Configurable user credit balance spending transactions The main idea is to take the pain out of describing of a system dealing with money movements should behave in traditional languages such as JS/TS/Go/Ruby etc, landing an expressive way to model these movements of value. It is voluntarily broad in applicability—our customers use it today for use-cases ranging from marketplaces funds orchestration to home-grown loan management systems. Once those transactions are modeled, they are to be picked up and committed to a system-of-record, ledgering system or executed on a set of payments and banking APIs. It was initially a DSL we bundled into our Core Ledger product at Formance (YCS21) but we're giving it more autonomy now and started to make it standalone, with the idea that anyone could eventually bolt Numscript on top of their ledgering system. We're also exploring to make it natively compatible with other backends. As part of this un-bundling, we've just shipping a playground which lets you fiddle with it without installing anything at https://playground.numscript.org/ (it works best on desktop). Happy to chime in on any questions!                       abdullahkhalids  5 hours ago    | next  [–]      How would this handle Canadian guidelines for dealing with cents in cash, where you round to the nearest 5c [1]?  Amounts ending in 1 cent and 2 cents are rounded down to the nearest 10 cents;\n    Amounts ending in 3 cents and 4 cents are rounded up to the nearest 5 cents;\n    Amounts ending in 6 cents and 7 cents are rounded down to the nearest 5 cents;\n    Amounts ending in 8 cents and 9 cents are rounded up to the nearest 10 cents;\n    Amounts ending in 0 cent and 5 cents remain unchanged. EDIT: I think if you send 12 cents,  send [CADCASH/2 12] ( source = @user1 destination = @user2 ) It should result in sending 10 cents.  \"postings\": [{\"source\": \"user1\",\n                  \"destination\": \"user2\",\n                  \"amount\": 10,\n                  \"asset\": \"CADCASH/2\"}] Can this happen? [1] https://www.canada.ca/en/revenue-agency/programs/about-canad...    reply            superzamp  3 hours ago    | parent | next  [–]      Well that's definitely a good puzzle. I've tried to model it for a bit, but it indeed looks like we'd need to add something to the language to make it possible at all! Thanks for bringing this up.    reply            fallat  3 hours ago    | root | parent | next  [–]      Same thing with income tax brackets. You need conditional logic.    reply            superzamp  3 hours ago    | root | parent | next  [–]      For this particular case, I would say that tax-brackets sort of logic can be expressed in the destination block with ordered destinations. For example, you could have something like this:  send [USD/2 *] (\n      source = @users:1234\n      destination = {\n        // first $1000 are taxed at 10%\n        max [USD/2 100000] to {\n          10% to @taxes\n          remaining kept\n        }\n        // Anything above that is, taxed at 20%\n        remaining to {\n          20% to @taxes\n          remaining kept\n        }\n      }\n    ) (You can test it on the playground, you'll just want to feed the \"users:1234\" account with an initial balance in the input section)    reply            euroderf  3 hours ago    | parent | prev | next  [–]      The rules listed (1,2,6,7 round down; 3,4,8,9 round up). AFAIK these are also the official Eurozone cash rules for countries that choose not to circulate 1 and 2 eurocent coins. (Altho of course, electronic transactions are exact to the penny.) So you might want to cover this use case.    reply            vslira  5 hours ago    | prev | next  [–]      Super interesting and thanks for sharing. If I understood the license page on the repository correctly, the DSL is MIT-licensed since it's not within the enterprise directory, right?    reply            superzamp  5 hours ago    | parent | next  [–]      Yes exactly! There's actually two implementations, one tightly knit to our ledger product located at [1] and the new, standalone one (used by the playground) at [2]. In any case, in both implementations, the DSL is indeed MIT. [1] https://github.com/formancehq/stack/tree/main/components/led... [2] https://github.com/formancehq/numscript    reply            OutOfHere  3 hours ago    | prev | next  [–]      Can this or Formance interact with credit card systems, checking accounts, and layer 2 crypto wallets? If not, how is the money even going to come in or out?    reply            robk  6 hours ago    | prev | next  [–]      This seems cool but what's the intention with the USD/2 notation? Is that for fractional sub-cent precision in rounding situations?    reply            superzamp  6 hours ago    | parent | next  [–]      It's indeed relative to cents in a sense, the idea is to force you to declare the precision of the monetary amount you're expressing. You can see various interpretation of what \"USD\" means in the wild, as some APIs will happily parse USD 100 as $1.00 while some others might parse USD 100 as $100.00. So we recommend this explicit [ASSET/SCALE AMOUNT] notation, where SCALE describes the negative power of ten to multiply the AMOUNT with to obtain the decimal value in the given ASSET. It makes subsequent interaction with external systems much easier. You can read a bit more about it here [1]. [1] https://docs.formance.com/stack/unambiguous-monetary-notatio...    reply            girvo  39 minutes ago    | root | parent | next  [–]      Just to add to this, having also implemented a production payment system, we did the same thing. One needs to be very explicit about the scale and how it should be rounded and dealt with, and how to operate on two different scale systems. Quite a fun challenge, though I do not miss the edge cases. Our system was a payment system for childcare management software, interfacing with banks and the government directly.    reply            tway_GdBRwW  4 hours ago    | root | parent | prev | next  [–]      Used to work at a payments company. Yes, you need to be *very* explicit in how you model currency amounts and precision. See also earlier post about Canadian rounding rules. Some of the \"logic\" is regulatory/compliance driven. ref child post about stocks trading for 0.0001. Yes, those are real trades and (probably) fully legal etc, but I'm not sure the Fed recognizes currency amounts less than 1 US cent ($0.01), so the accounting rules and tax rules might not match expectations based on generalized floating point math.    reply            euroderf  3 hours ago    | root | parent | next  [–]      Doesn't the Fed recognise mills ? They are not extinct.    reply            flockonus  5 hours ago    | root | parent | prev | next  [–]      What about units that cost sub-cent? For examples, I've seen private company stocks being $0.0001 Not sure why you'd need to make a note in the internal representation, vs. leave adapters to handle conversions.    reply            bbor  5 hours ago    | root | parent | next  [–]      Not to speak for them, but I think you’ve understood the point exactly. You need to be able to support arbitrary precision, but that support needs to be intentional to avoid errors. And you have to record that decision somewhere if adapters are to correctly handle your outputs; why not in the unit name?    reply            petesergeant  4 hours ago    | root | parent | prev | next  [–]      If I understand their docs correctly, that’s equivalent to [USD/4 1]    reply            jimbokun  3 hours ago    | prev | next  [–]      Are there converters to/from OFX for Numscript?    reply            henning  1 hour ago    | prev | next  [–]      Ah, what better input format than JSON, a poorly defined, ambiguous format that freely mixes integers and floating points and lacks supports for bigints and bigdecimals.    reply            bbor  5 hours ago    | prev  [–]      To this noob, this seems like a problem that was pretty convincingly solved by double entry accounting ledgers, but from your post it sounds like this isn’t a replacement-of but rather an addition-to that model. What’s a situation where an imperative approach would be preferable to the traditional declarative approach? \nMy depth of knowledge pretty much starts and ends with the below document, so apologies if this is obvious to experts! https://beancount.github.io/docs/the_double_entry_counting_m... E: the problem being “tracking transactions”. Yes?    reply            superzamp  4 hours ago    | parent  [–]      That's a very good question. So the DSL here operates an agnostic source/dest transaction model, which is akin to the credit/debit model sans the semantic baggage. The goal of this model is indeed to be \"tracking transactions\" in the abstract sense, having the benefit of not forcing accounting decisions too early on when there is (still yet) none. For example, if you create a transaction moving money from \"@stripe:main\" to \"@acct:123\" and \"@acct:234\", you're merely representing the fact that you want this money to be moved. Wether the movement is clearing off a liability or generating revenue is another concern that you (in our model) want to take care of in a separate layer, that will also likely involve some intense intentionality and iterations from your accounting team. In a sense, it's as close to accounting than it is to warehousing money, moving unitary boxes of it from one location to another. These two models have the same amount of information per entry, so they can actually be converted from one to another, enabling you to also represent some accounting-ish transactions with this DSL, e.g. with a send [USD/2 100] from @ar:invoices:1234 to @sales.    reply            mamidon  2 hours ago    | root | parent | next  [–]      I'm living this life right now; except we baked in notions of Assets/Liabilities/Income/Expenses into our ledger logic.  Only to realize our customers don't care and just want to do whatever it is they've been doing.    reply            bbor  3 hours ago    | root | parent | prev  [–]      Fascinating, thanks for taking the time to educate! Makes sense to me — it seems this tool is purpose built for situations where tracking is complex enough to deserve decoupling from annotating or interpreting , to put it in my own kindergarten terms. I don’t have a need for this personally but I’ll definitely be bouncing this around in my head for a while, both technically (JS ALL the things!) and methodologically. Accounting is pretty trivial when you don’t have any income to track!    reply              Guidelines | FAQ | Lists | API | Security | Legal | Apply to YC | Contact    Search:     Hacker News  new | past | comments | ask | show | jobs | submit   login     Hacker News  new | past | comments | ask | show | jobs | submit   login     Hacker News  new | past | comments | ask | show | jobs | submit   login     Hacker News  new | past | comments | ask | show | jobs | submit   login     Hacker News  new | past | comments | ask | show | jobs | submit   login     Hacker News  new | past | comments | ask | show | jobs | submit  Hacker News  new | past | comments | ask | show | jobs | submit  Hacker News Hacker News new past comments ask show jobs submit  login   login  login      Show HN: Numscript, a declarative language to model financial transactions ( numscript.org )   110 points by superzamp  6 hours ago   | hide | past | favorite | 22 comments      Numscript is a simple, declarative language that helps you model financial transactions. You can do quite a few things with it, such as modeling: * Payments involving vouchers and a user's prepaid balance\n* Complex funds destination scenario where the customer gets cash back\n* Configurable user credit balance spending transactions The main idea is to take the pain out of describing of a system dealing with money movements should behave in traditional languages such as JS/TS/Go/Ruby etc, landing an expressive way to model these movements of value. It is voluntarily broad in applicability—our customers use it today for use-cases ranging from marketplaces funds orchestration to home-grown loan management systems. Once those transactions are modeled, they are to be picked up and committed to a system-of-record, ledgering system or executed on a set of payments and banking APIs. It was initially a DSL we bundled into our Core Ledger product at Formance (YCS21) but we're giving it more autonomy now and started to make it standalone, with the idea that anyone could eventually bolt Numscript on top of their ledgering system. We're also exploring to make it natively compatible with other backends. As part of this un-bundling, we've just shipping a playground which lets you fiddle with it without installing anything at https://playground.numscript.org/ (it works best on desktop). Happy to chime in on any questions!                       abdullahkhalids  5 hours ago    | next  [–]      How would this handle Canadian guidelines for dealing with cents in cash, where you round to the nearest 5c [1]?  Amounts ending in 1 cent and 2 cents are rounded down to the nearest 10 cents;\n    Amounts ending in 3 cents and 4 cents are rounded up to the nearest 5 cents;\n    Amounts ending in 6 cents and 7 cents are rounded down to the nearest 5 cents;\n    Amounts ending in 8 cents and 9 cents are rounded up to the nearest 10 cents;\n    Amounts ending in 0 cent and 5 cents remain unchanged. EDIT: I think if you send 12 cents,  send [CADCASH/2 12] ( source = @user1 destination = @user2 ) It should result in sending 10 cents.  \"postings\": [{\"source\": \"user1\",\n                  \"destination\": \"user2\",\n                  \"amount\": 10,\n                  \"asset\": \"CADCASH/2\"}] Can this happen? [1] https://www.canada.ca/en/revenue-agency/programs/about-canad...    reply            superzamp  3 hours ago    | parent | next  [–]      Well that's definitely a good puzzle. I've tried to model it for a bit, but it indeed looks like we'd need to add something to the language to make it possible at all! Thanks for bringing this up.    reply            fallat  3 hours ago    | root | parent | next  [–]      Same thing with income tax brackets. You need conditional logic.    reply            superzamp  3 hours ago    | root | parent | next  [–]      For this particular case, I would say that tax-brackets sort of logic can be expressed in the destination block with ordered destinations. For example, you could have something like this:  send [USD/2 *] (\n      source = @users:1234\n      destination = {\n        // first $1000 are taxed at 10%\n        max [USD/2 100000] to {\n          10% to @taxes\n          remaining kept\n        }\n        // Anything above that is, taxed at 20%\n        remaining to {\n          20% to @taxes\n          remaining kept\n        }\n      }\n    ) (You can test it on the playground, you'll just want to feed the \"users:1234\" account with an initial balance in the input section)    reply            euroderf  3 hours ago    | parent | prev | next  [–]      The rules listed (1,2,6,7 round down; 3,4,8,9 round up). AFAIK these are also the official Eurozone cash rules for countries that choose not to circulate 1 and 2 eurocent coins. (Altho of course, electronic transactions are exact to the penny.) So you might want to cover this use case.    reply            vslira  5 hours ago    | prev | next  [–]      Super interesting and thanks for sharing. If I understood the license page on the repository correctly, the DSL is MIT-licensed since it's not within the enterprise directory, right?    reply            superzamp  5 hours ago    | parent | next  [–]      Yes exactly! There's actually two implementations, one tightly knit to our ledger product located at [1] and the new, standalone one (used by the playground) at [2]. In any case, in both implementations, the DSL is indeed MIT. [1] https://github.com/formancehq/stack/tree/main/components/led... [2] https://github.com/formancehq/numscript    reply            OutOfHere  3 hours ago    | prev | next  [–]      Can this or Formance interact with credit card systems, checking accounts, and layer 2 crypto wallets? If not, how is the money even going to come in or out?    reply            robk  6 hours ago    | prev | next  [–]      This seems cool but what's the intention with the USD/2 notation? Is that for fractional sub-cent precision in rounding situations?    reply            superzamp  6 hours ago    | parent | next  [–]      It's indeed relative to cents in a sense, the idea is to force you to declare the precision of the monetary amount you're expressing. You can see various interpretation of what \"USD\" means in the wild, as some APIs will happily parse USD 100 as $1.00 while some others might parse USD 100 as $100.00. So we recommend this explicit [ASSET/SCALE AMOUNT] notation, where SCALE describes the negative power of ten to multiply the AMOUNT with to obtain the decimal value in the given ASSET. It makes subsequent interaction with external systems much easier. You can read a bit more about it here [1]. [1] https://docs.formance.com/stack/unambiguous-monetary-notatio...    reply            girvo  39 minutes ago    | root | parent | next  [–]      Just to add to this, having also implemented a production payment system, we did the same thing. One needs to be very explicit about the scale and how it should be rounded and dealt with, and how to operate on two different scale systems. Quite a fun challenge, though I do not miss the edge cases. Our system was a payment system for childcare management software, interfacing with banks and the government directly.    reply            tway_GdBRwW  4 hours ago    | root | parent | prev | next  [–]      Used to work at a payments company. Yes, you need to be *very* explicit in how you model currency amounts and precision. See also earlier post about Canadian rounding rules. Some of the \"logic\" is regulatory/compliance driven. ref child post about stocks trading for 0.0001. Yes, those are real trades and (probably) fully legal etc, but I'm not sure the Fed recognizes currency amounts less than 1 US cent ($0.01), so the accounting rules and tax rules might not match expectations based on generalized floating point math.    reply            euroderf  3 hours ago    | root | parent | next  [–]      Doesn't the Fed recognise mills ? They are not extinct.    reply            flockonus  5 hours ago    | root | parent | prev | next  [–]      What about units that cost sub-cent? For examples, I've seen private company stocks being $0.0001 Not sure why you'd need to make a note in the internal representation, vs. leave adapters to handle conversions.    reply            bbor  5 hours ago    | root | parent | next  [–]      Not to speak for them, but I think you’ve understood the point exactly. You need to be able to support arbitrary precision, but that support needs to be intentional to avoid errors. And you have to record that decision somewhere if adapters are to correctly handle your outputs; why not in the unit name?    reply            petesergeant  4 hours ago    | root | parent | prev | next  [–]      If I understand their docs correctly, that’s equivalent to [USD/4 1]    reply            jimbokun  3 hours ago    | prev | next  [–]      Are there converters to/from OFX for Numscript?    reply            henning  1 hour ago    | prev | next  [–]      Ah, what better input format than JSON, a poorly defined, ambiguous format that freely mixes integers and floating points and lacks supports for bigints and bigdecimals.    reply            bbor  5 hours ago    | prev  [–]      To this noob, this seems like a problem that was pretty convincingly solved by double entry accounting ledgers, but from your post it sounds like this isn’t a replacement-of but rather an addition-to that model. What’s a situation where an imperative approach would be preferable to the traditional declarative approach? \nMy depth of knowledge pretty much starts and ends with the below document, so apologies if this is obvious to experts! https://beancount.github.io/docs/the_double_entry_counting_m... E: the problem being “tracking transactions”. Yes?    reply            superzamp  4 hours ago    | parent  [–]      That's a very good question. So the DSL here operates an agnostic source/dest transaction model, which is akin to the credit/debit model sans the semantic baggage. The goal of this model is indeed to be \"tracking transactions\" in the abstract sense, having the benefit of not forcing accounting decisions too early on when there is (still yet) none. For example, if you create a transaction moving money from \"@stripe:main\" to \"@acct:123\" and \"@acct:234\", you're merely representing the fact that you want this money to be moved. Wether the movement is clearing off a liability or generating revenue is another concern that you (in our model) want to take care of in a separate layer, that will also likely involve some intense intentionality and iterations from your accounting team. In a sense, it's as close to accounting than it is to warehousing money, moving unitary boxes of it from one location to another. These two models have the same amount of information per entry, so they can actually be converted from one to another, enabling you to also represent some accounting-ish transactions with this DSL, e.g. with a send [USD/2 100] from @ar:invoices:1234 to @sales.    reply            mamidon  2 hours ago    | root | parent | next  [–]      I'm living this life right now; except we baked in notions of Assets/Liabilities/Income/Expenses into our ledger logic.  Only to realize our customers don't care and just want to do whatever it is they've been doing.    reply            bbor  3 hours ago    | root | parent | prev  [–]      Fascinating, thanks for taking the time to educate! Makes sense to me — it seems this tool is purpose built for situations where tracking is complex enough to deserve decoupling from annotating or interpreting , to put it in my own kindergarten terms. I don’t have a need for this personally but I’ll definitely be bouncing this around in my head for a while, both technically (JS ALL the things!) and methodologically. Accounting is pretty trivial when you don’t have any income to track!    reply              Show HN: Numscript, a declarative language to model financial transactions ( numscript.org )   110 points by superzamp  6 hours ago   | hide | past | favorite | 22 comments      Numscript is a simple, declarative language that helps you model financial transactions. You can do quite a few things with it, such as modeling: * Payments involving vouchers and a user's prepaid balance\n* Complex funds destination scenario where the customer gets cash back\n* Configurable user credit balance spending transactions The main idea is to take the pain out of describing of a system dealing with money movements should behave in traditional languages such as JS/TS/Go/Ruby etc, landing an expressive way to model these movements of value. It is voluntarily broad in applicability—our customers use it today for use-cases ranging from marketplaces funds orchestration to home-grown loan management systems. Once those transactions are modeled, they are to be picked up and committed to a system-of-record, ledgering system or executed on a set of payments and banking APIs. It was initially a DSL we bundled into our Core Ledger product at Formance (YCS21) but we're giving it more autonomy now and started to make it standalone, with the idea that anyone could eventually bolt Numscript on top of their ledgering system. We're also exploring to make it natively compatible with other backends. As part of this un-bundling, we've just shipping a playground which lets you fiddle with it without installing anything at https://playground.numscript.org/ (it works best on desktop). Happy to chime in on any questions!                       abdullahkhalids  5 hours ago    | next  [–]      How would this handle Canadian guidelines for dealing with cents in cash, where you round to the nearest 5c [1]?  Amounts ending in 1 cent and 2 cents are rounded down to the nearest 10 cents;\n    Amounts ending in 3 cents and 4 cents are rounded up to the nearest 5 cents;\n    Amounts ending in 6 cents and 7 cents are rounded down to the nearest 5 cents;\n    Amounts ending in 8 cents and 9 cents are rounded up to the nearest 10 cents;\n    Amounts ending in 0 cent and 5 cents remain unchanged. EDIT: I think if you send 12 cents,  send [CADCASH/2 12] ( source = @user1 destination = @user2 ) It should result in sending 10 cents.  \"postings\": [{\"source\": \"user1\",\n                  \"destination\": \"user2\",\n                  \"amount\": 10,\n                  \"asset\": \"CADCASH/2\"}] Can this happen? [1] https://www.canada.ca/en/revenue-agency/programs/about-canad...    reply            superzamp  3 hours ago    | parent | next  [–]      Well that's definitely a good puzzle. I've tried to model it for a bit, but it indeed looks like we'd need to add something to the language to make it possible at all! Thanks for bringing this up.    reply            fallat  3 hours ago    | root | parent | next  [–]      Same thing with income tax brackets. You need conditional logic.    reply            superzamp  3 hours ago    | root | parent | next  [–]      For this particular case, I would say that tax-brackets sort of logic can be expressed in the destination block with ordered destinations. For example, you could have something like this:  send [USD/2 *] (\n      source = @users:1234\n      destination = {\n        // first $1000 are taxed at 10%\n        max [USD/2 100000] to {\n          10% to @taxes\n          remaining kept\n        }\n        // Anything above that is, taxed at 20%\n        remaining to {\n          20% to @taxes\n          remaining kept\n        }\n      }\n    ) (You can test it on the playground, you'll just want to feed the \"users:1234\" account with an initial balance in the input section)    reply            euroderf  3 hours ago    | parent | prev | next  [–]      The rules listed (1,2,6,7 round down; 3,4,8,9 round up). AFAIK these are also the official Eurozone cash rules for countries that choose not to circulate 1 and 2 eurocent coins. (Altho of course, electronic transactions are exact to the penny.) So you might want to cover this use case.    reply            vslira  5 hours ago    | prev | next  [–]      Super interesting and thanks for sharing. If I understood the license page on the repository correctly, the DSL is MIT-licensed since it's not within the enterprise directory, right?    reply            superzamp  5 hours ago    | parent | next  [–]      Yes exactly! There's actually two implementations, one tightly knit to our ledger product located at [1] and the new, standalone one (used by the playground) at [2]. In any case, in both implementations, the DSL is indeed MIT. [1] https://github.com/formancehq/stack/tree/main/components/led... [2] https://github.com/formancehq/numscript    reply            OutOfHere  3 hours ago    | prev | next  [–]      Can this or Formance interact with credit card systems, checking accounts, and layer 2 crypto wallets? If not, how is the money even going to come in or out?    reply            robk  6 hours ago    | prev | next  [–]      This seems cool but what's the intention with the USD/2 notation? Is that for fractional sub-cent precision in rounding situations?    reply            superzamp  6 hours ago    | parent | next  [–]      It's indeed relative to cents in a sense, the idea is to force you to declare the precision of the monetary amount you're expressing. You can see various interpretation of what \"USD\" means in the wild, as some APIs will happily parse USD 100 as $1.00 while some others might parse USD 100 as $100.00. So we recommend this explicit [ASSET/SCALE AMOUNT] notation, where SCALE describes the negative power of ten to multiply the AMOUNT with to obtain the decimal value in the given ASSET. It makes subsequent interaction with external systems much easier. You can read a bit more about it here [1]. [1] https://docs.formance.com/stack/unambiguous-monetary-notatio...    reply            girvo  39 minutes ago    | root | parent | next  [–]      Just to add to this, having also implemented a production payment system, we did the same thing. One needs to be very explicit about the scale and how it should be rounded and dealt with, and how to operate on two different scale systems. Quite a fun challenge, though I do not miss the edge cases. Our system was a payment system for childcare management software, interfacing with banks and the government directly.    reply            tway_GdBRwW  4 hours ago    | root | parent | prev | next  [–]      Used to work at a payments company. Yes, you need to be *very* explicit in how you model currency amounts and precision. See also earlier post about Canadian rounding rules. Some of the \"logic\" is regulatory/compliance driven. ref child post about stocks trading for 0.0001. Yes, those are real trades and (probably) fully legal etc, but I'm not sure the Fed recognizes currency amounts less than 1 US cent ($0.01), so the accounting rules and tax rules might not match expectations based on generalized floating point math.    reply            euroderf  3 hours ago    | root | parent | next  [–]      Doesn't the Fed recognise mills ? They are not extinct.    reply            flockonus  5 hours ago    | root | parent | prev | next  [–]      What about units that cost sub-cent? For examples, I've seen private company stocks being $0.0001 Not sure why you'd need to make a note in the internal representation, vs. leave adapters to handle conversions.    reply            bbor  5 hours ago    | root | parent | next  [–]      Not to speak for them, but I think you’ve understood the point exactly. You need to be able to support arbitrary precision, but that support needs to be intentional to avoid errors. And you have to record that decision somewhere if adapters are to correctly handle your outputs; why not in the unit name?    reply            petesergeant  4 hours ago    | root | parent | prev | next  [–]      If I understand their docs correctly, that’s equivalent to [USD/4 1]    reply            jimbokun  3 hours ago    | prev | next  [–]      Are there converters to/from OFX for Numscript?    reply            henning  1 hour ago    | prev | next  [–]      Ah, what better input format than JSON, a poorly defined, ambiguous format that freely mixes integers and floating points and lacks supports for bigints and bigdecimals.    reply            bbor  5 hours ago    | prev  [–]      To this noob, this seems like a problem that was pretty convincingly solved by double entry accounting ledgers, but from your post it sounds like this isn’t a replacement-of but rather an addition-to that model. What’s a situation where an imperative approach would be preferable to the traditional declarative approach? \nMy depth of knowledge pretty much starts and ends with the below document, so apologies if this is obvious to experts! https://beancount.github.io/docs/the_double_entry_counting_m... E: the problem being “tracking transactions”. Yes?    reply            superzamp  4 hours ago    | parent  [–]      That's a very good question. So the DSL here operates an agnostic source/dest transaction model, which is akin to the credit/debit model sans the semantic baggage. The goal of this model is indeed to be \"tracking transactions\" in the abstract sense, having the benefit of not forcing accounting decisions too early on when there is (still yet) none. For example, if you create a transaction moving money from \"@stripe:main\" to \"@acct:123\" and \"@acct:234\", you're merely representing the fact that you want this money to be moved. Wether the movement is clearing off a liability or generating revenue is another concern that you (in our model) want to take care of in a separate layer, that will also likely involve some intense intentionality and iterations from your accounting team. In a sense, it's as close to accounting than it is to warehousing money, moving unitary boxes of it from one location to another. These two models have the same amount of information per entry, so they can actually be converted from one to another, enabling you to also represent some accounting-ish transactions with this DSL, e.g. with a send [USD/2 100] from @ar:invoices:1234 to @sales.    reply            mamidon  2 hours ago    | root | parent | next  [–]      I'm living this life right now; except we baked in notions of Assets/Liabilities/Income/Expenses into our ledger logic.  Only to realize our customers don't care and just want to do whatever it is they've been doing.    reply            bbor  3 hours ago    | root | parent | prev  [–]      Fascinating, thanks for taking the time to educate! Makes sense to me — it seems this tool is purpose built for situations where tracking is complex enough to deserve decoupling from annotating or interpreting , to put it in my own kindergarten terms. I don’t have a need for this personally but I’ll definitely be bouncing this around in my head for a while, both technically (JS ALL the things!) and methodologically. Accounting is pretty trivial when you don’t have any income to track!    reply              Show HN: Numscript, a declarative language to model financial transactions ( numscript.org )   110 points by superzamp  6 hours ago   | hide | past | favorite | 22 comments      Numscript is a simple, declarative language that helps you model financial transactions. You can do quite a few things with it, such as modeling: * Payments involving vouchers and a user's prepaid balance\n* Complex funds destination scenario where the customer gets cash back\n* Configurable user credit balance spending transactions The main idea is to take the pain out of describing of a system dealing with money movements should behave in traditional languages such as JS/TS/Go/Ruby etc, landing an expressive way to model these movements of value. It is voluntarily broad in applicability—our customers use it today for use-cases ranging from marketplaces funds orchestration to home-grown loan management systems. Once those transactions are modeled, they are to be picked up and committed to a system-of-record, ledgering system or executed on a set of payments and banking APIs. It was initially a DSL we bundled into our Core Ledger product at Formance (YCS21) but we're giving it more autonomy now and started to make it standalone, with the idea that anyone could eventually bolt Numscript on top of their ledgering system. We're also exploring to make it natively compatible with other backends. As part of this un-bundling, we've just shipping a playground which lets you fiddle with it without installing anything at https://playground.numscript.org/ (it works best on desktop). Happy to chime in on any questions!                 Show HN: Numscript, a declarative language to model financial transactions ( numscript.org )   110 points by superzamp  6 hours ago   | hide | past | favorite | 22 comments      Numscript is a simple, declarative language that helps you model financial transactions. You can do quite a few things with it, such as modeling: * Payments involving vouchers and a user's prepaid balance\n* Complex funds destination scenario where the customer gets cash back\n* Configurable user credit balance spending transactions The main idea is to take the pain out of describing of a system dealing with money movements should behave in traditional languages such as JS/TS/Go/Ruby etc, landing an expressive way to model these movements of value. It is voluntarily broad in applicability—our customers use it today for use-cases ranging from marketplaces funds orchestration to home-grown loan management systems. Once those transactions are modeled, they are to be picked up and committed to a system-of-record, ledgering system or executed on a set of payments and banking APIs. It was initially a DSL we bundled into our Core Ledger product at Formance (YCS21) but we're giving it more autonomy now and started to make it standalone, with the idea that anyone could eventually bolt Numscript on top of their ledgering system. We're also exploring to make it natively compatible with other backends. As part of this un-bundling, we've just shipping a playground which lets you fiddle with it without installing anything at https://playground.numscript.org/ (it works best on desktop). Happy to chime in on any questions!                 Show HN: Numscript, a declarative language to model financial transactions ( numscript.org )     Show HN: Numscript, a declarative language to model financial transactions ( numscript.org ) Show HN: Numscript, a declarative language to model financial transactions ( numscript.org ) Show HN: Numscript, a declarative language to model financial transactions ( numscript.org ) numscript.org numscript.org   110 points by superzamp  6 hours ago   | hide | past | favorite | 22 comments    110 points by superzamp  6 hours ago   | hide | past | favorite | 22 comments    110 points by superzamp  6 hours ago   | hide | past | favorite | 22 comments  110 points superzamp 6 hours ago 6 hours ago hide past favorite 22 comments   Numscript is a simple, declarative language that helps you model financial transactions. You can do quite a few things with it, such as modeling: * Payments involving vouchers and a user's prepaid balance\n* Complex funds destination scenario where the customer gets cash back\n* Configurable user credit balance spending transactions The main idea is to take the pain out of describing of a system dealing with money movements should behave in traditional languages such as JS/TS/Go/Ruby etc, landing an expressive way to model these movements of value. It is voluntarily broad in applicability—our customers use it today for use-cases ranging from marketplaces funds orchestration to home-grown loan management systems. Once those transactions are modeled, they are to be picked up and committed to a system-of-record, ledgering system or executed on a set of payments and banking APIs. It was initially a DSL we bundled into our Core Ledger product at Formance (YCS21) but we're giving it more autonomy now and started to make it standalone, with the idea that anyone could eventually bolt Numscript on top of their ledgering system. We're also exploring to make it natively compatible with other backends. As part of this un-bundling, we've just shipping a playground which lets you fiddle with it without installing anything at https://playground.numscript.org/ (it works best on desktop). Happy to chime in on any questions! Numscript is a simple, declarative language that helps you model financial transactions. You can do quite a few things with it, such as modeling: * Payments involving vouchers and a user's prepaid balance\n* Complex funds destination scenario where the customer gets cash back\n* Configurable user credit balance spending transactions The main idea is to take the pain out of describing of a system dealing with money movements should behave in traditional languages such as JS/TS/Go/Ruby etc, landing an expressive way to model these movements of value. It is voluntarily broad in applicability—our customers use it today for use-cases ranging from marketplaces funds orchestration to home-grown loan management systems. Once those transactions are modeled, they are to be picked up and committed to a system-of-record, ledgering system or executed on a set of payments and banking APIs. It was initially a DSL we bundled into our Core Ledger product at Formance (YCS21) but we're giving it more autonomy now and started to make it standalone, with the idea that anyone could eventually bolt Numscript on top of their ledgering system. We're also exploring to make it natively compatible with other backends. As part of this un-bundling, we've just shipping a playground which lets you fiddle with it without installing anything at https://playground.numscript.org/ (it works best on desktop). Happy to chime in on any questions! Numscript is a simple, declarative language that helps you model financial transactions. You can do quite a few things with it, such as modeling: * Payments involving vouchers and a user's prepaid balance\n* Complex funds destination scenario where the customer gets cash back\n* Configurable user credit balance spending transactions The main idea is to take the pain out of describing of a system dealing with money movements should behave in traditional languages such as JS/TS/Go/Ruby etc, landing an expressive way to model these movements of value. It is voluntarily broad in applicability—our customers use it today for use-cases ranging from marketplaces funds orchestration to home-grown loan management systems. Once those transactions are modeled, they are to be picked up and committed to a system-of-record, ledgering system or executed on a set of payments and banking APIs. It was initially a DSL we bundled into our Core Ledger product at Formance (YCS21) but we're giving it more autonomy now and started to make it standalone, with the idea that anyone could eventually bolt Numscript on top of their ledgering system. We're also exploring to make it natively compatible with other backends. As part of this un-bundling, we've just shipping a playground which lets you fiddle with it without installing anything at https://playground.numscript.org/ (it works best on desktop). Happy to chime in on any questions! * Payments involving vouchers and a user's prepaid balance\n* Complex funds destination scenario where the customer gets cash back\n* Configurable user credit balance spending transactions The main idea is to take the pain out of describing of a system dealing with money movements should behave in traditional languages such as JS/TS/Go/Ruby etc, landing an expressive way to model these movements of value. It is voluntarily broad in applicability—our customers use it today for use-cases ranging from marketplaces funds orchestration to home-grown loan management systems. Once those transactions are modeled, they are to be picked up and committed to a system-of-record, ledgering system or executed on a set of payments and banking APIs. It was initially a DSL we bundled into our Core Ledger product at Formance (YCS21) but we're giving it more autonomy now and started to make it standalone, with the idea that anyone could eventually bolt Numscript on top of their ledgering system. We're also exploring to make it natively compatible with other backends. As part of this un-bundling, we've just shipping a playground which lets you fiddle with it without installing anything at https://playground.numscript.org/ (it works best on desktop). https://playground.numscript.org/ Happy to chime in on any questions!                                   abdullahkhalids  5 hours ago    | next  [–]      How would this handle Canadian guidelines for dealing with cents in cash, where you round to the nearest 5c [1]?  Amounts ending in 1 cent and 2 cents are rounded down to the nearest 10 cents;\n    Amounts ending in 3 cents and 4 cents are rounded up to the nearest 5 cents;\n    Amounts ending in 6 cents and 7 cents are rounded down to the nearest 5 cents;\n    Amounts ending in 8 cents and 9 cents are rounded up to the nearest 10 cents;\n    Amounts ending in 0 cent and 5 cents remain unchanged. EDIT: I think if you send 12 cents,  send [CADCASH/2 12] ( source = @user1 destination = @user2 ) It should result in sending 10 cents.  \"postings\": [{\"source\": \"user1\",\n                  \"destination\": \"user2\",\n                  \"amount\": 10,\n                  \"asset\": \"CADCASH/2\"}] Can this happen? [1] https://www.canada.ca/en/revenue-agency/programs/about-canad...    reply            superzamp  3 hours ago    | parent | next  [–]      Well that's definitely a good puzzle. I've tried to model it for a bit, but it indeed looks like we'd need to add something to the language to make it possible at all! Thanks for bringing this up.    reply            fallat  3 hours ago    | root | parent | next  [–]      Same thing with income tax brackets. You need conditional logic.    reply            superzamp  3 hours ago    | root | parent | next  [–]      For this particular case, I would say that tax-brackets sort of logic can be expressed in the destination block with ordered destinations. For example, you could have something like this:  send [USD/2 *] (\n      source = @users:1234\n      destination = {\n        // first $1000 are taxed at 10%\n        max [USD/2 100000] to {\n          10% to @taxes\n          remaining kept\n        }\n        // Anything above that is, taxed at 20%\n        remaining to {\n          20% to @taxes\n          remaining kept\n        }\n      }\n    ) (You can test it on the playground, you'll just want to feed the \"users:1234\" account with an initial balance in the input section)    reply            euroderf  3 hours ago    | parent | prev | next  [–]      The rules listed (1,2,6,7 round down; 3,4,8,9 round up). AFAIK these are also the official Eurozone cash rules for countries that choose not to circulate 1 and 2 eurocent coins. (Altho of course, electronic transactions are exact to the penny.) So you might want to cover this use case.    reply            vslira  5 hours ago    | prev | next  [–]      Super interesting and thanks for sharing. If I understood the license page on the repository correctly, the DSL is MIT-licensed since it's not within the enterprise directory, right?    reply            superzamp  5 hours ago    | parent | next  [–]      Yes exactly! There's actually two implementations, one tightly knit to our ledger product located at [1] and the new, standalone one (used by the playground) at [2]. In any case, in both implementations, the DSL is indeed MIT. [1] https://github.com/formancehq/stack/tree/main/components/led... [2] https://github.com/formancehq/numscript    reply            OutOfHere  3 hours ago    | prev | next  [–]      Can this or Formance interact with credit card systems, checking accounts, and layer 2 crypto wallets? If not, how is the money even going to come in or out?    reply            robk  6 hours ago    | prev | next  [–]      This seems cool but what's the intention with the USD/2 notation? Is that for fractional sub-cent precision in rounding situations?    reply            superzamp  6 hours ago    | parent | next  [–]      It's indeed relative to cents in a sense, the idea is to force you to declare the precision of the monetary amount you're expressing. You can see various interpretation of what \"USD\" means in the wild, as some APIs will happily parse USD 100 as $1.00 while some others might parse USD 100 as $100.00. So we recommend this explicit [ASSET/SCALE AMOUNT] notation, where SCALE describes the negative power of ten to multiply the AMOUNT with to obtain the decimal value in the given ASSET. It makes subsequent interaction with external systems much easier. You can read a bit more about it here [1]. [1] https://docs.formance.com/stack/unambiguous-monetary-notatio...    reply            girvo  39 minutes ago    | root | parent | next  [–]      Just to add to this, having also implemented a production payment system, we did the same thing. One needs to be very explicit about the scale and how it should be rounded and dealt with, and how to operate on two different scale systems. Quite a fun challenge, though I do not miss the edge cases. Our system was a payment system for childcare management software, interfacing with banks and the government directly.    reply            tway_GdBRwW  4 hours ago    | root | parent | prev | next  [–]      Used to work at a payments company. Yes, you need to be *very* explicit in how you model currency amounts and precision. See also earlier post about Canadian rounding rules. Some of the \"logic\" is regulatory/compliance driven. ref child post about stocks trading for 0.0001. Yes, those are real trades and (probably) fully legal etc, but I'm not sure the Fed recognizes currency amounts less than 1 US cent ($0.01), so the accounting rules and tax rules might not match expectations based on generalized floating point math.    reply            euroderf  3 hours ago    | root | parent | next  [–]      Doesn't the Fed recognise mills ? They are not extinct.    reply            flockonus  5 hours ago    | root | parent | prev | next  [–]      What about units that cost sub-cent? For examples, I've seen private company stocks being $0.0001 Not sure why you'd need to make a note in the internal representation, vs. leave adapters to handle conversions.    reply            bbor  5 hours ago    | root | parent | next  [–]      Not to speak for them, but I think you’ve understood the point exactly. You need to be able to support arbitrary precision, but that support needs to be intentional to avoid errors. And you have to record that decision somewhere if adapters are to correctly handle your outputs; why not in the unit name?    reply            petesergeant  4 hours ago    | root | parent | prev | next  [–]      If I understand their docs correctly, that’s equivalent to [USD/4 1]    reply            jimbokun  3 hours ago    | prev | next  [–]      Are there converters to/from OFX for Numscript?    reply            henning  1 hour ago    | prev | next  [–]      Ah, what better input format than JSON, a poorly defined, ambiguous format that freely mixes integers and floating points and lacks supports for bigints and bigdecimals.    reply            bbor  5 hours ago    | prev  [–]      To this noob, this seems like a problem that was pretty convincingly solved by double entry accounting ledgers, but from your post it sounds like this isn’t a replacement-of but rather an addition-to that model. What’s a situation where an imperative approach would be preferable to the traditional declarative approach? \nMy depth of knowledge pretty much starts and ends with the below document, so apologies if this is obvious to experts! https://beancount.github.io/docs/the_double_entry_counting_m... E: the problem being “tracking transactions”. Yes?    reply            superzamp  4 hours ago    | parent  [–]      That's a very good question. So the DSL here operates an agnostic source/dest transaction model, which is akin to the credit/debit model sans the semantic baggage. The goal of this model is indeed to be \"tracking transactions\" in the abstract sense, having the benefit of not forcing accounting decisions too early on when there is (still yet) none. For example, if you create a transaction moving money from \"@stripe:main\" to \"@acct:123\" and \"@acct:234\", you're merely representing the fact that you want this money to be moved. Wether the movement is clearing off a liability or generating revenue is another concern that you (in our model) want to take care of in a separate layer, that will also likely involve some intense intentionality and iterations from your accounting team. In a sense, it's as close to accounting than it is to warehousing money, moving unitary boxes of it from one location to another. These two models have the same amount of information per entry, so they can actually be converted from one to another, enabling you to also represent some accounting-ish transactions with this DSL, e.g. with a send [USD/2 100] from @ar:invoices:1234 to @sales.    reply            mamidon  2 hours ago    | root | parent | next  [–]      I'm living this life right now; except we baked in notions of Assets/Liabilities/Income/Expenses into our ledger logic.  Only to realize our customers don't care and just want to do whatever it is they've been doing.    reply            bbor  3 hours ago    | root | parent | prev  [–]      Fascinating, thanks for taking the time to educate! Makes sense to me — it seems this tool is purpose built for situations where tracking is complex enough to deserve decoupling from annotating or interpreting , to put it in my own kindergarten terms. I don’t have a need for this personally but I’ll definitely be bouncing this around in my head for a while, both technically (JS ALL the things!) and methodologically. Accounting is pretty trivial when you don’t have any income to track!    reply            abdullahkhalids  5 hours ago    | next  [–]      How would this handle Canadian guidelines for dealing with cents in cash, where you round to the nearest 5c [1]?  Amounts ending in 1 cent and 2 cents are rounded down to the nearest 10 cents;\n    Amounts ending in 3 cents and 4 cents are rounded up to the nearest 5 cents;\n    Amounts ending in 6 cents and 7 cents are rounded down to the nearest 5 cents;\n    Amounts ending in 8 cents and 9 cents are rounded up to the nearest 10 cents;\n    Amounts ending in 0 cent and 5 cents remain unchanged. EDIT: I think if you send 12 cents,  send [CADCASH/2 12] ( source = @user1 destination = @user2 ) It should result in sending 10 cents.  \"postings\": [{\"source\": \"user1\",\n                  \"destination\": \"user2\",\n                  \"amount\": 10,\n                  \"asset\": \"CADCASH/2\"}] Can this happen? [1] https://www.canada.ca/en/revenue-agency/programs/about-canad...    reply            superzamp  3 hours ago    | parent | next  [–]      Well that's definitely a good puzzle. I've tried to model it for a bit, but it indeed looks like we'd need to add something to the language to make it possible at all! Thanks for bringing this up.    reply            fallat  3 hours ago    | root | parent | next  [–]      Same thing with income tax brackets. You need conditional logic.    reply            superzamp  3 hours ago    | root | parent | next  [–]      For this particular case, I would say that tax-brackets sort of logic can be expressed in the destination block with ordered destinations. For example, you could have something like this:  send [USD/2 *] (\n      source = @users:1234\n      destination = {\n        // first $1000 are taxed at 10%\n        max [USD/2 100000] to {\n          10% to @taxes\n          remaining kept\n        }\n        // Anything above that is, taxed at 20%\n        remaining to {\n          20% to @taxes\n          remaining kept\n        }\n      }\n    ) (You can test it on the playground, you'll just want to feed the \"users:1234\" account with an initial balance in the input section)    reply            euroderf  3 hours ago    | parent | prev | next  [–]      The rules listed (1,2,6,7 round down; 3,4,8,9 round up). AFAIK these are also the official Eurozone cash rules for countries that choose not to circulate 1 and 2 eurocent coins. (Altho of course, electronic transactions are exact to the penny.) So you might want to cover this use case.    reply            vslira  5 hours ago    | prev | next  [–]      Super interesting and thanks for sharing. If I understood the license page on the repository correctly, the DSL is MIT-licensed since it's not within the enterprise directory, right?    reply            superzamp  5 hours ago    | parent | next  [–]      Yes exactly! There's actually two implementations, one tightly knit to our ledger product located at [1] and the new, standalone one (used by the playground) at [2]. In any case, in both implementations, the DSL is indeed MIT. [1] https://github.com/formancehq/stack/tree/main/components/led... [2] https://github.com/formancehq/numscript    reply            OutOfHere  3 hours ago    | prev | next  [–]      Can this or Formance interact with credit card systems, checking accounts, and layer 2 crypto wallets? If not, how is the money even going to come in or out?    reply            robk  6 hours ago    | prev | next  [–]      This seems cool but what's the intention with the USD/2 notation? Is that for fractional sub-cent precision in rounding situations?    reply            superzamp  6 hours ago    | parent | next  [–]      It's indeed relative to cents in a sense, the idea is to force you to declare the precision of the monetary amount you're expressing. You can see various interpretation of what \"USD\" means in the wild, as some APIs will happily parse USD 100 as $1.00 while some others might parse USD 100 as $100.00. So we recommend this explicit [ASSET/SCALE AMOUNT] notation, where SCALE describes the negative power of ten to multiply the AMOUNT with to obtain the decimal value in the given ASSET. It makes subsequent interaction with external systems much easier. You can read a bit more about it here [1]. [1] https://docs.formance.com/stack/unambiguous-monetary-notatio...    reply            girvo  39 minutes ago    | root | parent | next  [–]      Just to add to this, having also implemented a production payment system, we did the same thing. One needs to be very explicit about the scale and how it should be rounded and dealt with, and how to operate on two different scale systems. Quite a fun challenge, though I do not miss the edge cases. Our system was a payment system for childcare management software, interfacing with banks and the government directly.    reply            tway_GdBRwW  4 hours ago    | root | parent | prev | next  [–]      Used to work at a payments company. Yes, you need to be *very* explicit in how you model currency amounts and precision. See also earlier post about Canadian rounding rules. Some of the \"logic\" is regulatory/compliance driven. ref child post about stocks trading for 0.0001. Yes, those are real trades and (probably) fully legal etc, but I'm not sure the Fed recognizes currency amounts less than 1 US cent ($0.01), so the accounting rules and tax rules might not match expectations based on generalized floating point math.    reply            euroderf  3 hours ago    | root | parent | next  [–]      Doesn't the Fed recognise mills ? They are not extinct.    reply            flockonus  5 hours ago    | root | parent | prev | next  [–]      What about units that cost sub-cent? For examples, I've seen private company stocks being $0.0001 Not sure why you'd need to make a note in the internal representation, vs. leave adapters to handle conversions.    reply            bbor  5 hours ago    | root | parent | next  [–]      Not to speak for them, but I think you’ve understood the point exactly. You need to be able to support arbitrary precision, but that support needs to be intentional to avoid errors. And you have to record that decision somewhere if adapters are to correctly handle your outputs; why not in the unit name?    reply            petesergeant  4 hours ago    | root | parent | prev | next  [–]      If I understand their docs correctly, that’s equivalent to [USD/4 1]    reply            jimbokun  3 hours ago    | prev | next  [–]      Are there converters to/from OFX for Numscript?    reply            henning  1 hour ago    | prev | next  [–]      Ah, what better input format than JSON, a poorly defined, ambiguous format that freely mixes integers and floating points and lacks supports for bigints and bigdecimals.    reply            bbor  5 hours ago    | prev  [–]      To this noob, this seems like a problem that was pretty convincingly solved by double entry accounting ledgers, but from your post it sounds like this isn’t a replacement-of but rather an addition-to that model. What’s a situation where an imperative approach would be preferable to the traditional declarative approach? \nMy depth of knowledge pretty much starts and ends with the below document, so apologies if this is obvious to experts! https://beancount.github.io/docs/the_double_entry_counting_m... E: the problem being “tracking transactions”. Yes?    reply            superzamp  4 hours ago    | parent  [–]      That's a very good question. So the DSL here operates an agnostic source/dest transaction model, which is akin to the credit/debit model sans the semantic baggage. The goal of this model is indeed to be \"tracking transactions\" in the abstract sense, having the benefit of not forcing accounting decisions too early on when there is (still yet) none. For example, if you create a transaction moving money from \"@stripe:main\" to \"@acct:123\" and \"@acct:234\", you're merely representing the fact that you want this money to be moved. Wether the movement is clearing off a liability or generating revenue is another concern that you (in our model) want to take care of in a separate layer, that will also likely involve some intense intentionality and iterations from your accounting team. In a sense, it's as close to accounting than it is to warehousing money, moving unitary boxes of it from one location to another. These two models have the same amount of information per entry, so they can actually be converted from one to another, enabling you to also represent some accounting-ish transactions with this DSL, e.g. with a send [USD/2 100] from @ar:invoices:1234 to @sales.    reply            mamidon  2 hours ago    | root | parent | next  [–]      I'm living this life right now; except we baked in notions of Assets/Liabilities/Income/Expenses into our ledger logic.  Only to realize our customers don't care and just want to do whatever it is they've been doing.    reply            bbor  3 hours ago    | root | parent | prev  [–]      Fascinating, thanks for taking the time to educate! Makes sense to me — it seems this tool is purpose built for situations where tracking is complex enough to deserve decoupling from annotating or interpreting , to put it in my own kindergarten terms. I don’t have a need for this personally but I’ll definitely be bouncing this around in my head for a while, both technically (JS ALL the things!) and methodologically. Accounting is pretty trivial when you don’t have any income to track!    reply            abdullahkhalids  5 hours ago    | next  [–]      How would this handle Canadian guidelines for dealing with cents in cash, where you round to the nearest 5c [1]?  Amounts ending in 1 cent and 2 cents are rounded down to the nearest 10 cents;\n    Amounts ending in 3 cents and 4 cents are rounded up to the nearest 5 cents;\n    Amounts ending in 6 cents and 7 cents are rounded down to the nearest 5 cents;\n    Amounts ending in 8 cents and 9 cents are rounded up to the nearest 10 cents;\n    Amounts ending in 0 cent and 5 cents remain unchanged. EDIT: I think if you send 12 cents,  send [CADCASH/2 12] ( source = @user1 destination = @user2 ) It should result in sending 10 cents.  \"postings\": [{\"source\": \"user1\",\n                  \"destination\": \"user2\",\n                  \"amount\": 10,\n                  \"asset\": \"CADCASH/2\"}] Can this happen? [1] https://www.canada.ca/en/revenue-agency/programs/about-canad...    reply           abdullahkhalids  5 hours ago    | next  [–]      How would this handle Canadian guidelines for dealing with cents in cash, where you round to the nearest 5c [1]?  Amounts ending in 1 cent and 2 cents are rounded down to the nearest 10 cents;\n    Amounts ending in 3 cents and 4 cents are rounded up to the nearest 5 cents;\n    Amounts ending in 6 cents and 7 cents are rounded down to the nearest 5 cents;\n    Amounts ending in 8 cents and 9 cents are rounded up to the nearest 10 cents;\n    Amounts ending in 0 cent and 5 cents remain unchanged. EDIT: I think if you send 12 cents,  send [CADCASH/2 12] ( source = @user1 destination = @user2 ) It should result in sending 10 cents.  \"postings\": [{\"source\": \"user1\",\n                  \"destination\": \"user2\",\n                  \"amount\": 10,\n                  \"asset\": \"CADCASH/2\"}] Can this happen? [1] https://www.canada.ca/en/revenue-agency/programs/about-canad...    reply           abdullahkhalids  5 hours ago    | next  [–]      How would this handle Canadian guidelines for dealing with cents in cash, where you round to the nearest 5c [1]?  Amounts ending in 1 cent and 2 cents are rounded down to the nearest 10 cents;\n    Amounts ending in 3 cents and 4 cents are rounded up to the nearest 5 cents;\n    Amounts ending in 6 cents and 7 cents are rounded down to the nearest 5 cents;\n    Amounts ending in 8 cents and 9 cents are rounded up to the nearest 10 cents;\n    Amounts ending in 0 cent and 5 cents remain unchanged. EDIT: I think if you send 12 cents,  send [CADCASH/2 12] ( source = @user1 destination = @user2 ) It should result in sending 10 cents.  \"postings\": [{\"source\": \"user1\",\n                  \"destination\": \"user2\",\n                  \"amount\": 10,\n                  \"asset\": \"CADCASH/2\"}] Can this happen? [1] https://www.canada.ca/en/revenue-agency/programs/about-canad...    reply          abdullahkhalids  5 hours ago    | next  [–]      How would this handle Canadian guidelines for dealing with cents in cash, where you round to the nearest 5c [1]?  Amounts ending in 1 cent and 2 cents are rounded down to the nearest 10 cents;\n    Amounts ending in 3 cents and 4 cents are rounded up to the nearest 5 cents;\n    Amounts ending in 6 cents and 7 cents are rounded down to the nearest 5 cents;\n    Amounts ending in 8 cents and 9 cents are rounded up to the nearest 10 cents;\n    Amounts ending in 0 cent and 5 cents remain unchanged. EDIT: I think if you send 12 cents,  send [CADCASH/2 12] ( source = @user1 destination = @user2 ) It should result in sending 10 cents.  \"postings\": [{\"source\": \"user1\",\n                  \"destination\": \"user2\",\n                  \"amount\": 10,\n                  \"asset\": \"CADCASH/2\"}] Can this happen? [1] https://www.canada.ca/en/revenue-agency/programs/about-canad...    reply          abdullahkhalids  5 hours ago    | next  [–]      How would this handle Canadian guidelines for dealing with cents in cash, where you round to the nearest 5c [1]?  Amounts ending in 1 cent and 2 cents are rounded down to the nearest 10 cents;\n    Amounts ending in 3 cents and 4 cents are rounded up to the nearest 5 cents;\n    Amounts ending in 6 cents and 7 cents are rounded down to the nearest 5 cents;\n    Amounts ending in 8 cents and 9 cents are rounded up to the nearest 10 cents;\n    Amounts ending in 0 cent and 5 cents remain unchanged. EDIT: I think if you send 12 cents,  send [CADCASH/2 12] ( source = @user1 destination = @user2 ) It should result in sending 10 cents.  \"postings\": [{\"source\": \"user1\",\n                  \"destination\": \"user2\",\n                  \"amount\": 10,\n                  \"asset\": \"CADCASH/2\"}] Can this happen? [1] https://www.canada.ca/en/revenue-agency/programs/about-canad...    reply          abdullahkhalids  5 hours ago    | next  [–]      How would this handle Canadian guidelines for dealing with cents in cash, where you round to the nearest 5c [1]?  Amounts ending in 1 cent and 2 cents are rounded down to the nearest 10 cents;\n    Amounts ending in 3 cents and 4 cents are rounded up to the nearest 5 cents;\n    Amounts ending in 6 cents and 7 cents are rounded down to the nearest 5 cents;\n    Amounts ending in 8 cents and 9 cents are rounded up to the nearest 10 cents;\n    Amounts ending in 0 cent and 5 cents remain unchanged. EDIT: I think if you send 12 cents,  send [CADCASH/2 12] ( source = @user1 destination = @user2 ) It should result in sending 10 cents.  \"postings\": [{\"source\": \"user1\",\n                  \"destination\": \"user2\",\n                  \"amount\": 10,\n                  \"asset\": \"CADCASH/2\"}] Can this happen? [1] https://www.canada.ca/en/revenue-agency/programs/about-canad...    reply    abdullahkhalids  5 hours ago    | next  [–]     abdullahkhalids  5 hours ago    | next  [–]    abdullahkhalids 5 hours ago 5 hours ago | next  [–]   next [–]  How would this handle Canadian guidelines for dealing with cents in cash, where you round to the nearest 5c [1]?  Amounts ending in 1 cent and 2 cents are rounded down to the nearest 10 cents;\n    Amounts ending in 3 cents and 4 cents are rounded up to the nearest 5 cents;\n    Amounts ending in 6 cents and 7 cents are rounded down to the nearest 5 cents;\n    Amounts ending in 8 cents and 9 cents are rounded up to the nearest 10 cents;\n    Amounts ending in 0 cent and 5 cents remain unchanged. EDIT: I think if you send 12 cents,  send [CADCASH/2 12] ( source = @user1 destination = @user2 ) It should result in sending 10 cents.  \"postings\": [{\"source\": \"user1\",\n                  \"destination\": \"user2\",\n                  \"amount\": 10,\n                  \"asset\": \"CADCASH/2\"}] Can this happen? [1] https://www.canada.ca/en/revenue-agency/programs/about-canad...    reply   How would this handle Canadian guidelines for dealing with cents in cash, where you round to the nearest 5c [1]?  Amounts ending in 1 cent and 2 cents are rounded down to the nearest 10 cents;\n    Amounts ending in 3 cents and 4 cents are rounded up to the nearest 5 cents;\n    Amounts ending in 6 cents and 7 cents are rounded down to the nearest 5 cents;\n    Amounts ending in 8 cents and 9 cents are rounded up to the nearest 10 cents;\n    Amounts ending in 0 cent and 5 cents remain unchanged. EDIT: I think if you send 12 cents,  send [CADCASH/2 12] ( source = @user1 destination = @user2 ) It should result in sending 10 cents.  \"postings\": [{\"source\": \"user1\",\n                  \"destination\": \"user2\",\n                  \"amount\": 10,\n                  \"asset\": \"CADCASH/2\"}] Can this happen? [1] https://www.canada.ca/en/revenue-agency/programs/about-canad... Amounts ending in 1 cent and 2 cents are rounded down to the nearest 10 cents;\n    Amounts ending in 3 cents and 4 cents are rounded up to the nearest 5 cents;\n    Amounts ending in 6 cents and 7 cents are rounded down to the nearest 5 cents;\n    Amounts ending in 8 cents and 9 cents are rounded up to the nearest 10 cents;\n    Amounts ending in 0 cent and 5 cents remain unchanged. Amounts ending in 1 cent and 2 cents are rounded down to the nearest 10 cents;\n    Amounts ending in 3 cents and 4 cents are rounded up to the nearest 5 cents;\n    Amounts ending in 6 cents and 7 cents are rounded down to the nearest 5 cents;\n    Amounts ending in 8 cents and 9 cents are rounded up to the nearest 10 cents;\n    Amounts ending in 0 cent and 5 cents remain unchanged. send [CADCASH/2 12] ( source = @user1 destination = @user2 ) send [CADCASH/2 12] ( source = @user1 destination = @user2 ) \"postings\": [{\"source\": \"user1\",\n                  \"destination\": \"user2\",\n                  \"amount\": 10,\n                  \"asset\": \"CADCASH/2\"}] \"postings\": [{\"source\": \"user1\",\n                  \"destination\": \"user2\",\n                  \"amount\": 10,\n                  \"asset\": \"CADCASH/2\"}] [1] https://www.canada.ca/en/revenue-agency/programs/about-canad... https://www.canada.ca/en/revenue-agency/programs/about-canad...   reply    reply    reply  reply reply        superzamp  3 hours ago    | parent | next  [–]      Well that's definitely a good puzzle. I've tried to model it for a bit, but it indeed looks like we'd need to add something to the language to make it possible at all! Thanks for bringing this up.    reply           superzamp  3 hours ago    | parent | next  [–]      Well that's definitely a good puzzle. I've tried to model it for a bit, but it indeed looks like we'd need to add something to the language to make it possible at all! Thanks for bringing this up.    reply           superzamp  3 hours ago    | parent | next  [–]      Well that's definitely a good puzzle. I've tried to model it for a bit, but it indeed looks like we'd need to add something to the language to make it possible at all! Thanks for bringing this up.    reply          superzamp  3 hours ago    | parent | next  [–]      Well that's definitely a good puzzle. I've tried to model it for a bit, but it indeed looks like we'd need to add something to the language to make it possible at all! Thanks for bringing this up.    reply          superzamp  3 hours ago    | parent | next  [–]      Well that's definitely a good puzzle. I've tried to model it for a bit, but it indeed looks like we'd need to add something to the language to make it possible at all! Thanks for bringing this up.    reply          superzamp  3 hours ago    | parent | next  [–]      Well that's definitely a good puzzle. I've tried to model it for a bit, but it indeed looks like we'd need to add something to the language to make it possible at all! Thanks for bringing this up.    reply    superzamp  3 hours ago    | parent | next  [–]     superzamp  3 hours ago    | parent | next  [–]    superzamp 3 hours ago 3 hours ago | parent | next  [–]   parent next [–]  Well that's definitely a good puzzle. I've tried to model it for a bit, but it indeed looks like we'd need to add something to the language to make it possible at all! Thanks for bringing this up.    reply   Well that's definitely a good puzzle. I've tried to model it for a bit, but it indeed looks like we'd need to add something to the language to make it possible at all! Thanks for bringing this up.   reply    reply    reply  reply reply        fallat  3 hours ago    | root | parent | next  [–]      Same thing with income tax brackets. You need conditional logic.    reply           fallat  3 hours ago    | root | parent | next  [–]      Same thing with income tax brackets. You need conditional logic.    reply           fallat  3 hours ago    | root | parent | next  [–]      Same thing with income tax brackets. You need conditional logic.    reply          fallat  3 hours ago    | root | parent | next  [–]      Same thing with income tax brackets. You need conditional logic.    reply          fallat  3 hours ago    | root | parent | next  [–]      Same thing with income tax brackets. You need conditional logic.    reply          fallat  3 hours ago    | root | parent | next  [–]      Same thing with income tax brackets. You need conditional logic.    reply    fallat  3 hours ago    | root | parent | next  [–]     fallat  3 hours ago    | root | parent | next  [–]    fallat 3 hours ago 3 hours ago | root | parent | next  [–]   root parent next [–]  Same thing with income tax brackets. You need conditional logic.    reply   Same thing with income tax brackets. You need conditional logic.   reply    reply    reply  reply reply        superzamp  3 hours ago    | root | parent | next  [–]      For this particular case, I would say that tax-brackets sort of logic can be expressed in the destination block with ordered destinations. For example, you could have something like this:  send [USD/2 *] (\n      source = @users:1234\n      destination = {\n        // first $1000 are taxed at 10%\n        max [USD/2 100000] to {\n          10% to @taxes\n          remaining kept\n        }\n        // Anything above that is, taxed at 20%\n        remaining to {\n          20% to @taxes\n          remaining kept\n        }\n      }\n    ) (You can test it on the playground, you'll just want to feed the \"users:1234\" account with an initial balance in the input section)    reply           superzamp  3 hours ago    | root | parent | next  [–]      For this particular case, I would say that tax-brackets sort of logic can be expressed in the destination block with ordered destinations. For example, you could have something like this:  send [USD/2 *] (\n      source = @users:1234\n      destination = {\n        // first $1000 are taxed at 10%\n        max [USD/2 100000] to {\n          10% to @taxes\n          remaining kept\n        }\n        // Anything above that is, taxed at 20%\n        remaining to {\n          20% to @taxes\n          remaining kept\n        }\n      }\n    ) (You can test it on the playground, you'll just want to feed the \"users:1234\" account with an initial balance in the input section)    reply           superzamp  3 hours ago    | root | parent | next  [–]      For this particular case, I would say that tax-brackets sort of logic can be expressed in the destination block with ordered destinations. For example, you could have something like this:  send [USD/2 *] (\n      source = @users:1234\n      destination = {\n        // first $1000 are taxed at 10%\n        max [USD/2 100000] to {\n          10% to @taxes\n          remaining kept\n        }\n        // Anything above that is, taxed at 20%\n        remaining to {\n          20% to @taxes\n          remaining kept\n        }\n      }\n    ) (You can test it on the playground, you'll just want to feed the \"users:1234\" account with an initial balance in the input section)    reply          superzamp  3 hours ago    | root | parent | next  [–]      For this particular case, I would say that tax-brackets sort of logic can be expressed in the destination block with ordered destinations. For example, you could have something like this:  send [USD/2 *] (\n      source = @users:1234\n      destination = {\n        // first $1000 are taxed at 10%\n        max [USD/2 100000] to {\n          10% to @taxes\n          remaining kept\n        }\n        // Anything above that is, taxed at 20%\n        remaining to {\n          20% to @taxes\n          remaining kept\n        }\n      }\n    ) (You can test it on the playground, you'll just want to feed the \"users:1234\" account with an initial balance in the input section)    reply          superzamp  3 hours ago    | root | parent | next  [–]      For this particular case, I would say that tax-brackets sort of logic can be expressed in the destination block with ordered destinations. For example, you could have something like this:  send [USD/2 *] (\n      source = @users:1234\n      destination = {\n        // first $1000 are taxed at 10%\n        max [USD/2 100000] to {\n          10% to @taxes\n          remaining kept\n        }\n        // Anything above that is, taxed at 20%\n        remaining to {\n          20% to @taxes\n          remaining kept\n        }\n      }\n    ) (You can test it on the playground, you'll just want to feed the \"users:1234\" account with an initial balance in the input section)    reply          superzamp  3 hours ago    | root | parent | next  [–]      For this particular case, I would say that tax-brackets sort of logic can be expressed in the destination block with ordered destinations. For example, you could have something like this:  send [USD/2 *] (\n      source = @users:1234\n      destination = {\n        // first $1000 are taxed at 10%\n        max [USD/2 100000] to {\n          10% to @taxes\n          remaining kept\n        }\n        // Anything above that is, taxed at 20%\n        remaining to {\n          20% to @taxes\n          remaining kept\n        }\n      }\n    ) (You can test it on the playground, you'll just want to feed the \"users:1234\" account with an initial balance in the input section)    reply    superzamp  3 hours ago    | root | parent | next  [–]     superzamp  3 hours ago    | root | parent | next  [–]    superzamp 3 hours ago 3 hours ago | root | parent | next  [–]   root parent next [–]  For this particular case, I would say that tax-brackets sort of logic can be expressed in the destination block with ordered destinations. For example, you could have something like this:  send [USD/2 *] (\n      source = @users:1234\n      destination = {\n        // first $1000 are taxed at 10%\n        max [USD/2 100000] to {\n          10% to @taxes\n          remaining kept\n        }\n        // Anything above that is, taxed at 20%\n        remaining to {\n          20% to @taxes\n          remaining kept\n        }\n      }\n    ) (You can test it on the playground, you'll just want to feed the \"users:1234\" account with an initial balance in the input section)    reply   For this particular case, I would say that tax-brackets sort of logic can be expressed in the destination block with ordered destinations. For example, you could have something like this:  send [USD/2 *] (\n      source = @users:1234\n      destination = {\n        // first $1000 are taxed at 10%\n        max [USD/2 100000] to {\n          10% to @taxes\n          remaining kept\n        }\n        // Anything above that is, taxed at 20%\n        remaining to {\n          20% to @taxes\n          remaining kept\n        }\n      }\n    ) (You can test it on the playground, you'll just want to feed the \"users:1234\" account with an initial balance in the input section) For example, you could have something like this: send [USD/2 *] (\n      source = @users:1234\n      destination = {\n        // first $1000 are taxed at 10%\n        max [USD/2 100000] to {\n          10% to @taxes\n          remaining kept\n        }\n        // Anything above that is, taxed at 20%\n        remaining to {\n          20% to @taxes\n          remaining kept\n        }\n      }\n    ) send [USD/2 *] (\n      source = @users:1234\n      destination = {\n        // first $1000 are taxed at 10%\n        max [USD/2 100000] to {\n          10% to @taxes\n          remaining kept\n        }\n        // Anything above that is, taxed at 20%\n        remaining to {\n          20% to @taxes\n          remaining kept\n        }\n      }\n    )   reply    reply    reply  reply reply        euroderf  3 hours ago    | parent | prev | next  [–]      The rules listed (1,2,6,7 round down; 3,4,8,9 round up). AFAIK these are also the official Eurozone cash rules for countries that choose not to circulate 1 and 2 eurocent coins. (Altho of course, electronic transactions are exact to the penny.) So you might want to cover this use case.    reply           euroderf  3 hours ago    | parent | prev | next  [–]      The rules listed (1,2,6,7 round down; 3,4,8,9 round up). AFAIK these are also the official Eurozone cash rules for countries that choose not to circulate 1 and 2 eurocent coins. (Altho of course, electronic transactions are exact to the penny.) So you might want to cover this use case.    reply           euroderf  3 hours ago    | parent | prev | next  [–]      The rules listed (1,2,6,7 round down; 3,4,8,9 round up). AFAIK these are also the official Eurozone cash rules for countries that choose not to circulate 1 and 2 eurocent coins. (Altho of course, electronic transactions are exact to the penny.) So you might want to cover this use case.    reply          euroderf  3 hours ago    | parent | prev | next  [–]      The rules listed (1,2,6,7 round down; 3,4,8,9 round up). AFAIK these are also the official Eurozone cash rules for countries that choose not to circulate 1 and 2 eurocent coins. (Altho of course, electronic transactions are exact to the penny.) So you might want to cover this use case.    reply          euroderf  3 hours ago    | parent | prev | next  [–]      The rules listed (1,2,6,7 round down; 3,4,8,9 round up). AFAIK these are also the official Eurozone cash rules for countries that choose not to circulate 1 and 2 eurocent coins. (Altho of course, electronic transactions are exact to the penny.) So you might want to cover this use case.    reply          euroderf  3 hours ago    | parent | prev | next  [–]      The rules listed (1,2,6,7 round down; 3,4,8,9 round up). AFAIK these are also the official Eurozone cash rules for countries that choose not to circulate 1 and 2 eurocent coins. (Altho of course, electronic transactions are exact to the penny.) So you might want to cover this use case.    reply    euroderf  3 hours ago    | parent | prev | next  [–]     euroderf  3 hours ago    | parent | prev | next  [–]    euroderf 3 hours ago 3 hours ago | parent | prev | next  [–]   parent prev next [–]  The rules listed (1,2,6,7 round down; 3,4,8,9 round up). AFAIK these are also the official Eurozone cash rules for countries that choose not to circulate 1 and 2 eurocent coins. (Altho of course, electronic transactions are exact to the penny.) So you might want to cover this use case.    reply   The rules listed (1,2,6,7 round down; 3,4,8,9 round up). AFAIK these are also the official Eurozone cash rules for countries that choose not to circulate 1 and 2 eurocent coins. (Altho of course, electronic transactions are exact to the penny.) So you might want to cover this use case.   reply    reply    reply  reply reply        vslira  5 hours ago    | prev | next  [–]      Super interesting and thanks for sharing. If I understood the license page on the repository correctly, the DSL is MIT-licensed since it's not within the enterprise directory, right?    reply           vslira  5 hours ago    | prev | next  [–]      Super interesting and thanks for sharing. If I understood the license page on the repository correctly, the DSL is MIT-licensed since it's not within the enterprise directory, right?    reply           vslira  5 hours ago    | prev | next  [–]      Super interesting and thanks for sharing. If I understood the license page on the repository correctly, the DSL is MIT-licensed since it's not within the enterprise directory, right?    reply          vslira  5 hours ago    | prev | next  [–]      Super interesting and thanks for sharing. If I understood the license page on the repository correctly, the DSL is MIT-licensed since it's not within the enterprise directory, right?    reply          vslira  5 hours ago    | prev | next  [–]      Super interesting and thanks for sharing. If I understood the license page on the repository correctly, the DSL is MIT-licensed since it's not within the enterprise directory, right?    reply          vslira  5 hours ago    | prev | next  [–]      Super interesting and thanks for sharing. If I understood the license page on the repository correctly, the DSL is MIT-licensed since it's not within the enterprise directory, right?    reply    vslira  5 hours ago    | prev | next  [–]     vslira  5 hours ago    | prev | next  [–]    vslira 5 hours ago 5 hours ago | prev | next  [–]   prev next [–]  Super interesting and thanks for sharing. If I understood the license page on the repository correctly, the DSL is MIT-licensed since it's not within the enterprise directory, right?    reply   Super interesting and thanks for sharing. If I understood the license page on the repository correctly, the DSL is MIT-licensed since it's not within the enterprise directory, right?   reply    reply    reply  reply reply        superzamp  5 hours ago    | parent | next  [–]      Yes exactly! There's actually two implementations, one tightly knit to our ledger product located at [1] and the new, standalone one (used by the playground) at [2]. In any case, in both implementations, the DSL is indeed MIT. [1] https://github.com/formancehq/stack/tree/main/components/led... [2] https://github.com/formancehq/numscript    reply           superzamp  5 hours ago    | parent | next  [–]      Yes exactly! There's actually two implementations, one tightly knit to our ledger product located at [1] and the new, standalone one (used by the playground) at [2]. In any case, in both implementations, the DSL is indeed MIT. [1] https://github.com/formancehq/stack/tree/main/components/led... [2] https://github.com/formancehq/numscript    reply           superzamp  5 hours ago    | parent | next  [–]      Yes exactly! There's actually two implementations, one tightly knit to our ledger product located at [1] and the new, standalone one (used by the playground) at [2]. In any case, in both implementations, the DSL is indeed MIT. [1] https://github.com/formancehq/stack/tree/main/components/led... [2] https://github.com/formancehq/numscript    reply          superzamp  5 hours ago    | parent | next  [–]      Yes exactly! There's actually two implementations, one tightly knit to our ledger product located at [1] and the new, standalone one (used by the playground) at [2]. In any case, in both implementations, the DSL is indeed MIT. [1] https://github.com/formancehq/stack/tree/main/components/led... [2] https://github.com/formancehq/numscript    reply          superzamp  5 hours ago    | parent | next  [–]      Yes exactly! There's actually two implementations, one tightly knit to our ledger product located at [1] and the new, standalone one (used by the playground) at [2]. In any case, in both implementations, the DSL is indeed MIT. [1] https://github.com/formancehq/stack/tree/main/components/led... [2] https://github.com/formancehq/numscript    reply          superzamp  5 hours ago    | parent | next  [–]      Yes exactly! There's actually two implementations, one tightly knit to our ledger product located at [1] and the new, standalone one (used by the playground) at [2]. In any case, in both implementations, the DSL is indeed MIT. [1] https://github.com/formancehq/stack/tree/main/components/led... [2] https://github.com/formancehq/numscript    reply    superzamp  5 hours ago    | parent | next  [–]     superzamp  5 hours ago    | parent | next  [–]    superzamp 5 hours ago 5 hours ago | parent | next  [–]   parent next [–]  Yes exactly! There's actually two implementations, one tightly knit to our ledger product located at [1] and the new, standalone one (used by the playground) at [2]. In any case, in both implementations, the DSL is indeed MIT. [1] https://github.com/formancehq/stack/tree/main/components/led... [2] https://github.com/formancehq/numscript    reply   Yes exactly! There's actually two implementations, one tightly knit to our ledger product located at [1] and the new, standalone one (used by the playground) at [2]. In any case, in both implementations, the DSL is indeed MIT. [1] https://github.com/formancehq/stack/tree/main/components/led... [2] https://github.com/formancehq/numscript [1] https://github.com/formancehq/stack/tree/main/components/led... https://github.com/formancehq/stack/tree/main/components/led... [2] https://github.com/formancehq/numscript https://github.com/formancehq/numscript   reply    reply    reply  reply reply        OutOfHere  3 hours ago    | prev | next  [–]      Can this or Formance interact with credit card systems, checking accounts, and layer 2 crypto wallets? If not, how is the money even going to come in or out?    reply           OutOfHere  3 hours ago    | prev | next  [–]      Can this or Formance interact with credit card systems, checking accounts, and layer 2 crypto wallets? If not, how is the money even going to come in or out?    reply           OutOfHere  3 hours ago    | prev | next  [–]      Can this or Formance interact with credit card systems, checking accounts, and layer 2 crypto wallets? If not, how is the money even going to come in or out?    reply          OutOfHere  3 hours ago    | prev | next  [–]      Can this or Formance interact with credit card systems, checking accounts, and layer 2 crypto wallets? If not, how is the money even going to come in or out?    reply          OutOfHere  3 hours ago    | prev | next  [–]      Can this or Formance interact with credit card systems, checking accounts, and layer 2 crypto wallets? If not, how is the money even going to come in or out?    reply          OutOfHere  3 hours ago    | prev | next  [–]      Can this or Formance interact with credit card systems, checking accounts, and layer 2 crypto wallets? If not, how is the money even going to come in or out?    reply    OutOfHere  3 hours ago    | prev | next  [–]     OutOfHere  3 hours ago    | prev | next  [–]    OutOfHere 3 hours ago 3 hours ago | prev | next  [–]   prev next [–]  Can this or Formance interact with credit card systems, checking accounts, and layer 2 crypto wallets? If not, how is the money even going to come in or out?    reply   Can this or Formance interact with credit card systems, checking accounts, and layer 2 crypto wallets? If not, how is the money even going to come in or out?   reply    reply    reply  reply reply        robk  6 hours ago    | prev | next  [–]      This seems cool but what's the intention with the USD/2 notation? Is that for fractional sub-cent precision in rounding situations?    reply           robk  6 hours ago    | prev | next  [–]      This seems cool but what's the intention with the USD/2 notation? Is that for fractional sub-cent precision in rounding situations?    reply           robk  6 hours ago    | prev | next  [–]      This seems cool but what's the intention with the USD/2 notation? Is that for fractional sub-cent precision in rounding situations?    reply          robk  6 hours ago    | prev | next  [–]      This seems cool but what's the intention with the USD/2 notation? Is that for fractional sub-cent precision in rounding situations?    reply          robk  6 hours ago    | prev | next  [–]      This seems cool but what's the intention with the USD/2 notation? Is that for fractional sub-cent precision in rounding situations?    reply          robk  6 hours ago    | prev | next  [–]      This seems cool but what's the intention with the USD/2 notation? Is that for fractional sub-cent precision in rounding situations?    reply    robk  6 hours ago    | prev | next  [–]     robk  6 hours ago    | prev | next  [–]    robk 6 hours ago 6 hours ago | prev | next  [–]   prev next [–]  This seems cool but what's the intention with the USD/2 notation? Is that for fractional sub-cent precision in rounding situations?    reply   This seems cool but what's the intention with the USD/2 notation? Is that for fractional sub-cent precision in rounding situations?   reply    reply    reply  reply reply        superzamp  6 hours ago    | parent | next  [–]      It's indeed relative to cents in a sense, the idea is to force you to declare the precision of the monetary amount you're expressing. You can see various interpretation of what \"USD\" means in the wild, as some APIs will happily parse USD 100 as $1.00 while some others might parse USD 100 as $100.00. So we recommend this explicit [ASSET/SCALE AMOUNT] notation, where SCALE describes the negative power of ten to multiply the AMOUNT with to obtain the decimal value in the given ASSET. It makes subsequent interaction with external systems much easier. You can read a bit more about it here [1]. [1] https://docs.formance.com/stack/unambiguous-monetary-notatio...    reply           superzamp  6 hours ago    | parent | next  [–]      It's indeed relative to cents in a sense, the idea is to force you to declare the precision of the monetary amount you're expressing. You can see various interpretation of what \"USD\" means in the wild, as some APIs will happily parse USD 100 as $1.00 while some others might parse USD 100 as $100.00. So we recommend this explicit [ASSET/SCALE AMOUNT] notation, where SCALE describes the negative power of ten to multiply the AMOUNT with to obtain the decimal value in the given ASSET. It makes subsequent interaction with external systems much easier. You can read a bit more about it here [1]. [1] https://docs.formance.com/stack/unambiguous-monetary-notatio...    reply           superzamp  6 hours ago    | parent | next  [–]      It's indeed relative to cents in a sense, the idea is to force you to declare the precision of the monetary amount you're expressing. You can see various interpretation of what \"USD\" means in the wild, as some APIs will happily parse USD 100 as $1.00 while some others might parse USD 100 as $100.00. So we recommend this explicit [ASSET/SCALE AMOUNT] notation, where SCALE describes the negative power of ten to multiply the AMOUNT with to obtain the decimal value in the given ASSET. It makes subsequent interaction with external systems much easier. You can read a bit more about it here [1]. [1] https://docs.formance.com/stack/unambiguous-monetary-notatio...    reply          superzamp  6 hours ago    | parent | next  [–]      It's indeed relative to cents in a sense, the idea is to force you to declare the precision of the monetary amount you're expressing. You can see various interpretation of what \"USD\" means in the wild, as some APIs will happily parse USD 100 as $1.00 while some others might parse USD 100 as $100.00. So we recommend this explicit [ASSET/SCALE AMOUNT] notation, where SCALE describes the negative power of ten to multiply the AMOUNT with to obtain the decimal value in the given ASSET. It makes subsequent interaction with external systems much easier. You can read a bit more about it here [1]. [1] https://docs.formance.com/stack/unambiguous-monetary-notatio...    reply          superzamp  6 hours ago    | parent | next  [–]      It's indeed relative to cents in a sense, the idea is to force you to declare the precision of the monetary amount you're expressing. You can see various interpretation of what \"USD\" means in the wild, as some APIs will happily parse USD 100 as $1.00 while some others might parse USD 100 as $100.00. So we recommend this explicit [ASSET/SCALE AMOUNT] notation, where SCALE describes the negative power of ten to multiply the AMOUNT with to obtain the decimal value in the given ASSET. It makes subsequent interaction with external systems much easier. You can read a bit more about it here [1]. [1] https://docs.formance.com/stack/unambiguous-monetary-notatio...    reply          superzamp  6 hours ago    | parent | next  [–]      It's indeed relative to cents in a sense, the idea is to force you to declare the precision of the monetary amount you're expressing. You can see various interpretation of what \"USD\" means in the wild, as some APIs will happily parse USD 100 as $1.00 while some others might parse USD 100 as $100.00. So we recommend this explicit [ASSET/SCALE AMOUNT] notation, where SCALE describes the negative power of ten to multiply the AMOUNT with to obtain the decimal value in the given ASSET. It makes subsequent interaction with external systems much easier. You can read a bit more about it here [1]. [1] https://docs.formance.com/stack/unambiguous-monetary-notatio...    reply    superzamp  6 hours ago    | parent | next  [–]     superzamp  6 hours ago    | parent | next  [–]    superzamp 6 hours ago 6 hours ago | parent | next  [–]   parent next [–]  It's indeed relative to cents in a sense, the idea is to force you to declare the precision of the monetary amount you're expressing. You can see various interpretation of what \"USD\" means in the wild, as some APIs will happily parse USD 100 as $1.00 while some others might parse USD 100 as $100.00. So we recommend this explicit [ASSET/SCALE AMOUNT] notation, where SCALE describes the negative power of ten to multiply the AMOUNT with to obtain the decimal value in the given ASSET. It makes subsequent interaction with external systems much easier. You can read a bit more about it here [1]. [1] https://docs.formance.com/stack/unambiguous-monetary-notatio...    reply   It's indeed relative to cents in a sense, the idea is to force you to declare the precision of the monetary amount you're expressing. You can see various interpretation of what \"USD\" means in the wild, as some APIs will happily parse USD 100 as $1.00 while some others might parse USD 100 as $100.00. So we recommend this explicit [ASSET/SCALE AMOUNT] notation, where SCALE describes the negative power of ten to multiply the AMOUNT with to obtain the decimal value in the given ASSET. It makes subsequent interaction with external systems much easier. You can read a bit more about it here [1]. [1] https://docs.formance.com/stack/unambiguous-monetary-notatio... You can see various interpretation of what \"USD\" means in the wild, as some APIs will happily parse USD 100 as $1.00 while some others might parse USD 100 as $100.00. So we recommend this explicit [ASSET/SCALE AMOUNT] notation, where SCALE describes the negative power of ten to multiply the AMOUNT with to obtain the decimal value in the given ASSET. It makes subsequent interaction with external systems much easier. You can read a bit more about it here [1]. [1] https://docs.formance.com/stack/unambiguous-monetary-notatio... https://docs.formance.com/stack/unambiguous-monetary-notatio...   reply    reply    reply  reply reply        girvo  39 minutes ago    | root | parent | next  [–]      Just to add to this, having also implemented a production payment system, we did the same thing. One needs to be very explicit about the scale and how it should be rounded and dealt with, and how to operate on two different scale systems. Quite a fun challenge, though I do not miss the edge cases. Our system was a payment system for childcare management software, interfacing with banks and the government directly.    reply           girvo  39 minutes ago    | root | parent | next  [–]      Just to add to this, having also implemented a production payment system, we did the same thing. One needs to be very explicit about the scale and how it should be rounded and dealt with, and how to operate on two different scale systems. Quite a fun challenge, though I do not miss the edge cases. Our system was a payment system for childcare management software, interfacing with banks and the government directly.    reply           girvo  39 minutes ago    | root | parent | next  [–]      Just to add to this, having also implemented a production payment system, we did the same thing. One needs to be very explicit about the scale and how it should be rounded and dealt with, and how to operate on two different scale systems. Quite a fun challenge, though I do not miss the edge cases. Our system was a payment system for childcare management software, interfacing with banks and the government directly.    reply          girvo  39 minutes ago    | root | parent | next  [–]      Just to add to this, having also implemented a production payment system, we did the same thing. One needs to be very explicit about the scale and how it should be rounded and dealt with, and how to operate on two different scale systems. Quite a fun challenge, though I do not miss the edge cases. Our system was a payment system for childcare management software, interfacing with banks and the government directly.    reply          girvo  39 minutes ago    | root | parent | next  [–]      Just to add to this, having also implemented a production payment system, we did the same thing. One needs to be very explicit about the scale and how it should be rounded and dealt with, and how to operate on two different scale systems. Quite a fun challenge, though I do not miss the edge cases. Our system was a payment system for childcare management software, interfacing with banks and the government directly.    reply          girvo  39 minutes ago    | root | parent | next  [–]      Just to add to this, having also implemented a production payment system, we did the same thing. One needs to be very explicit about the scale and how it should be rounded and dealt with, and how to operate on two different scale systems. Quite a fun challenge, though I do not miss the edge cases. Our system was a payment system for childcare management software, interfacing with banks and the government directly.    reply    girvo  39 minutes ago    | root | parent | next  [–]     girvo  39 minutes ago    | root | parent | next  [–]    girvo 39 minutes ago 39 minutes ago | root | parent | next  [–]   root parent next [–]  Just to add to this, having also implemented a production payment system, we did the same thing. One needs to be very explicit about the scale and how it should be rounded and dealt with, and how to operate on two different scale systems. Quite a fun challenge, though I do not miss the edge cases. Our system was a payment system for childcare management software, interfacing with banks and the government directly.    reply   Just to add to this, having also implemented a production payment system, we did the same thing. One needs to be very explicit about the scale and how it should be rounded and dealt with, and how to operate on two different scale systems. Quite a fun challenge, though I do not miss the edge cases. Our system was a payment system for childcare management software, interfacing with banks and the government directly. Our system was a payment system for childcare management software, interfacing with banks and the government directly.   reply    reply    reply  reply reply        tway_GdBRwW  4 hours ago    | root | parent | prev | next  [–]      Used to work at a payments company. Yes, you need to be *very* explicit in how you model currency amounts and precision. See also earlier post about Canadian rounding rules. Some of the \"logic\" is regulatory/compliance driven. ref child post about stocks trading for 0.0001. Yes, those are real trades and (probably) fully legal etc, but I'm not sure the Fed recognizes currency amounts less than 1 US cent ($0.01), so the accounting rules and tax rules might not match expectations based on generalized floating point math.    reply           tway_GdBRwW  4 hours ago    | root | parent | prev | next  [–]      Used to work at a payments company. Yes, you need to be *very* explicit in how you model currency amounts and precision. See also earlier post about Canadian rounding rules. Some of the \"logic\" is regulatory/compliance driven. ref child post about stocks trading for 0.0001. Yes, those are real trades and (probably) fully legal etc, but I'm not sure the Fed recognizes currency amounts less than 1 US cent ($0.01), so the accounting rules and tax rules might not match expectations based on generalized floating point math.    reply           tway_GdBRwW  4 hours ago    | root | parent | prev | next  [–]      Used to work at a payments company. Yes, you need to be *very* explicit in how you model currency amounts and precision. See also earlier post about Canadian rounding rules. Some of the \"logic\" is regulatory/compliance driven. ref child post about stocks trading for 0.0001. Yes, those are real trades and (probably) fully legal etc, but I'm not sure the Fed recognizes currency amounts less than 1 US cent ($0.01), so the accounting rules and tax rules might not match expectations based on generalized floating point math.    reply          tway_GdBRwW  4 hours ago    | root | parent | prev | next  [–]      Used to work at a payments company. Yes, you need to be *very* explicit in how you model currency amounts and precision. See also earlier post about Canadian rounding rules. Some of the \"logic\" is regulatory/compliance driven. ref child post about stocks trading for 0.0001. Yes, those are real trades and (probably) fully legal etc, but I'm not sure the Fed recognizes currency amounts less than 1 US cent ($0.01), so the accounting rules and tax rules might not match expectations based on generalized floating point math.    reply          tway_GdBRwW  4 hours ago    | root | parent | prev | next  [–]      Used to work at a payments company. Yes, you need to be *very* explicit in how you model currency amounts and precision. See also earlier post about Canadian rounding rules. Some of the \"logic\" is regulatory/compliance driven. ref child post about stocks trading for 0.0001. Yes, those are real trades and (probably) fully legal etc, but I'm not sure the Fed recognizes currency amounts less than 1 US cent ($0.01), so the accounting rules and tax rules might not match expectations based on generalized floating point math.    reply          tway_GdBRwW  4 hours ago    | root | parent | prev | next  [–]      Used to work at a payments company. Yes, you need to be *very* explicit in how you model currency amounts and precision. See also earlier post about Canadian rounding rules. Some of the \"logic\" is regulatory/compliance driven. ref child post about stocks trading for 0.0001. Yes, those are real trades and (probably) fully legal etc, but I'm not sure the Fed recognizes currency amounts less than 1 US cent ($0.01), so the accounting rules and tax rules might not match expectations based on generalized floating point math.    reply    tway_GdBRwW  4 hours ago    | root | parent | prev | next  [–]     tway_GdBRwW  4 hours ago    | root | parent | prev | next  [–]    tway_GdBRwW 4 hours ago 4 hours ago | root | parent | prev | next  [–]   root parent prev next [–]  Used to work at a payments company. Yes, you need to be *very* explicit in how you model currency amounts and precision. See also earlier post about Canadian rounding rules. Some of the \"logic\" is regulatory/compliance driven. ref child post about stocks trading for 0.0001. Yes, those are real trades and (probably) fully legal etc, but I'm not sure the Fed recognizes currency amounts less than 1 US cent ($0.01), so the accounting rules and tax rules might not match expectations based on generalized floating point math.    reply   Used to work at a payments company. Yes, you need to be *very* explicit in how you model currency amounts and precision. See also earlier post about Canadian rounding rules. Some of the \"logic\" is regulatory/compliance driven. ref child post about stocks trading for 0.0001. Yes, those are real trades and (probably) fully legal etc, but I'm not sure the Fed recognizes currency amounts less than 1 US cent ($0.01), so the accounting rules and tax rules might not match expectations based on generalized floating point math. ref child post about stocks trading for 0.0001. Yes, those are real trades and (probably) fully legal etc, but I'm not sure the Fed recognizes currency amounts less than 1 US cent ($0.01), so the accounting rules and tax rules might not match expectations based on generalized floating point math.   reply    reply    reply  reply reply        euroderf  3 hours ago    | root | parent | next  [–]      Doesn't the Fed recognise mills ? They are not extinct.    reply           euroderf  3 hours ago    | root | parent | next  [–]      Doesn't the Fed recognise mills ? They are not extinct.    reply           euroderf  3 hours ago    | root | parent | next  [–]      Doesn't the Fed recognise mills ? They are not extinct.    reply          euroderf  3 hours ago    | root | parent | next  [–]      Doesn't the Fed recognise mills ? They are not extinct.    reply          euroderf  3 hours ago    | root | parent | next  [–]      Doesn't the Fed recognise mills ? They are not extinct.    reply          euroderf  3 hours ago    | root | parent | next  [–]      Doesn't the Fed recognise mills ? They are not extinct.    reply    euroderf  3 hours ago    | root | parent | next  [–]     euroderf  3 hours ago    | root | parent | next  [–]    euroderf 3 hours ago 3 hours ago | root | parent | next  [–]   root parent next [–]  Doesn't the Fed recognise mills ? They are not extinct.    reply   Doesn't the Fed recognise mills ? They are not extinct.   reply    reply    reply  reply reply        flockonus  5 hours ago    | root | parent | prev | next  [–]      What about units that cost sub-cent? For examples, I've seen private company stocks being $0.0001 Not sure why you'd need to make a note in the internal representation, vs. leave adapters to handle conversions.    reply           flockonus  5 hours ago    | root | parent | prev | next  [–]      What about units that cost sub-cent? For examples, I've seen private company stocks being $0.0001 Not sure why you'd need to make a note in the internal representation, vs. leave adapters to handle conversions.    reply           flockonus  5 hours ago    | root | parent | prev | next  [–]      What about units that cost sub-cent? For examples, I've seen private company stocks being $0.0001 Not sure why you'd need to make a note in the internal representation, vs. leave adapters to handle conversions.    reply          flockonus  5 hours ago    | root | parent | prev | next  [–]      What about units that cost sub-cent? For examples, I've seen private company stocks being $0.0001 Not sure why you'd need to make a note in the internal representation, vs. leave adapters to handle conversions.    reply          flockonus  5 hours ago    | root | parent | prev | next  [–]      What about units that cost sub-cent? For examples, I've seen private company stocks being $0.0001 Not sure why you'd need to make a note in the internal representation, vs. leave adapters to handle conversions.    reply          flockonus  5 hours ago    | root | parent | prev | next  [–]      What about units that cost sub-cent? For examples, I've seen private company stocks being $0.0001 Not sure why you'd need to make a note in the internal representation, vs. leave adapters to handle conversions.    reply    flockonus  5 hours ago    | root | parent | prev | next  [–]     flockonus  5 hours ago    | root | parent | prev | next  [–]    flockonus 5 hours ago 5 hours ago | root | parent | prev | next  [–]   root parent prev next [–]  What about units that cost sub-cent? For examples, I've seen private company stocks being $0.0001 Not sure why you'd need to make a note in the internal representation, vs. leave adapters to handle conversions.    reply   What about units that cost sub-cent? For examples, I've seen private company stocks being $0.0001 Not sure why you'd need to make a note in the internal representation, vs. leave adapters to handle conversions. Not sure why you'd need to make a note in the internal representation, vs. leave adapters to handle conversions.   reply    reply    reply  reply reply        bbor  5 hours ago    | root | parent | next  [–]      Not to speak for them, but I think you’ve understood the point exactly. You need to be able to support arbitrary precision, but that support needs to be intentional to avoid errors. And you have to record that decision somewhere if adapters are to correctly handle your outputs; why not in the unit name?    reply           bbor  5 hours ago    | root | parent | next  [–]      Not to speak for them, but I think you’ve understood the point exactly. You need to be able to support arbitrary precision, but that support needs to be intentional to avoid errors. And you have to record that decision somewhere if adapters are to correctly handle your outputs; why not in the unit name?    reply           bbor  5 hours ago    | root | parent | next  [–]      Not to speak for them, but I think you’ve understood the point exactly. You need to be able to support arbitrary precision, but that support needs to be intentional to avoid errors. And you have to record that decision somewhere if adapters are to correctly handle your outputs; why not in the unit name?    reply          bbor  5 hours ago    | root | parent | next  [–]      Not to speak for them, but I think you’ve understood the point exactly. You need to be able to support arbitrary precision, but that support needs to be intentional to avoid errors. And you have to record that decision somewhere if adapters are to correctly handle your outputs; why not in the unit name?    reply          bbor  5 hours ago    | root | parent | next  [–]      Not to speak for them, but I think you’ve understood the point exactly. You need to be able to support arbitrary precision, but that support needs to be intentional to avoid errors. And you have to record that decision somewhere if adapters are to correctly handle your outputs; why not in the unit name?    reply          bbor  5 hours ago    | root | parent | next  [–]      Not to speak for them, but I think you’ve understood the point exactly. You need to be able to support arbitrary precision, but that support needs to be intentional to avoid errors. And you have to record that decision somewhere if adapters are to correctly handle your outputs; why not in the unit name?    reply    bbor  5 hours ago    | root | parent | next  [–]     bbor  5 hours ago    | root | parent | next  [–]    bbor 5 hours ago 5 hours ago | root | parent | next  [–]   root parent next [–]  Not to speak for them, but I think you’ve understood the point exactly. You need to be able to support arbitrary precision, but that support needs to be intentional to avoid errors. And you have to record that decision somewhere if adapters are to correctly handle your outputs; why not in the unit name?    reply   Not to speak for them, but I think you’ve understood the point exactly. You need to be able to support arbitrary precision, but that support needs to be intentional to avoid errors. And you have to record that decision somewhere if adapters are to correctly handle your outputs; why not in the unit name? intentional   reply    reply    reply  reply reply        petesergeant  4 hours ago    | root | parent | prev | next  [–]      If I understand their docs correctly, that’s equivalent to [USD/4 1]    reply           petesergeant  4 hours ago    | root | parent | prev | next  [–]      If I understand their docs correctly, that’s equivalent to [USD/4 1]    reply           petesergeant  4 hours ago    | root | parent | prev | next  [–]      If I understand their docs correctly, that’s equivalent to [USD/4 1]    reply          petesergeant  4 hours ago    | root | parent | prev | next  [–]      If I understand their docs correctly, that’s equivalent to [USD/4 1]    reply          petesergeant  4 hours ago    | root | parent | prev | next  [–]      If I understand their docs correctly, that’s equivalent to [USD/4 1]    reply          petesergeant  4 hours ago    | root | parent | prev | next  [–]      If I understand their docs correctly, that’s equivalent to [USD/4 1]    reply    petesergeant  4 hours ago    | root | parent | prev | next  [–]     petesergeant  4 hours ago    | root | parent | prev | next  [–]    petesergeant 4 hours ago 4 hours ago | root | parent | prev | next  [–]   root parent prev next [–]  If I understand their docs correctly, that’s equivalent to [USD/4 1]    reply   If I understand their docs correctly, that’s equivalent to [USD/4 1]   reply    reply    reply  reply reply        jimbokun  3 hours ago    | prev | next  [–]      Are there converters to/from OFX for Numscript?    reply           jimbokun  3 hours ago    | prev | next  [–]      Are there converters to/from OFX for Numscript?    reply           jimbokun  3 hours ago    | prev | next  [–]      Are there converters to/from OFX for Numscript?    reply          jimbokun  3 hours ago    | prev | next  [–]      Are there converters to/from OFX for Numscript?    reply          jimbokun  3 hours ago    | prev | next  [–]      Are there converters to/from OFX for Numscript?    reply          jimbokun  3 hours ago    | prev | next  [–]      Are there converters to/from OFX for Numscript?    reply    jimbokun  3 hours ago    | prev | next  [–]     jimbokun  3 hours ago    | prev | next  [–]    jimbokun 3 hours ago 3 hours ago | prev | next  [–]   prev next [–]  Are there converters to/from OFX for Numscript?    reply   Are there converters to/from OFX for Numscript?   reply    reply    reply  reply reply        henning  1 hour ago    | prev | next  [–]      Ah, what better input format than JSON, a poorly defined, ambiguous format that freely mixes integers and floating points and lacks supports for bigints and bigdecimals.    reply           henning  1 hour ago    | prev | next  [–]      Ah, what better input format than JSON, a poorly defined, ambiguous format that freely mixes integers and floating points and lacks supports for bigints and bigdecimals.    reply           henning  1 hour ago    | prev | next  [–]      Ah, what better input format than JSON, a poorly defined, ambiguous format that freely mixes integers and floating points and lacks supports for bigints and bigdecimals.    reply          henning  1 hour ago    | prev | next  [–]      Ah, what better input format than JSON, a poorly defined, ambiguous format that freely mixes integers and floating points and lacks supports for bigints and bigdecimals.    reply          henning  1 hour ago    | prev | next  [–]      Ah, what better input format than JSON, a poorly defined, ambiguous format that freely mixes integers and floating points and lacks supports for bigints and bigdecimals.    reply          henning  1 hour ago    | prev | next  [–]      Ah, what better input format than JSON, a poorly defined, ambiguous format that freely mixes integers and floating points and lacks supports for bigints and bigdecimals.    reply    henning  1 hour ago    | prev | next  [–]     henning  1 hour ago    | prev | next  [–]    henning 1 hour ago 1 hour ago | prev | next  [–]   prev next [–]  Ah, what better input format than JSON, a poorly defined, ambiguous format that freely mixes integers and floating points and lacks supports for bigints and bigdecimals.    reply   Ah, what better input format than JSON, a poorly defined, ambiguous format that freely mixes integers and floating points and lacks supports for bigints and bigdecimals.   reply    reply    reply  reply reply        bbor  5 hours ago    | prev  [–]      To this noob, this seems like a problem that was pretty convincingly solved by double entry accounting ledgers, but from your post it sounds like this isn’t a replacement-of but rather an addition-to that model. What’s a situation where an imperative approach would be preferable to the traditional declarative approach? \nMy depth of knowledge pretty much starts and ends with the below document, so apologies if this is obvious to experts! https://beancount.github.io/docs/the_double_entry_counting_m... E: the problem being “tracking transactions”. Yes?    reply           bbor  5 hours ago    | prev  [–]      To this noob, this seems like a problem that was pretty convincingly solved by double entry accounting ledgers, but from your post it sounds like this isn’t a replacement-of but rather an addition-to that model. What’s a situation where an imperative approach would be preferable to the traditional declarative approach? \nMy depth of knowledge pretty much starts and ends with the below document, so apologies if this is obvious to experts! https://beancount.github.io/docs/the_double_entry_counting_m... E: the problem being “tracking transactions”. Yes?    reply           bbor  5 hours ago    | prev  [–]      To this noob, this seems like a problem that was pretty convincingly solved by double entry accounting ledgers, but from your post it sounds like this isn’t a replacement-of but rather an addition-to that model. What’s a situation where an imperative approach would be preferable to the traditional declarative approach? \nMy depth of knowledge pretty much starts and ends with the below document, so apologies if this is obvious to experts! https://beancount.github.io/docs/the_double_entry_counting_m... E: the problem being “tracking transactions”. Yes?    reply          bbor  5 hours ago    | prev  [–]      To this noob, this seems like a problem that was pretty convincingly solved by double entry accounting ledgers, but from your post it sounds like this isn’t a replacement-of but rather an addition-to that model. What’s a situation where an imperative approach would be preferable to the traditional declarative approach? \nMy depth of knowledge pretty much starts and ends with the below document, so apologies if this is obvious to experts! https://beancount.github.io/docs/the_double_entry_counting_m... E: the problem being “tracking transactions”. Yes?    reply          bbor  5 hours ago    | prev  [–]      To this noob, this seems like a problem that was pretty convincingly solved by double entry accounting ledgers, but from your post it sounds like this isn’t a replacement-of but rather an addition-to that model. What’s a situation where an imperative approach would be preferable to the traditional declarative approach? \nMy depth of knowledge pretty much starts and ends with the below document, so apologies if this is obvious to experts! https://beancount.github.io/docs/the_double_entry_counting_m... E: the problem being “tracking transactions”. Yes?    reply          bbor  5 hours ago    | prev  [–]      To this noob, this seems like a problem that was pretty convincingly solved by double entry accounting ledgers, but from your post it sounds like this isn’t a replacement-of but rather an addition-to that model. What’s a situation where an imperative approach would be preferable to the traditional declarative approach? \nMy depth of knowledge pretty much starts and ends with the below document, so apologies if this is obvious to experts! https://beancount.github.io/docs/the_double_entry_counting_m... E: the problem being “tracking transactions”. Yes?    reply    bbor  5 hours ago    | prev  [–]     bbor  5 hours ago    | prev  [–]    bbor 5 hours ago 5 hours ago | prev  [–]   prev [–]  To this noob, this seems like a problem that was pretty convincingly solved by double entry accounting ledgers, but from your post it sounds like this isn’t a replacement-of but rather an addition-to that model. What’s a situation where an imperative approach would be preferable to the traditional declarative approach? \nMy depth of knowledge pretty much starts and ends with the below document, so apologies if this is obvious to experts! https://beancount.github.io/docs/the_double_entry_counting_m... E: the problem being “tracking transactions”. Yes?    reply   To this noob, this seems like a problem that was pretty convincingly solved by double entry accounting ledgers, but from your post it sounds like this isn’t a replacement-of but rather an addition-to that model. What’s a situation where an imperative approach would be preferable to the traditional declarative approach? \nMy depth of knowledge pretty much starts and ends with the below document, so apologies if this is obvious to experts! https://beancount.github.io/docs/the_double_entry_counting_m... E: the problem being “tracking transactions”. Yes? https://beancount.github.io/docs/the_double_entry_counting_m... https://beancount.github.io/docs/the_double_entry_counting_m... E: the problem being “tracking transactions”. Yes?   reply    reply    reply  reply reply        superzamp  4 hours ago    | parent  [–]      That's a very good question. So the DSL here operates an agnostic source/dest transaction model, which is akin to the credit/debit model sans the semantic baggage. The goal of this model is indeed to be \"tracking transactions\" in the abstract sense, having the benefit of not forcing accounting decisions too early on when there is (still yet) none. For example, if you create a transaction moving money from \"@stripe:main\" to \"@acct:123\" and \"@acct:234\", you're merely representing the fact that you want this money to be moved. Wether the movement is clearing off a liability or generating revenue is another concern that you (in our model) want to take care of in a separate layer, that will also likely involve some intense intentionality and iterations from your accounting team. In a sense, it's as close to accounting than it is to warehousing money, moving unitary boxes of it from one location to another. These two models have the same amount of information per entry, so they can actually be converted from one to another, enabling you to also represent some accounting-ish transactions with this DSL, e.g. with a send [USD/2 100] from @ar:invoices:1234 to @sales.    reply           superzamp  4 hours ago    | parent  [–]      That's a very good question. So the DSL here operates an agnostic source/dest transaction model, which is akin to the credit/debit model sans the semantic baggage. The goal of this model is indeed to be \"tracking transactions\" in the abstract sense, having the benefit of not forcing accounting decisions too early on when there is (still yet) none. For example, if you create a transaction moving money from \"@stripe:main\" to \"@acct:123\" and \"@acct:234\", you're merely representing the fact that you want this money to be moved. Wether the movement is clearing off a liability or generating revenue is another concern that you (in our model) want to take care of in a separate layer, that will also likely involve some intense intentionality and iterations from your accounting team. In a sense, it's as close to accounting than it is to warehousing money, moving unitary boxes of it from one location to another. These two models have the same amount of information per entry, so they can actually be converted from one to another, enabling you to also represent some accounting-ish transactions with this DSL, e.g. with a send [USD/2 100] from @ar:invoices:1234 to @sales.    reply           superzamp  4 hours ago    | parent  [–]      That's a very good question. So the DSL here operates an agnostic source/dest transaction model, which is akin to the credit/debit model sans the semantic baggage. The goal of this model is indeed to be \"tracking transactions\" in the abstract sense, having the benefit of not forcing accounting decisions too early on when there is (still yet) none. For example, if you create a transaction moving money from \"@stripe:main\" to \"@acct:123\" and \"@acct:234\", you're merely representing the fact that you want this money to be moved. Wether the movement is clearing off a liability or generating revenue is another concern that you (in our model) want to take care of in a separate layer, that will also likely involve some intense intentionality and iterations from your accounting team. In a sense, it's as close to accounting than it is to warehousing money, moving unitary boxes of it from one location to another. These two models have the same amount of information per entry, so they can actually be converted from one to another, enabling you to also represent some accounting-ish transactions with this DSL, e.g. with a send [USD/2 100] from @ar:invoices:1234 to @sales.    reply          superzamp  4 hours ago    | parent  [–]      That's a very good question. So the DSL here operates an agnostic source/dest transaction model, which is akin to the credit/debit model sans the semantic baggage. The goal of this model is indeed to be \"tracking transactions\" in the abstract sense, having the benefit of not forcing accounting decisions too early on when there is (still yet) none. For example, if you create a transaction moving money from \"@stripe:main\" to \"@acct:123\" and \"@acct:234\", you're merely representing the fact that you want this money to be moved. Wether the movement is clearing off a liability or generating revenue is another concern that you (in our model) want to take care of in a separate layer, that will also likely involve some intense intentionality and iterations from your accounting team. In a sense, it's as close to accounting than it is to warehousing money, moving unitary boxes of it from one location to another. These two models have the same amount of information per entry, so they can actually be converted from one to another, enabling you to also represent some accounting-ish transactions with this DSL, e.g. with a send [USD/2 100] from @ar:invoices:1234 to @sales.    reply          superzamp  4 hours ago    | parent  [–]      That's a very good question. So the DSL here operates an agnostic source/dest transaction model, which is akin to the credit/debit model sans the semantic baggage. The goal of this model is indeed to be \"tracking transactions\" in the abstract sense, having the benefit of not forcing accounting decisions too early on when there is (still yet) none. For example, if you create a transaction moving money from \"@stripe:main\" to \"@acct:123\" and \"@acct:234\", you're merely representing the fact that you want this money to be moved. Wether the movement is clearing off a liability or generating revenue is another concern that you (in our model) want to take care of in a separate layer, that will also likely involve some intense intentionality and iterations from your accounting team. In a sense, it's as close to accounting than it is to warehousing money, moving unitary boxes of it from one location to another. These two models have the same amount of information per entry, so they can actually be converted from one to another, enabling you to also represent some accounting-ish transactions with this DSL, e.g. with a send [USD/2 100] from @ar:invoices:1234 to @sales.    reply          superzamp  4 hours ago    | parent  [–]      That's a very good question. So the DSL here operates an agnostic source/dest transaction model, which is akin to the credit/debit model sans the semantic baggage. The goal of this model is indeed to be \"tracking transactions\" in the abstract sense, having the benefit of not forcing accounting decisions too early on when there is (still yet) none. For example, if you create a transaction moving money from \"@stripe:main\" to \"@acct:123\" and \"@acct:234\", you're merely representing the fact that you want this money to be moved. Wether the movement is clearing off a liability or generating revenue is another concern that you (in our model) want to take care of in a separate layer, that will also likely involve some intense intentionality and iterations from your accounting team. In a sense, it's as close to accounting than it is to warehousing money, moving unitary boxes of it from one location to another. These two models have the same amount of information per entry, so they can actually be converted from one to another, enabling you to also represent some accounting-ish transactions with this DSL, e.g. with a send [USD/2 100] from @ar:invoices:1234 to @sales.    reply    superzamp  4 hours ago    | parent  [–]     superzamp  4 hours ago    | parent  [–]    superzamp 4 hours ago 4 hours ago | parent  [–]   parent [–]  That's a very good question. So the DSL here operates an agnostic source/dest transaction model, which is akin to the credit/debit model sans the semantic baggage. The goal of this model is indeed to be \"tracking transactions\" in the abstract sense, having the benefit of not forcing accounting decisions too early on when there is (still yet) none. For example, if you create a transaction moving money from \"@stripe:main\" to \"@acct:123\" and \"@acct:234\", you're merely representing the fact that you want this money to be moved. Wether the movement is clearing off a liability or generating revenue is another concern that you (in our model) want to take care of in a separate layer, that will also likely involve some intense intentionality and iterations from your accounting team. In a sense, it's as close to accounting than it is to warehousing money, moving unitary boxes of it from one location to another. These two models have the same amount of information per entry, so they can actually be converted from one to another, enabling you to also represent some accounting-ish transactions with this DSL, e.g. with a send [USD/2 100] from @ar:invoices:1234 to @sales.    reply   That's a very good question. So the DSL here operates an agnostic source/dest transaction model, which is akin to the credit/debit model sans the semantic baggage. The goal of this model is indeed to be \"tracking transactions\" in the abstract sense, having the benefit of not forcing accounting decisions too early on when there is (still yet) none. For example, if you create a transaction moving money from \"@stripe:main\" to \"@acct:123\" and \"@acct:234\", you're merely representing the fact that you want this money to be moved. Wether the movement is clearing off a liability or generating revenue is another concern that you (in our model) want to take care of in a separate layer, that will also likely involve some intense intentionality and iterations from your accounting team. In a sense, it's as close to accounting than it is to warehousing money, moving unitary boxes of it from one location to another. These two models have the same amount of information per entry, so they can actually be converted from one to another, enabling you to also represent some accounting-ish transactions with this DSL, e.g. with a send [USD/2 100] from @ar:invoices:1234 to @sales. For example, if you create a transaction moving money from \"@stripe:main\" to \"@acct:123\" and \"@acct:234\", you're merely representing the fact that you want this money to be moved. Wether the movement is clearing off a liability or generating revenue is another concern that you (in our model) want to take care of in a separate layer, that will also likely involve some intense intentionality and iterations from your accounting team. In a sense, it's as close to accounting than it is to warehousing money, moving unitary boxes of it from one location to another. These two models have the same amount of information per entry, so they can actually be converted from one to another, enabling you to also represent some accounting-ish transactions with this DSL, e.g. with a send [USD/2 100] from @ar:invoices:1234 to @sales.   reply    reply    reply  reply reply        mamidon  2 hours ago    | root | parent | next  [–]      I'm living this life right now; except we baked in notions of Assets/Liabilities/Income/Expenses into our ledger logic.  Only to realize our customers don't care and just want to do whatever it is they've been doing.    reply           mamidon  2 hours ago    | root | parent | next  [–]      I'm living this life right now; except we baked in notions of Assets/Liabilities/Income/Expenses into our ledger logic.  Only to realize our customers don't care and just want to do whatever it is they've been doing.    reply           mamidon  2 hours ago    | root | parent | next  [–]      I'm living this life right now; except we baked in notions of Assets/Liabilities/Income/Expenses into our ledger logic.  Only to realize our customers don't care and just want to do whatever it is they've been doing.    reply          mamidon  2 hours ago    | root | parent | next  [–]      I'm living this life right now; except we baked in notions of Assets/Liabilities/Income/Expenses into our ledger logic.  Only to realize our customers don't care and just want to do whatever it is they've been doing.    reply          mamidon  2 hours ago    | root | parent | next  [–]      I'm living this life right now; except we baked in notions of Assets/Liabilities/Income/Expenses into our ledger logic.  Only to realize our customers don't care and just want to do whatever it is they've been doing.    reply          mamidon  2 hours ago    | root | parent | next  [–]      I'm living this life right now; except we baked in notions of Assets/Liabilities/Income/Expenses into our ledger logic.  Only to realize our customers don't care and just want to do whatever it is they've been doing.    reply    mamidon  2 hours ago    | root | parent | next  [–]     mamidon  2 hours ago    | root | parent | next  [–]    mamidon 2 hours ago 2 hours ago | root | parent | next  [–]   root parent next [–]  I'm living this life right now; except we baked in notions of Assets/Liabilities/Income/Expenses into our ledger logic.  Only to realize our customers don't care and just want to do whatever it is they've been doing.    reply   I'm living this life right now; except we baked in notions of Assets/Liabilities/Income/Expenses into our ledger logic.  Only to realize our customers don't care and just want to do whatever it is they've been doing.   reply    reply    reply  reply reply        bbor  3 hours ago    | root | parent | prev  [–]      Fascinating, thanks for taking the time to educate! Makes sense to me — it seems this tool is purpose built for situations where tracking is complex enough to deserve decoupling from annotating or interpreting , to put it in my own kindergarten terms. I don’t have a need for this personally but I’ll definitely be bouncing this around in my head for a while, both technically (JS ALL the things!) and methodologically. Accounting is pretty trivial when you don’t have any income to track!    reply           bbor  3 hours ago    | root | parent | prev  [–]      Fascinating, thanks for taking the time to educate! Makes sense to me — it seems this tool is purpose built for situations where tracking is complex enough to deserve decoupling from annotating or interpreting , to put it in my own kindergarten terms. I don’t have a need for this personally but I’ll definitely be bouncing this around in my head for a while, both technically (JS ALL the things!) and methodologically. Accounting is pretty trivial when you don’t have any income to track!    reply           bbor  3 hours ago    | root | parent | prev  [–]      Fascinating, thanks for taking the time to educate! Makes sense to me — it seems this tool is purpose built for situations where tracking is complex enough to deserve decoupling from annotating or interpreting , to put it in my own kindergarten terms. I don’t have a need for this personally but I’ll definitely be bouncing this around in my head for a while, both technically (JS ALL the things!) and methodologically. Accounting is pretty trivial when you don’t have any income to track!    reply          bbor  3 hours ago    | root | parent | prev  [–]      Fascinating, thanks for taking the time to educate! Makes sense to me — it seems this tool is purpose built for situations where tracking is complex enough to deserve decoupling from annotating or interpreting , to put it in my own kindergarten terms. I don’t have a need for this personally but I’ll definitely be bouncing this around in my head for a while, both technically (JS ALL the things!) and methodologically. Accounting is pretty trivial when you don’t have any income to track!    reply          bbor  3 hours ago    | root | parent | prev  [–]      Fascinating, thanks for taking the time to educate! Makes sense to me — it seems this tool is purpose built for situations where tracking is complex enough to deserve decoupling from annotating or interpreting , to put it in my own kindergarten terms. I don’t have a need for this personally but I’ll definitely be bouncing this around in my head for a while, both technically (JS ALL the things!) and methodologically. Accounting is pretty trivial when you don’t have any income to track!    reply          bbor  3 hours ago    | root | parent | prev  [–]      Fascinating, thanks for taking the time to educate! Makes sense to me — it seems this tool is purpose built for situations where tracking is complex enough to deserve decoupling from annotating or interpreting , to put it in my own kindergarten terms. I don’t have a need for this personally but I’ll definitely be bouncing this around in my head for a while, both technically (JS ALL the things!) and methodologically. Accounting is pretty trivial when you don’t have any income to track!    reply    bbor  3 hours ago    | root | parent | prev  [–]     bbor  3 hours ago    | root | parent | prev  [–]    bbor 3 hours ago 3 hours ago | root | parent | prev  [–]   root parent prev [–]  Fascinating, thanks for taking the time to educate! Makes sense to me — it seems this tool is purpose built for situations where tracking is complex enough to deserve decoupling from annotating or interpreting , to put it in my own kindergarten terms. I don’t have a need for this personally but I’ll definitely be bouncing this around in my head for a while, both technically (JS ALL the things!) and methodologically. Accounting is pretty trivial when you don’t have any income to track!    reply   Fascinating, thanks for taking the time to educate! Makes sense to me — it seems this tool is purpose built for situations where tracking is complex enough to deserve decoupling from annotating or interpreting , to put it in my own kindergarten terms. I don’t have a need for this personally but I’ll definitely be bouncing this around in my head for a while, both technically (JS ALL the things!) and methodologically. Accounting is pretty trivial when you don’t have any income to track! tracking annotating interpreting I don’t have a need for this personally but I’ll definitely be bouncing this around in my head for a while, both technically (JS ALL the things!) and methodologically. Accounting is pretty trivial when you don’t have any income to track! ALL   reply    reply    reply  reply reply     Guidelines | FAQ | Lists | API | Security | Legal | Apply to YC | Contact    Search:      Guidelines | FAQ | Lists | API | Security | Legal | Apply to YC | Contact    Search:     Guidelines | FAQ | Lists | API | Security | Legal | Apply to YC | Contact    Search:  Guidelines | FAQ | Lists | API | Security | Legal | Apply to YC | Contact Guidelines FAQ Lists API Security Legal Apply to YC Contact Search: ",
  "links": [
    {
      "id": 1,
      "url": "https://news.ycombinator.com/",
      "html": "<a href=\"https://news.ycombinator.com\"><img src=\"y18.svg\" width=\"18\" height=\"18\" style=\"border:1px white solid; display:block\"></a>",
      "text": ""
    },
    {
      "id": 2,
      "url": "https://news.ycombinator.com/news",
      "html": "<a href=\"news\">Hacker News</a>",
      "text": "Hacker News"
    },
    {
      "id": 3,
      "url": "https://news.ycombinator.com/newest",
      "html": "<a href=\"newest\">new</a>",
      "text": "new"
    },
    {
      "id": 4,
      "url": "https://news.ycombinator.com/front",
      "html": "<a href=\"front\">past</a>",
      "text": "past"
    },
    {
      "id": 5,
      "url": "https://news.ycombinator.com/newcomments",
      "html": "<a href=\"newcomments\">comments</a>",
      "text": "comments"
    },
    {
      "id": 6,
      "url": "https://news.ycombinator.com/ask",
      "html": "<a href=\"ask\">ask</a>",
      "text": "ask"
    },
    {
      "id": 7,
      "url": "https://news.ycombinator.com/show",
      "html": "<a href=\"show\">show</a>",
      "text": "show"
    },
    {
      "id": 8,
      "url": "https://news.ycombinator.com/jobs",
      "html": "<a href=\"jobs\">jobs</a>",
      "text": "jobs"
    },
    {
      "id": 9,
      "url": "https://news.ycombinator.com/submit",
      "html": "<a href=\"submit\" rel=\"nofollow\">submit</a>",
      "text": "submit"
    },
    {
      "id": 10,
      "url": "https://news.ycombinator.com/login?goto=item%3Fid%3D41593216",
      "html": "<a href=\"login?goto=item%3Fid%3D41593216\">login</a>",
      "text": "login"
    },
    {
      "id": 11,
      "url": "https://news.ycombinator.com/vote?id=41593216&how=up&goto=item%3Fid%3D41593216",
      "html": "<a id=\"up_41593216\" href=\"vote?id=41593216&amp;how=up&amp;goto=item%3Fid%3D41593216\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 12,
      "url": "https://playground.numscript.org/",
      "html": "<a href=\"https://playground.numscript.org/\">Show HN: Numscript, a declarative language to model financial transactions</a>",
      "text": "Show HN: Numscript, a declarative language to model financial transactions"
    },
    {
      "id": 13,
      "url": "https://news.ycombinator.com/from?site=numscript.org",
      "html": "<a href=\"from?site=numscript.org\"><span class=\"sitestr\">numscript.org</span></a>",
      "text": "numscript.org"
    },
    {
      "id": 14,
      "url": "https://news.ycombinator.com/user?id=superzamp",
      "html": "<a href=\"user?id=superzamp\" class=\"hnuser\">superzamp</a>",
      "text": "superzamp"
    },
    {
      "id": 15,
      "url": "https://news.ycombinator.com/item?id=41593216",
      "html": "<a href=\"item?id=41593216\">6 hours ago</a>",
      "text": "6 hours ago"
    },
    {
      "id": 16,
      "url": "https://news.ycombinator.com/hide?id=41593216&goto=item%3Fid%3D41593216",
      "html": "<a href=\"hide?id=41593216&amp;goto=item%3Fid%3D41593216\">hide</a>",
      "text": "hide"
    },
    {
      "id": 17,
      "url": "https://hn.algolia.com/?query=Show%20HN%3A%20Numscript%2C%20a%20declarative%20language%20to%20model%20financial%20transactions&type=story&dateRange=all&sort=byDate&storyText=false&prefix&page=0",
      "html": "<a href=\"https://hn.algolia.com/?query=Show%20HN%3A%20Numscript%2C%20a%20declarative%20language%20to%20model%20financial%20transactions&amp;type=story&amp;dateRange=all&amp;sort=byDate&amp;storyText=false&amp;prefix&amp;page=0\" class=\"hnpast\">past</a>",
      "text": "past"
    },
    {
      "id": 18,
      "url": "https://news.ycombinator.com/fave?id=41593216&auth=74e12ba9d7e4fe7c74c573c6c7a914df7c118e30",
      "html": "<a href=\"fave?id=41593216&amp;auth=74e12ba9d7e4fe7c74c573c6c7a914df7c118e30\">favorite</a>",
      "text": "favorite"
    },
    {
      "id": 19,
      "url": "https://news.ycombinator.com/item?id=41593216",
      "html": "<a href=\"item?id=41593216\">22&nbsp;comments</a>",
      "text": "22 comments"
    },
    {
      "id": 20,
      "url": "https://playground.numscript.org/",
      "html": "<a href=\"https://playground.numscript.org/\" rel=\"nofollow\">https://playground.numscript.org/</a>",
      "text": "https://playground.numscript.org/"
    },
    {
      "id": 21,
      "url": "https://news.ycombinator.com/vote?id=41594311&how=up&goto=item%3Fid%3D41593216",
      "html": "<a id=\"up_41594311\" href=\"vote?id=41594311&amp;how=up&amp;goto=item%3Fid%3D41593216\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 22,
      "url": "https://news.ycombinator.com/user?id=abdullahkhalids",
      "html": "<a href=\"user?id=abdullahkhalids\" class=\"hnuser\">abdullahkhalids</a>",
      "text": "abdullahkhalids"
    },
    {
      "id": 23,
      "url": "https://news.ycombinator.com/item?id=41594311",
      "html": "<a href=\"item?id=41594311\">5 hours ago</a>",
      "text": "5 hours ago"
    },
    {
      "id": 24,
      "url": "https://news.ycombinator.com/item?id=41593216#41593946",
      "html": "<a href=\"#41593946\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 25,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41594311\" n=\"5\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 26,
      "url": "https://www.canada.ca/en/revenue-agency/programs/about-canada-revenue-agency-cra/phasing-penny.html",
      "html": "<a href=\"https://www.canada.ca/en/revenue-agency/programs/about-canada-revenue-agency-cra/phasing-penny.html\" rel=\"nofollow\">https://www.canada.ca/en/revenue-agency/programs/about-canad...</a>",
      "text": "https://www.canada.ca/en/revenue-agency/programs/about-canad..."
    },
    {
      "id": 27,
      "url": "https://news.ycombinator.com/reply?id=41594311&goto=item%3Fid%3D41593216%2341594311",
      "html": "<a href=\"reply?id=41594311&amp;goto=item%3Fid%3D41593216%2341594311\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 28,
      "url": "https://news.ycombinator.com/vote?id=41595174&how=up&goto=item%3Fid%3D41593216",
      "html": "<a id=\"up_41595174\" href=\"vote?id=41595174&amp;how=up&amp;goto=item%3Fid%3D41593216\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 29,
      "url": "https://news.ycombinator.com/user?id=superzamp",
      "html": "<a href=\"user?id=superzamp\" class=\"hnuser\">superzamp</a>",
      "text": "superzamp"
    },
    {
      "id": 30,
      "url": "https://news.ycombinator.com/item?id=41595174",
      "html": "<a href=\"item?id=41595174\">3 hours ago</a>",
      "text": "3 hours ago"
    },
    {
      "id": 31,
      "url": "https://news.ycombinator.com/item?id=41593216#41594311",
      "html": "<a href=\"#41594311\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 32,
      "url": "https://news.ycombinator.com/item?id=41593216#41595633",
      "html": "<a href=\"#41595633\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 33,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41595174\" n=\"3\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 34,
      "url": "https://news.ycombinator.com/reply?id=41595174&goto=item%3Fid%3D41593216%2341595174",
      "html": "<a href=\"reply?id=41595174&amp;goto=item%3Fid%3D41593216%2341595174\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 35,
      "url": "https://news.ycombinator.com/vote?id=41595230&how=up&goto=item%3Fid%3D41593216",
      "html": "<a id=\"up_41595230\" href=\"vote?id=41595230&amp;how=up&amp;goto=item%3Fid%3D41593216\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 36,
      "url": "https://news.ycombinator.com/user?id=fallat",
      "html": "<a href=\"user?id=fallat\" class=\"hnuser\">fallat</a>",
      "text": "fallat"
    },
    {
      "id": 37,
      "url": "https://news.ycombinator.com/item?id=41595230",
      "html": "<a href=\"item?id=41595230\">3 hours ago</a>",
      "text": "3 hours ago"
    },
    {
      "id": 38,
      "url": "https://news.ycombinator.com/item?id=41593216#41594311",
      "html": "<a href=\"#41594311\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 39,
      "url": "https://news.ycombinator.com/item?id=41593216#41595174",
      "html": "<a href=\"#41595174\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 40,
      "url": "https://news.ycombinator.com/item?id=41593216#41595633",
      "html": "<a href=\"#41595633\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 41,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41595230\" n=\"2\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 42,
      "url": "https://news.ycombinator.com/reply?id=41595230&goto=item%3Fid%3D41593216%2341595230",
      "html": "<a href=\"reply?id=41595230&amp;goto=item%3Fid%3D41593216%2341595230\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 43,
      "url": "https://news.ycombinator.com/vote?id=41595344&how=up&goto=item%3Fid%3D41593216",
      "html": "<a id=\"up_41595344\" href=\"vote?id=41595344&amp;how=up&amp;goto=item%3Fid%3D41593216\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 44,
      "url": "https://news.ycombinator.com/user?id=superzamp",
      "html": "<a href=\"user?id=superzamp\" class=\"hnuser\">superzamp</a>",
      "text": "superzamp"
    },
    {
      "id": 45,
      "url": "https://news.ycombinator.com/item?id=41595344",
      "html": "<a href=\"item?id=41595344\">3 hours ago</a>",
      "text": "3 hours ago"
    },
    {
      "id": 46,
      "url": "https://news.ycombinator.com/item?id=41593216#41594311",
      "html": "<a href=\"#41594311\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 47,
      "url": "https://news.ycombinator.com/item?id=41593216#41595230",
      "html": "<a href=\"#41595230\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 48,
      "url": "https://news.ycombinator.com/item?id=41593216#41595633",
      "html": "<a href=\"#41595633\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 49,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41595344\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 50,
      "url": "https://news.ycombinator.com/reply?id=41595344&goto=item%3Fid%3D41593216%2341595344",
      "html": "<a href=\"reply?id=41595344&amp;goto=item%3Fid%3D41593216%2341595344\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 51,
      "url": "https://news.ycombinator.com/vote?id=41595633&how=up&goto=item%3Fid%3D41593216",
      "html": "<a id=\"up_41595633\" href=\"vote?id=41595633&amp;how=up&amp;goto=item%3Fid%3D41593216\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 52,
      "url": "https://news.ycombinator.com/user?id=euroderf",
      "html": "<a href=\"user?id=euroderf\" class=\"hnuser\">euroderf</a>",
      "text": "euroderf"
    },
    {
      "id": 53,
      "url": "https://news.ycombinator.com/item?id=41595633",
      "html": "<a href=\"item?id=41595633\">3 hours ago</a>",
      "text": "3 hours ago"
    },
    {
      "id": 54,
      "url": "https://news.ycombinator.com/item?id=41593216#41594311",
      "html": "<a href=\"#41594311\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 55,
      "url": "https://news.ycombinator.com/item?id=41593216#41595174",
      "html": "<a href=\"#41595174\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 56,
      "url": "https://news.ycombinator.com/item?id=41593216#41593946",
      "html": "<a href=\"#41593946\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 57,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41595633\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 58,
      "url": "https://news.ycombinator.com/reply?id=41595633&goto=item%3Fid%3D41593216%2341595633",
      "html": "<a href=\"reply?id=41595633&amp;goto=item%3Fid%3D41593216%2341595633\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 59,
      "url": "https://news.ycombinator.com/vote?id=41593946&how=up&goto=item%3Fid%3D41593216",
      "html": "<a id=\"up_41593946\" href=\"vote?id=41593946&amp;how=up&amp;goto=item%3Fid%3D41593216\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 60,
      "url": "https://news.ycombinator.com/user?id=vslira",
      "html": "<a href=\"user?id=vslira\" class=\"hnuser\">vslira</a>",
      "text": "vslira"
    },
    {
      "id": 61,
      "url": "https://news.ycombinator.com/item?id=41593946",
      "html": "<a href=\"item?id=41593946\">5 hours ago</a>",
      "text": "5 hours ago"
    },
    {
      "id": 62,
      "url": "https://news.ycombinator.com/item?id=41593216#41594311",
      "html": "<a href=\"#41594311\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 63,
      "url": "https://news.ycombinator.com/item?id=41593216#41595699",
      "html": "<a href=\"#41595699\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 64,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41593946\" n=\"2\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 65,
      "url": "https://news.ycombinator.com/reply?id=41593946&goto=item%3Fid%3D41593216%2341593946",
      "html": "<a href=\"reply?id=41593946&amp;goto=item%3Fid%3D41593216%2341593946\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 66,
      "url": "https://news.ycombinator.com/vote?id=41594071&how=up&goto=item%3Fid%3D41593216",
      "html": "<a id=\"up_41594071\" href=\"vote?id=41594071&amp;how=up&amp;goto=item%3Fid%3D41593216\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 67,
      "url": "https://news.ycombinator.com/user?id=superzamp",
      "html": "<a href=\"user?id=superzamp\" class=\"hnuser\">superzamp</a>",
      "text": "superzamp"
    },
    {
      "id": 68,
      "url": "https://news.ycombinator.com/item?id=41594071",
      "html": "<a href=\"item?id=41594071\">5 hours ago</a>",
      "text": "5 hours ago"
    },
    {
      "id": 69,
      "url": "https://news.ycombinator.com/item?id=41593216#41593946",
      "html": "<a href=\"#41593946\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 70,
      "url": "https://news.ycombinator.com/item?id=41593216#41595699",
      "html": "<a href=\"#41595699\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 71,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41594071\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 72,
      "url": "https://github.com/formancehq/stack/tree/main/components/ledger/internal/machine",
      "html": "<a href=\"https://github.com/formancehq/stack/tree/main/components/ledger/internal/machine\">https://github.com/formancehq/stack/tree/main/components/led...</a>",
      "text": "https://github.com/formancehq/stack/tree/main/components/led..."
    },
    {
      "id": 73,
      "url": "https://github.com/formancehq/numscript",
      "html": "<a href=\"https://github.com/formancehq/numscript\">https://github.com/formancehq/numscript</a>",
      "text": "https://github.com/formancehq/numscript"
    },
    {
      "id": 74,
      "url": "https://news.ycombinator.com/reply?id=41594071&goto=item%3Fid%3D41593216%2341594071",
      "html": "<a href=\"reply?id=41594071&amp;goto=item%3Fid%3D41593216%2341594071\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 75,
      "url": "https://news.ycombinator.com/vote?id=41595699&how=up&goto=item%3Fid%3D41593216",
      "html": "<a id=\"up_41595699\" href=\"vote?id=41595699&amp;how=up&amp;goto=item%3Fid%3D41593216\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 76,
      "url": "https://news.ycombinator.com/user?id=OutOfHere",
      "html": "<a href=\"user?id=OutOfHere\" class=\"hnuser\">OutOfHere</a>",
      "text": "OutOfHere"
    },
    {
      "id": 77,
      "url": "https://news.ycombinator.com/item?id=41595699",
      "html": "<a href=\"item?id=41595699\">3 hours ago</a>",
      "text": "3 hours ago"
    },
    {
      "id": 78,
      "url": "https://news.ycombinator.com/item?id=41593216#41593946",
      "html": "<a href=\"#41593946\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 79,
      "url": "https://news.ycombinator.com/item?id=41593216#41593639",
      "html": "<a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 80,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41595699\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 81,
      "url": "https://news.ycombinator.com/reply?id=41595699&goto=item%3Fid%3D41593216%2341595699",
      "html": "<a href=\"reply?id=41595699&amp;goto=item%3Fid%3D41593216%2341595699\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 82,
      "url": "https://news.ycombinator.com/vote?id=41593639&how=up&goto=item%3Fid%3D41593216",
      "html": "<a id=\"up_41593639\" href=\"vote?id=41593639&amp;how=up&amp;goto=item%3Fid%3D41593216\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 83,
      "url": "https://news.ycombinator.com/user?id=robk",
      "html": "<a href=\"user?id=robk\" class=\"hnuser\">robk</a>",
      "text": "robk"
    },
    {
      "id": 84,
      "url": "https://news.ycombinator.com/item?id=41593639",
      "html": "<a href=\"item?id=41593639\">6 hours ago</a>",
      "text": "6 hours ago"
    },
    {
      "id": 85,
      "url": "https://news.ycombinator.com/item?id=41593216#41595699",
      "html": "<a href=\"#41595699\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 86,
      "url": "https://news.ycombinator.com/item?id=41593216#41595127",
      "html": "<a href=\"#41595127\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 87,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41593639\" n=\"8\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 88,
      "url": "https://news.ycombinator.com/reply?id=41593639&goto=item%3Fid%3D41593216%2341593639",
      "html": "<a href=\"reply?id=41593639&amp;goto=item%3Fid%3D41593216%2341593639\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 89,
      "url": "https://news.ycombinator.com/vote?id=41593756&how=up&goto=item%3Fid%3D41593216",
      "html": "<a id=\"up_41593756\" href=\"vote?id=41593756&amp;how=up&amp;goto=item%3Fid%3D41593216\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 90,
      "url": "https://news.ycombinator.com/user?id=superzamp",
      "html": "<a href=\"user?id=superzamp\" class=\"hnuser\">superzamp</a>",
      "text": "superzamp"
    },
    {
      "id": 91,
      "url": "https://news.ycombinator.com/item?id=41593756",
      "html": "<a href=\"item?id=41593756\">6 hours ago</a>",
      "text": "6 hours ago"
    },
    {
      "id": 92,
      "url": "https://news.ycombinator.com/item?id=41593216#41593639",
      "html": "<a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 93,
      "url": "https://news.ycombinator.com/item?id=41593216#41595127",
      "html": "<a href=\"#41595127\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 94,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41593756\" n=\"7\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 95,
      "url": "https://docs.formance.com/stack/unambiguous-monetary-notation",
      "html": "<a href=\"https://docs.formance.com/stack/unambiguous-monetary-notation\">https://docs.formance.com/stack/unambiguous-monetary-notatio...</a>",
      "text": "https://docs.formance.com/stack/unambiguous-monetary-notatio..."
    },
    {
      "id": 96,
      "url": "https://news.ycombinator.com/reply?id=41593756&goto=item%3Fid%3D41593216%2341593756",
      "html": "<a href=\"reply?id=41593756&amp;goto=item%3Fid%3D41593216%2341593756\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 97,
      "url": "https://news.ycombinator.com/vote?id=41596932&how=up&goto=item%3Fid%3D41593216",
      "html": "<a id=\"up_41596932\" href=\"vote?id=41596932&amp;how=up&amp;goto=item%3Fid%3D41593216\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 98,
      "url": "https://news.ycombinator.com/user?id=girvo",
      "html": "<a href=\"user?id=girvo\" class=\"hnuser\">girvo</a>",
      "text": "girvo"
    },
    {
      "id": 99,
      "url": "https://news.ycombinator.com/item?id=41596932",
      "html": "<a href=\"item?id=41596932\">39 minutes ago</a>",
      "text": "39 minutes ago"
    },
    {
      "id": 100,
      "url": "https://news.ycombinator.com/item?id=41593216#41593639",
      "html": "<a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 101,
      "url": "https://news.ycombinator.com/item?id=41593216#41593756",
      "html": "<a href=\"#41593756\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 102,
      "url": "https://news.ycombinator.com/item?id=41593216#41594568",
      "html": "<a href=\"#41594568\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 103,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41596932\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 104,
      "url": "https://news.ycombinator.com/reply?id=41596932&goto=item%3Fid%3D41593216%2341596932",
      "html": "<a href=\"reply?id=41596932&amp;goto=item%3Fid%3D41593216%2341596932\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 105,
      "url": "https://news.ycombinator.com/vote?id=41594568&how=up&goto=item%3Fid%3D41593216",
      "html": "<a id=\"up_41594568\" href=\"vote?id=41594568&amp;how=up&amp;goto=item%3Fid%3D41593216\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 106,
      "url": "https://news.ycombinator.com/user?id=tway_GdBRwW",
      "html": "<a href=\"user?id=tway_GdBRwW\" class=\"hnuser\">tway_GdBRwW</a>",
      "text": "tway_GdBRwW"
    },
    {
      "id": 107,
      "url": "https://news.ycombinator.com/item?id=41594568",
      "html": "<a href=\"item?id=41594568\">4 hours ago</a>",
      "text": "4 hours ago"
    },
    {
      "id": 108,
      "url": "https://news.ycombinator.com/item?id=41593216#41593639",
      "html": "<a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 109,
      "url": "https://news.ycombinator.com/item?id=41593216#41593756",
      "html": "<a href=\"#41593756\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 110,
      "url": "https://news.ycombinator.com/item?id=41593216#41596932",
      "html": "<a href=\"#41596932\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 111,
      "url": "https://news.ycombinator.com/item?id=41593216#41594216",
      "html": "<a href=\"#41594216\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 112,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41594568\" n=\"2\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 113,
      "url": "https://news.ycombinator.com/reply?id=41594568&goto=item%3Fid%3D41593216%2341594568",
      "html": "<a href=\"reply?id=41594568&amp;goto=item%3Fid%3D41593216%2341594568\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 114,
      "url": "https://news.ycombinator.com/vote?id=41595671&how=up&goto=item%3Fid%3D41593216",
      "html": "<a id=\"up_41595671\" href=\"vote?id=41595671&amp;how=up&amp;goto=item%3Fid%3D41593216\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 115,
      "url": "https://news.ycombinator.com/user?id=euroderf",
      "html": "<a href=\"user?id=euroderf\" class=\"hnuser\">euroderf</a>",
      "text": "euroderf"
    },
    {
      "id": 116,
      "url": "https://news.ycombinator.com/item?id=41595671",
      "html": "<a href=\"item?id=41595671\">3 hours ago</a>",
      "text": "3 hours ago"
    },
    {
      "id": 117,
      "url": "https://news.ycombinator.com/item?id=41593216#41593639",
      "html": "<a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 118,
      "url": "https://news.ycombinator.com/item?id=41593216#41594568",
      "html": "<a href=\"#41594568\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 119,
      "url": "https://news.ycombinator.com/item?id=41593216#41594216",
      "html": "<a href=\"#41594216\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 120,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41595671\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 121,
      "url": "https://news.ycombinator.com/reply?id=41595671&goto=item%3Fid%3D41593216%2341595671",
      "html": "<a href=\"reply?id=41595671&amp;goto=item%3Fid%3D41593216%2341595671\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 122,
      "url": "https://news.ycombinator.com/vote?id=41594216&how=up&goto=item%3Fid%3D41593216",
      "html": "<a id=\"up_41594216\" href=\"vote?id=41594216&amp;how=up&amp;goto=item%3Fid%3D41593216\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 123,
      "url": "https://news.ycombinator.com/user?id=flockonus",
      "html": "<a href=\"user?id=flockonus\" class=\"hnuser\">flockonus</a>",
      "text": "flockonus"
    },
    {
      "id": 124,
      "url": "https://news.ycombinator.com/item?id=41594216",
      "html": "<a href=\"item?id=41594216\">5 hours ago</a>",
      "text": "5 hours ago"
    },
    {
      "id": 125,
      "url": "https://news.ycombinator.com/item?id=41593216#41593639",
      "html": "<a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 126,
      "url": "https://news.ycombinator.com/item?id=41593216#41593756",
      "html": "<a href=\"#41593756\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 127,
      "url": "https://news.ycombinator.com/item?id=41593216#41594568",
      "html": "<a href=\"#41594568\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 128,
      "url": "https://news.ycombinator.com/item?id=41593216#41595127",
      "html": "<a href=\"#41595127\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 129,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41594216\" n=\"3\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 130,
      "url": "https://news.ycombinator.com/reply?id=41594216&goto=item%3Fid%3D41593216%2341594216",
      "html": "<a href=\"reply?id=41594216&amp;goto=item%3Fid%3D41593216%2341594216\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 131,
      "url": "https://news.ycombinator.com/vote?id=41594255&how=up&goto=item%3Fid%3D41593216",
      "html": "<a id=\"up_41594255\" href=\"vote?id=41594255&amp;how=up&amp;goto=item%3Fid%3D41593216\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 132,
      "url": "https://news.ycombinator.com/user?id=bbor",
      "html": "<a href=\"user?id=bbor\" class=\"hnuser\">bbor</a>",
      "text": "bbor"
    },
    {
      "id": 133,
      "url": "https://news.ycombinator.com/item?id=41594255",
      "html": "<a href=\"item?id=41594255\">5 hours ago</a>",
      "text": "5 hours ago"
    },
    {
      "id": 134,
      "url": "https://news.ycombinator.com/item?id=41593216#41593639",
      "html": "<a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 135,
      "url": "https://news.ycombinator.com/item?id=41593216#41594216",
      "html": "<a href=\"#41594216\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 136,
      "url": "https://news.ycombinator.com/item?id=41593216#41594543",
      "html": "<a href=\"#41594543\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 137,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41594255\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 138,
      "url": "https://news.ycombinator.com/reply?id=41594255&goto=item%3Fid%3D41593216%2341594255",
      "html": "<a href=\"reply?id=41594255&amp;goto=item%3Fid%3D41593216%2341594255\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 139,
      "url": "https://news.ycombinator.com/vote?id=41594543&how=up&goto=item%3Fid%3D41593216",
      "html": "<a id=\"up_41594543\" href=\"vote?id=41594543&amp;how=up&amp;goto=item%3Fid%3D41593216\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 140,
      "url": "https://news.ycombinator.com/user?id=petesergeant",
      "html": "<a href=\"user?id=petesergeant\" class=\"hnuser\">petesergeant</a>",
      "text": "petesergeant"
    },
    {
      "id": 141,
      "url": "https://news.ycombinator.com/item?id=41594543",
      "html": "<a href=\"item?id=41594543\">4 hours ago</a>",
      "text": "4 hours ago"
    },
    {
      "id": 142,
      "url": "https://news.ycombinator.com/item?id=41593216#41593639",
      "html": "<a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 143,
      "url": "https://news.ycombinator.com/item?id=41593216#41594216",
      "html": "<a href=\"#41594216\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 144,
      "url": "https://news.ycombinator.com/item?id=41593216#41594255",
      "html": "<a href=\"#41594255\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 145,
      "url": "https://news.ycombinator.com/item?id=41593216#41595127",
      "html": "<a href=\"#41595127\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 146,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41594543\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 147,
      "url": "https://news.ycombinator.com/reply?id=41594543&goto=item%3Fid%3D41593216%2341594543",
      "html": "<a href=\"reply?id=41594543&amp;goto=item%3Fid%3D41593216%2341594543\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 148,
      "url": "https://news.ycombinator.com/vote?id=41595127&how=up&goto=item%3Fid%3D41593216",
      "html": "<a id=\"up_41595127\" href=\"vote?id=41595127&amp;how=up&amp;goto=item%3Fid%3D41593216\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 149,
      "url": "https://news.ycombinator.com/user?id=jimbokun",
      "html": "<a href=\"user?id=jimbokun\" class=\"hnuser\">jimbokun</a>",
      "text": "jimbokun"
    },
    {
      "id": 150,
      "url": "https://news.ycombinator.com/item?id=41595127",
      "html": "<a href=\"item?id=41595127\">3 hours ago</a>",
      "text": "3 hours ago"
    },
    {
      "id": 151,
      "url": "https://news.ycombinator.com/item?id=41593216#41593639",
      "html": "<a href=\"#41593639\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 152,
      "url": "https://news.ycombinator.com/item?id=41593216#41596494",
      "html": "<a href=\"#41596494\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 153,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41595127\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 154,
      "url": "https://news.ycombinator.com/reply?id=41595127&goto=item%3Fid%3D41593216%2341595127",
      "html": "<a href=\"reply?id=41595127&amp;goto=item%3Fid%3D41593216%2341595127\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 155,
      "url": "https://news.ycombinator.com/vote?id=41596494&how=up&goto=item%3Fid%3D41593216",
      "html": "<a id=\"up_41596494\" href=\"vote?id=41596494&amp;how=up&amp;goto=item%3Fid%3D41593216\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 156,
      "url": "https://news.ycombinator.com/user?id=henning",
      "html": "<a href=\"user?id=henning\" class=\"hnuser\">henning</a>",
      "text": "henning"
    },
    {
      "id": 157,
      "url": "https://news.ycombinator.com/item?id=41596494",
      "html": "<a href=\"item?id=41596494\">1 hour ago</a>",
      "text": "1 hour ago"
    },
    {
      "id": 158,
      "url": "https://news.ycombinator.com/item?id=41593216#41595127",
      "html": "<a href=\"#41595127\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 159,
      "url": "https://news.ycombinator.com/item?id=41593216#41594224",
      "html": "<a href=\"#41594224\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 160,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41596494\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 161,
      "url": "https://news.ycombinator.com/reply?id=41596494&goto=item%3Fid%3D41593216%2341596494",
      "html": "<a href=\"reply?id=41596494&amp;goto=item%3Fid%3D41593216%2341596494\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 162,
      "url": "https://news.ycombinator.com/vote?id=41594224&how=up&goto=item%3Fid%3D41593216",
      "html": "<a id=\"up_41594224\" href=\"vote?id=41594224&amp;how=up&amp;goto=item%3Fid%3D41593216\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 163,
      "url": "https://news.ycombinator.com/user?id=bbor",
      "html": "<a href=\"user?id=bbor\" class=\"hnuser\">bbor</a>",
      "text": "bbor"
    },
    {
      "id": 164,
      "url": "https://news.ycombinator.com/item?id=41594224",
      "html": "<a href=\"item?id=41594224\">5 hours ago</a>",
      "text": "5 hours ago"
    },
    {
      "id": 165,
      "url": "https://news.ycombinator.com/item?id=41593216#41596494",
      "html": "<a href=\"#41596494\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 166,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41594224\" n=\"4\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 167,
      "url": "https://beancount.github.io/docs/the_double_entry_counting_method.html#introduction",
      "html": "<a href=\"https://beancount.github.io/docs/the_double_entry_counting_method.html#introduction\" rel=\"nofollow\">https://beancount.github.io/docs/the_double_entry_counting_m...</a>",
      "text": "https://beancount.github.io/docs/the_double_entry_counting_m..."
    },
    {
      "id": 168,
      "url": "https://news.ycombinator.com/reply?id=41594224&goto=item%3Fid%3D41593216%2341594224",
      "html": "<a href=\"reply?id=41594224&amp;goto=item%3Fid%3D41593216%2341594224\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 169,
      "url": "https://news.ycombinator.com/vote?id=41594607&how=up&goto=item%3Fid%3D41593216",
      "html": "<a id=\"up_41594607\" href=\"vote?id=41594607&amp;how=up&amp;goto=item%3Fid%3D41593216\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 170,
      "url": "https://news.ycombinator.com/user?id=superzamp",
      "html": "<a href=\"user?id=superzamp\" class=\"hnuser\">superzamp</a>",
      "text": "superzamp"
    },
    {
      "id": 171,
      "url": "https://news.ycombinator.com/item?id=41594607",
      "html": "<a href=\"item?id=41594607\">4 hours ago</a>",
      "text": "4 hours ago"
    },
    {
      "id": 172,
      "url": "https://news.ycombinator.com/item?id=41593216#41594224",
      "html": "<a href=\"#41594224\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 173,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41594607\" n=\"3\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 174,
      "url": "https://news.ycombinator.com/reply?id=41594607&goto=item%3Fid%3D41593216%2341594607",
      "html": "<a href=\"reply?id=41594607&amp;goto=item%3Fid%3D41593216%2341594607\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 175,
      "url": "https://news.ycombinator.com/vote?id=41595944&how=up&goto=item%3Fid%3D41593216",
      "html": "<a id=\"up_41595944\" href=\"vote?id=41595944&amp;how=up&amp;goto=item%3Fid%3D41593216\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 176,
      "url": "https://news.ycombinator.com/user?id=mamidon",
      "html": "<a href=\"user?id=mamidon\" class=\"hnuser\">mamidon</a>",
      "text": "mamidon"
    },
    {
      "id": 177,
      "url": "https://news.ycombinator.com/item?id=41595944",
      "html": "<a href=\"item?id=41595944\">2 hours ago</a>",
      "text": "2 hours ago"
    },
    {
      "id": 178,
      "url": "https://news.ycombinator.com/item?id=41593216#41594224",
      "html": "<a href=\"#41594224\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 179,
      "url": "https://news.ycombinator.com/item?id=41593216#41594607",
      "html": "<a href=\"#41594607\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 180,
      "url": "https://news.ycombinator.com/item?id=41593216#41595588",
      "html": "<a href=\"#41595588\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 181,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41595944\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 182,
      "url": "https://news.ycombinator.com/reply?id=41595944&goto=item%3Fid%3D41593216%2341595944",
      "html": "<a href=\"reply?id=41595944&amp;goto=item%3Fid%3D41593216%2341595944\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 183,
      "url": "https://news.ycombinator.com/vote?id=41595588&how=up&goto=item%3Fid%3D41593216",
      "html": "<a id=\"up_41595588\" href=\"vote?id=41595588&amp;how=up&amp;goto=item%3Fid%3D41593216\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 184,
      "url": "https://news.ycombinator.com/user?id=bbor",
      "html": "<a href=\"user?id=bbor\" class=\"hnuser\">bbor</a>",
      "text": "bbor"
    },
    {
      "id": 185,
      "url": "https://news.ycombinator.com/item?id=41595588",
      "html": "<a href=\"item?id=41595588\">3 hours ago</a>",
      "text": "3 hours ago"
    },
    {
      "id": 186,
      "url": "https://news.ycombinator.com/item?id=41593216#41594224",
      "html": "<a href=\"#41594224\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 187,
      "url": "https://news.ycombinator.com/item?id=41593216#41594607",
      "html": "<a href=\"#41594607\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 188,
      "url": "https://news.ycombinator.com/item?id=41593216#41595944",
      "html": "<a href=\"#41595944\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 189,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41595588\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 190,
      "url": "https://news.ycombinator.com/reply?id=41595588&goto=item%3Fid%3D41593216%2341595588",
      "html": "<a href=\"reply?id=41595588&amp;goto=item%3Fid%3D41593216%2341595588\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 191,
      "url": "https://news.ycombinator.com/newsguidelines.html",
      "html": "<a href=\"newsguidelines.html\">Guidelines</a>",
      "text": "Guidelines"
    },
    {
      "id": 192,
      "url": "https://news.ycombinator.com/newsfaq.html",
      "html": "<a href=\"newsfaq.html\">FAQ</a>",
      "text": "FAQ"
    },
    {
      "id": 193,
      "url": "https://news.ycombinator.com/lists",
      "html": "<a href=\"lists\">Lists</a>",
      "text": "Lists"
    },
    {
      "id": 194,
      "url": "https://github.com/HackerNews/API",
      "html": "<a href=\"https://github.com/HackerNews/API\">API</a>",
      "text": "API"
    },
    {
      "id": 195,
      "url": "https://news.ycombinator.com/security.html",
      "html": "<a href=\"security.html\">Security</a>",
      "text": "Security"
    },
    {
      "id": 196,
      "url": "https://www.ycombinator.com/legal/",
      "html": "<a href=\"https://www.ycombinator.com/legal/\">Legal</a>",
      "text": "Legal"
    },
    {
      "id": 197,
      "url": "https://www.ycombinator.com/apply/",
      "html": "<a href=\"https://www.ycombinator.com/apply/\">Apply to YC</a>",
      "text": "Apply to YC"
    },
    {
      "id": 198,
      "url": "mailto:hn@ycombinator.com",
      "html": "<a href=\"mailto:hn@ycombinator.com\">Contact</a>",
      "text": "Contact"
    }
  ],
  "resp": {
    "url": "https://news.ycombinator.com/item?id=41593216",
    "status": 200,
    "statusText": "OK",
    "headers": {
      "cache-control": "private; max-age=0",
      "connection": "keep-alive",
      "content-encoding": "gzip",
      "content-security-policy": "default-src 'self'; script-src 'self' 'unsafe-inline' https://www.google.com/recaptcha/ https://www.gstatic.com/recaptcha/ https://cdnjs.cloudflare.com/; frame-src 'self' https://www.google.com/recaptcha/; style-src 'self' 'unsafe-inline'; img-src 'self' https://account.ycombinator.com; frame-ancestors 'self'",
      "content-type": "text/html; charset=utf-8",
      "date": "Thu, 19 Sep 2024 22:59:17 GMT",
      "referrer-policy": "origin",
      "server": "nginx",
      "strict-transport-security": "max-age=31556900",
      "transfer-encoding": "chunked",
      "vary": "Accept-Encoding",
      "x-content-type-options": "nosniff",
      "x-frame-options": "DENY",
      "x-xss-protection": "1; mode=block"
    }
  },
  "contentType": "text/html",
  "req": {
    "url": "https://news.ycombinator.com/item?id=41593216"
  }
}