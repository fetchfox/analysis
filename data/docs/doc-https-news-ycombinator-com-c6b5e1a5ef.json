{
  "url": "https://news.ycombinator.com/item?id=41527675",
  "body": "<html lang=\"en\" op=\"item\"><head><meta name=\"referrer\" content=\"origin\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><link rel=\"stylesheet\" type=\"text/css\" href=\"news.css?u0LUEXpE1l7JwndlBn23\">\n        <link rel=\"icon\" href=\"y18.svg\">\n    <link rel=\"canonical\" href=\"https://news.ycombinator.com/item?id=41527675\"/>            <title>Better-performing “25519” elliptic-curve cryptography | Hacker News</title></head><body><center><table id=\"hnmain\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"85%\" bgcolor=\"#f6f6ef\">\n        <tr><td bgcolor=\"#ff6600\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"padding:2px\"><tr><td style=\"width:18px;padding-right:4px\"><a href=\"https://news.ycombinator.com\"><img src=\"y18.svg\" width=\"18\" height=\"18\" style=\"border:1px white solid; display:block\"></a></td>\n                  <td style=\"line-height:12pt; height:10px;\"><span class=\"pagetop\"><b class=\"hnname\"><a href=\"news\">Hacker News</a></b>\n                            <a href=\"newest\">new</a> | <a href=\"front\">past</a> | <a href=\"newcomments\">comments</a> | <a href=\"ask\">ask</a> | <a href=\"show\">show</a> | <a href=\"jobs\">jobs</a> | <a href=\"submit\" rel=\"nofollow\">submit</a>            </span></td><td style=\"text-align:right;padding-right:4px;\"><span class=\"pagetop\">\n                              <a href=\"login?goto=item%3Fid%3D41527675\">login</a>\n                          </span></td>\n              </tr></table></td></tr>\n<tr id=\"pagespace\" title=\"Better-performing “25519” elliptic-curve cryptography\" style=\"height:10px\"></tr><tr><td><table class=\"fatitem\" border=\"0\">\n        <tr class='athing' id='41527675'>\n      <td align=\"right\" valign=\"top\" class=\"title\"><span class=\"rank\"></span></td>      <td valign=\"top\" class=\"votelinks\"><center><a id='up_41527675' href='vote?id=41527675&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center></td><td class=\"title\"><span class=\"titleline\"><a href=\"https://www.amazon.science/blog/better-performing-25519-elliptic-curve-cryptography\">Better-performing “25519” elliptic-curve cryptography</a><span class=\"sitebit comhead\"> (<a href=\"from?site=amazon.science\"><span class=\"sitestr\">amazon.science</span></a>)</span></span></td></tr><tr><td colspan=\"2\"></td><td class=\"subtext\"><span class=\"subline\">\n          <span class=\"score\" id=\"score_41527675\">212 points</span> by <a href=\"user?id=lemaudit\" class=\"hnuser\">lemaudit</a> <span class=\"age\" title=\"2024-09-13T02:51:52.000000Z\"><a href=\"item?id=41527675\">1 day ago</a></span> <span id=\"unv_41527675\"></span> | <a href=\"hide?id=41527675&amp;goto=item%3Fid%3D41527675\">hide</a> | <a href=\"https://hn.algolia.com/?query=Better-performing%20%E2%80%9C25519%E2%80%9D%20elliptic-curve%20cryptography&type=story&dateRange=all&sort=byDate&storyText=false&prefix&page=0\" class=\"hnpast\">past</a> | <a href=\"fave?id=41527675&amp;auth=24699b50103550f6489b5ced7e981adadd23f1d3\">favorite</a> | <a href=\"item?id=41527675\">87&nbsp;comments</a>        </span>\n              </td></tr>\n            <tr><td style=\"height:10px\"></td></tr><tr><td colspan=\"2\"></td><td><form action=\"comment\" method=\"post\"><input type=\"hidden\" name=\"parent\" value=\"41527675\"><input type=\"hidden\" name=\"goto\" value=\"item?id=41527675\"><input type=\"hidden\" name=\"hmac\" value=\"5911e0e686665ed6ec0ff6f9bf019f4b455d89b9\"><textarea name=\"text\" rows=\"8\" cols=\"80\" wrap=\"virtual\"></textarea><br><br>\n<input type=\"submit\" value=\"add comment\"></form></td></tr>  </table><br><br><table border=\"0\" class='comment-tree'>\n            <tr class='athing comtr' id='41528060'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41528060' href='vote?id=41528060&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a> <span class=\"age\" title=\"2024-09-13T04:36:19.000000Z\"><a href=\"item?id=41528060\">1 day ago</a></span> <span id=\"unv_41528060\"></span>          <span class='navs'>\n             | <a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41528060\" n=\"38\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">The firedancer team at one of the better HFT firms wrote an AVX512 optimized implementation of ed25519 and X25519 that’s significantly faster than OpenSSL.<p><a href=\"https:&#x2F;&#x2F;github.com&#x2F;firedancer-io&#x2F;firedancer&#x2F;pull&#x2F;716\">https:&#x2F;&#x2F;github.com&#x2F;firedancer-io&#x2F;firedancer&#x2F;pull&#x2F;716</a><p>Ditto for sha256: <a href=\"https:&#x2F;&#x2F;github.com&#x2F;firedancer-io&#x2F;firedancer&#x2F;pull&#x2F;778\">https:&#x2F;&#x2F;github.com&#x2F;firedancer-io&#x2F;firedancer&#x2F;pull&#x2F;778</a><p>And sha512: <a href=\"https:&#x2F;&#x2F;github.com&#x2F;firedancer-io&#x2F;firedancer&#x2F;pull&#x2F;760\">https:&#x2F;&#x2F;github.com&#x2F;firedancer-io&#x2F;firedancer&#x2F;pull&#x2F;760</a><p>If you’re an optimization nerd, this codebase is wild.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41528060&amp;goto=item%3Fid%3D41527675%2341528060\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41529393'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41529393' href='vote?id=41529393&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=syzygyhack\" class=\"hnuser\">syzygyhack</a> <span class=\"age\" title=\"2024-09-13T09:02:00.000000Z\"><a href=\"item?id=41529393\">1 day ago</a></span> <span id=\"unv_41529393\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41531697\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41529393\" n=\"8\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I laughed a little at calling Firedancer contributors &quot;a team at a HFT firm&quot;.<p>Not that you are technically wrong, not at all, that&#x27;s where Jump came from. It&#x27;s just that this is all completely blockchain-driven optimization, but the b-word is so dirty now that we&#x27;ve gotta go back to using TradFi for the rep.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41529393&amp;goto=item%3Fid%3D41527675%2341529393\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41530425'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530425' href='vote?id=41530425&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a> <span class=\"age\" title=\"2024-09-13T12:10:08.000000Z\"><a href=\"item?id=41530425\">1 day ago</a></span> <span id=\"unv_41530425\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529393\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532043\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530425\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">It’s an optimization in hashing algorithms that is around twice as fast as the ones Amazon is posting in thus article for the same eliptic curves.<p>If the Amazon improvements are hacker news worthy (they are) this seems reasonable contextually.<p>Also, I worked for Jump for almost 12 years :)</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530425&amp;goto=item%3Fid%3D41527675%2341530425\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41532043'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532043' href='vote?id=41532043&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=webXL\" class=\"hnuser\">webXL</a> <span class=\"age\" title=\"2024-09-13T15:20:25.000000Z\"><a href=\"item?id=41532043\">1 day ago</a></span> <span id=\"unv_41532043\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529393\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530425\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41531697\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532043\" n=\"6\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">What makes the “b-word” dirty?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532043&amp;goto=item%3Fid%3D41527675%2341532043\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41532456'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532456' href='vote?id=41532456&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a> <span class=\"age\" title=\"2024-09-13T16:02:17.000000Z\"><a href=\"item?id=41532456\">1 day ago</a></span> <span id=\"unv_41532456\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41532043\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532723\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532456\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I didn’t use it because I didn’t find it relevant. They’re using hashing and EC algorithms and they’re improving them.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532456&amp;goto=item%3Fid%3D41527675%2341532456\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41532723'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532723' href='vote?id=41532723&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=jandrese\" class=\"hnuser\">jandrese</a> <span class=\"age\" title=\"2024-09-13T16:28:10.000000Z\"><a href=\"item?id=41532723\">1 day ago</a></span> <span id=\"unv_41532723\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41532043\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532456\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41532409\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532723\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">It&#x27;s hard to separate from the sea of grifters, con men, cranks, and scammers that infest the domain.  Just using the word is a yellow flag that you might be some kind of whacko, even if all you really want to talk about is the math.<p>People have to forever be on guard that you might at any point pivot to all taxation is theft or how you have formed your own micro nation that consists entirely of yourself and thus have diplomatic immunity from all prosecution.  Because it happens.  Or maybe you have a once in a lifetime deal to buy this receipt like object for some hideous art that is guaranteed to appreciate in value millions of percent.  It&#x27;s just the crowd that has aggregated around crypto currencies includes a lot of untrustworthy people.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532723&amp;goto=item%3Fid%3D41527675%2341532723\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41536393'><td><table border='0'>  <tr>    <td class='ind' indent='4'><img src=\"s.gif\" height=\"1\" width=\"160\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41536393' href='vote?id=41536393&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=webXL\" class=\"hnuser\">webXL</a> <span class=\"age\" title=\"2024-09-14T00:12:11.000000Z\"><a href=\"item?id=41536393\">1 day ago</a></span> <span id=\"unv_41536393\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41532723\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532409\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41536393\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c73\">Why do people need to be on guard for those beliefs? People should be critical thinkers and not thought police.<p>Granted, there are all kinds of whackos in crypto, but we should only be concerned about the immoral ones trying to scam us out of our money: SBF, Do-Kwon, and the like.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41536393&amp;goto=item%3Fid%3D41527675%2341536393\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41537011'><td><table border='0'>  <tr>    <td class='ind' indent='5'><img src=\"s.gif\" height=\"1\" width=\"200\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41537011' href='vote?id=41537011&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=sweeter\" class=\"hnuser\">sweeter</a> <span class=\"age\" title=\"2024-09-14T02:22:44.000000Z\"><a href=\"item?id=41537011\">22 hours ago</a></span> <span id=\"unv_41537011\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41536393\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532409\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41537011\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">people are legitimately buying farming land in the US and currently suing farmers for &quot;anti-trust&quot; for refusing to sell them their land so that they can quite literally create a crypto based sovereign micro-nation of wealthy tech VC&#x27;s. [1] and I think that is a selfish, vile and delusional thing to do. It has nothing to do with &quot;thought police&quot; its as simple as looking at the impact of their actions and beliefs and making the decision to reject that way of thinking and way of life.<p>1: <a href=\"https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=PHlcAx-I0oY\" rel=\"nofollow\">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=PHlcAx-I0oY</a></div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41537011&amp;goto=item%3Fid%3D41527675%2341537011\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                        <tr class='athing comtr' id='41532409'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532409' href='vote?id=41532409&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=ShroudedNight\" class=\"hnuser\">ShroudedNight</a> <span class=\"age\" title=\"2024-09-13T15:57:52.000000Z\"><a href=\"item?id=41532409\">1 day ago</a></span> <span id=\"unv_41532409\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41532043\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532723\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41531697\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532409\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">The trough of disillusionment carved out by grifters burning the peat of enthusiasm unsustainably.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532409&amp;goto=item%3Fid%3D41527675%2341532409\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                        <tr class='athing comtr' id='41531697'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41531697' href='vote?id=41531697&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=nly\" class=\"hnuser\">nly</a> <span class=\"age\" title=\"2024-09-13T14:42:32.000000Z\"><a href=\"item?id=41531697\">1 day ago</a></span> <span id=\"unv_41531697\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41529393\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41532069\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41531697\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">A lot of slowness comes typically comes from wanting to avoid methods that enable side-channel timing attacks</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41531697&amp;goto=item%3Fid%3D41527675%2341531697\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41532069'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532069' href='vote?id=41532069&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=inopinatus\" class=\"hnuser\">inopinatus</a> <span class=\"age\" title=\"2024-09-13T15:23:26.000000Z\"><a href=\"item?id=41532069\">1 day ago</a></span> <span id=\"unv_41532069\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41531697\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41528917\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532069\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I see they learned clang’s dirty little secret over intrinsics viz. that in producing the IR it deviates (sometimes dramatically when AVX-512 is concerned) from the documented opcodes and the results are inevitably detrimental.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532069&amp;goto=item%3Fid%3D41527675%2341532069\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41536223'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41536223' href='vote?id=41536223&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=astrange\" class=\"hnuser\">astrange</a> <span class=\"age\" title=\"2024-09-13T23:46:47.000000Z\"><a href=\"item?id=41536223\">1 day ago</a></span> <span id=\"unv_41536223\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41532069\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41528917\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41536223\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">This is why ffmpeg uses assembly, and people get extremely mad when you say it&#x27;s done for a reason, because they always want to come up with a fancier abstraction (usually cross-platform) which then defeats the purpose because it doesn&#x27;t actually work.<p>nb those abstractions do make sense when you can only afford to write a single implementation of the algorithm; then you&#x27;re just talking about a high level programming language. But they frequently fail to achieve their goal when you&#x27;re writing a second implementation for the sole purpose of being faster.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41536223&amp;goto=item%3Fid%3D41527675%2341536223\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41528917'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41528917' href='vote?id=41528917&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=electricshampo1\" class=\"hnuser\">electricshampo1</a> <span class=\"age\" title=\"2024-09-13T07:40:36.000000Z\"><a href=\"item?id=41528917\">1 day ago</a></span> <span id=\"unv_41528917\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532069\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530161\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41528917\" n=\"6\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Completely agree re: firedancer codebase. There is a level of thought and discipline wrt performance that I have never seen anywhere else.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41528917&amp;goto=item%3Fid%3D41527675%2341528917\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41531700'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41531700' href='vote?id=41531700&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=dhx\" class=\"hnuser\">dhx</a> <span class=\"age\" title=\"2024-09-13T14:42:41.000000Z\"><a href=\"item?id=41531700\">1 day ago</a></span> <span id=\"unv_41531700\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41528917\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530516\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41531700\" n=\"4\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">It&#x27;s much more than just performance they&#x27;ve thought about. Here are some of the secure programming practices that have been implemented:<p><pre><code>  &#x2F;* All the functions in this file are considered &quot;secure&quot;, specifically:\n     - Constant time in the input, i.e. the input can be a secret[2]\n     - Small and auditable code base, incl. simple types\n     - Either, no local variables = no need to clear them before exit (most functions)\n     - Or, only static allocation + clear local variable before exit (fd_ed25519_scalar_mul_base_const_time)\n     - Clear registers via FD_FN_SENSITIVE[3]\n     - C safety\n  *&#x2F;\n</code></pre>\nlibsodium[4] implements similar mechanisms, and Linux kernel encryption code does too (example: use of kfree_sensitive)[5]. However, firedancer appears to better avoid moving secrets outside of CPU registers, and [3] explains that libraries such as libsodium have inadequate zeroisation, something which firedancer claims to improve upon.<p>[1] <a href=\"https:&#x2F;&#x2F;github.com&#x2F;firedancer-io&#x2F;firedancer&#x2F;blob&#x2F;main&#x2F;src&#x2F;ballet&#x2F;ed25519&#x2F;fd_curve25519_secure.c\">https:&#x2F;&#x2F;github.com&#x2F;firedancer-io&#x2F;firedancer&#x2F;blob&#x2F;main&#x2F;src&#x2F;ba...</a><p>[2] <a href=\"https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Elliptic_curve_point_multiplication#Constant_time_Montgomery_ladder\" rel=\"nofollow\">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Elliptic_curve_point_multiplic...</a><p>[3] <a href=\"https:&#x2F;&#x2F;eprint.iacr.org&#x2F;2023&#x2F;1713\" rel=\"nofollow\">https:&#x2F;&#x2F;eprint.iacr.org&#x2F;2023&#x2F;1713</a><p>[4] <a href=\"https:&#x2F;&#x2F;libsodium.gitbook.io&#x2F;doc&#x2F;internals#security-first\" rel=\"nofollow\">https:&#x2F;&#x2F;libsodium.gitbook.io&#x2F;doc&#x2F;internals#security-first</a><p>[5] <a href=\"https:&#x2F;&#x2F;git.kernel.org&#x2F;pub&#x2F;scm&#x2F;linux&#x2F;kernel&#x2F;git&#x2F;torvalds&#x2F;linux.git&#x2F;tree&#x2F;crypto&#x2F;ecc.c\" rel=\"nofollow\">https:&#x2F;&#x2F;git.kernel.org&#x2F;pub&#x2F;scm&#x2F;linux&#x2F;kernel&#x2F;git&#x2F;torvalds&#x2F;lin...</a></div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41531700&amp;goto=item%3Fid%3D41527675%2341531700\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41531772'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41531772' href='vote?id=41531772&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=tptacek\" class=\"hnuser\">tptacek</a> <span class=\"age\" title=\"2024-09-13T14:51:03.000000Z\"><a href=\"item?id=41531772\">1 day ago</a></span> <span id=\"unv_41531772\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41531700\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530516\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41531772\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">These are table stakes for core cryptographic code, and SOT crypto code --- like the Amazon implementation this story is about --- tend at this point all to be derived from formal methods.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41531772&amp;goto=item%3Fid%3D41527675%2341531772\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41532199'><td><table border='0'>  <tr>    <td class='ind' indent='4'><img src=\"s.gif\" height=\"1\" width=\"160\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532199' href='vote?id=41532199&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=dhx\" class=\"hnuser\">dhx</a> <span class=\"age\" title=\"2024-09-13T15:37:31.000000Z\"><a href=\"item?id=41532199\">1 day ago</a></span> <span id=\"unv_41532199\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41531772\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530516\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532199\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">As an example, the Amazon implementation doesn&#x27;t refer to gcc&#x27;s[1] and clang&#x27;s[2] &quot;zero_call_used_regs&quot; to zeroise CPU registers upon return or exception of functions working on crypto secrets. OpenSSL doesn&#x27;t either.[3] firedancer _does_ use &quot;zero_call_used_regs&quot; to allow gcc&#x2F;clang to zeroise used CPU registers.[9]<p>As another example, the Amazon implementation also doesn&#x27;t refer to gcc&#x27;s &quot;strub&quot; attribute which zeroises the function&#x27;s stack upon return or exception of functions working on crypto secrets.[4][5] OpenSSL doesn&#x27;t either.[3] firedancer _does_ use the &quot;strub&quot; attribute to allow gcc to zeroise the function&#x27;s stack.[9]<p>Is there a performance impact? [6] has the overhead at 0% for X25519 for implementing CPU register and stack zeroisation. Compiling the Linux kernel with &quot;CONFIG_ZERO_CALL_USED_REGS=1&quot; for x64_64 (impacting all kernel functions) was found to result in a 1-1.5% performance penalty.[7][8]<p>[1] <a href=\"https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;gcc&#x2F;Common-Function-Attributes.html#index-zero_005fcall_005fused_005fregs-function-attribute\" rel=\"nofollow\">https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;gcc&#x2F;Common-Function-Attribute...</a><p>[2] <a href=\"https:&#x2F;&#x2F;clang.llvm.org&#x2F;docs&#x2F;AttributeReference.html#zero-call-used-regs\" rel=\"nofollow\">https:&#x2F;&#x2F;clang.llvm.org&#x2F;docs&#x2F;AttributeReference.html#zero-cal...</a><p>[3] <a href=\"https:&#x2F;&#x2F;github.com&#x2F;openssl&#x2F;openssl&#x2F;discussions&#x2F;24321\">https:&#x2F;&#x2F;github.com&#x2F;openssl&#x2F;openssl&#x2F;discussions&#x2F;24321</a><p>[4] <a href=\"https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;gcc-14.2.0&#x2F;gcc&#x2F;Common-Type-Attributes.html#index-strub-type-attribute\" rel=\"nofollow\">https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;gcc-14.2.0&#x2F;gcc&#x2F;Common-Type-At...</a><p>[5] <a href=\"https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;gcc&#x2F;Stack-Scrubbing.html\" rel=\"nofollow\">https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;gcc&#x2F;Stack-Scrubbing.html</a><p>[6] <a href=\"https:&#x2F;&#x2F;eprint.iacr.org&#x2F;2023&#x2F;1713.pdf\" rel=\"nofollow\">https:&#x2F;&#x2F;eprint.iacr.org&#x2F;2023&#x2F;1713.pdf</a><p>[7] <a href=\"https:&#x2F;&#x2F;www.phoronix.com&#x2F;review&#x2F;zero-used-regs&#x2F;5\" rel=\"nofollow\">https:&#x2F;&#x2F;www.phoronix.com&#x2F;review&#x2F;zero-used-regs&#x2F;5</a><p>[8] <a href=\"https:&#x2F;&#x2F;lore.kernel.org&#x2F;lkml&#x2F;20210505191804.4015873-1-keescook@chromium.org&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;lore.kernel.org&#x2F;lkml&#x2F;20210505191804.4015873-1-keesco...</a><p>[9] FD_FN_UNSANITIZED: <a href=\"https:&#x2F;&#x2F;github.com&#x2F;firedancer-io&#x2F;firedancer&#x2F;blob&#x2F;master&#x2F;src&#x2F;util&#x2F;fd_util_base.h\">https:&#x2F;&#x2F;github.com&#x2F;firedancer-io&#x2F;firedancer&#x2F;blob&#x2F;master&#x2F;src&#x2F;...</a></div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532199&amp;goto=item%3Fid%3D41527675%2341532199\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41532761'><td><table border='0'>  <tr>    <td class='ind' indent='5'><img src=\"s.gif\" height=\"1\" width=\"200\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532761' href='vote?id=41532761&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=jandrese\" class=\"hnuser\">jandrese</a> <span class=\"age\" title=\"2024-09-13T16:32:09.000000Z\"><a href=\"item?id=41532761\">1 day ago</a></span> <span id=\"unv_41532761\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41532199\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530516\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532761\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Zeroizing a register seems pretty straightforward.  Zeroizing any cache that it may have touched seems a lot more complex.  I guess that&#x27;s why they work so hard to keep everything in registers.  Lucky for them we aren&#x27;t in the x86 era anymore and there are a useful number of registers.  I&#x27;ll need to read up on how they avoid context switches while their registers are loaded.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532761&amp;goto=item%3Fid%3D41527675%2341532761\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                              <tr class='athing comtr' id='41530516'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530516' href='vote?id=41530516&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a> <span class=\"age\" title=\"2024-09-13T12:21:28.000000Z\"><a href=\"item?id=41530516\">1 day ago</a></span> <span id=\"unv_41530516\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41528917\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41531700\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530161\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530516\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">That team is full of world experts in high performance computing.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530516&amp;goto=item%3Fid%3D41527675%2341530516\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41530161'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530161' href='vote?id=41530161&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=pantalaimon\" class=\"hnuser\">pantalaimon</a> <span class=\"age\" title=\"2024-09-13T11:29:01.000000Z\"><a href=\"item?id=41530161\">1 day ago</a></span> <span id=\"unv_41530161\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41528917\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530161\" n=\"8\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">That looks really neat, but I still don&#x27;t understand what firedancer actually <i>is</i> - what is a validator client for Solana and why does it need it&#x27;s own crypto library?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530161&amp;goto=item%3Fid%3D41527675%2341530161\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41530509'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530509' href='vote?id=41530509&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a> <span class=\"age\" title=\"2024-09-13T12:21:02.000000Z\"><a href=\"item?id=41530509\">1 day ago</a></span> <span id=\"unv_41530509\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41530161\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530509\" n=\"7\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">It’s a new from scratch implementation of a validator for Solana the fastest blockchain by several orders of magnitude. The slowest part is signature verification so they sped up hashing to improve performance of the entire system.<p>They follow a first principles approach (the lead has a few physics degrees) and opted to speed up the cryptography. The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of.<p>It’s a win in cryptography, much like this Amazon post is, except it’s slower than the firedancer implementation.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530509&amp;goto=item%3Fid%3D41527675%2341530509\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41531439'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41531439' href='vote?id=41531439&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=scrlk\" class=\"hnuser\">scrlk</a> <span class=\"age\" title=\"2024-09-13T14:10:07.000000Z\"><a href=\"item?id=41531439\">1 day ago</a></span> <span id=\"unv_41531439\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41530509\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532616\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41531439\" n=\"4\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Off topic - is Firedancer going to survive Jump winding down its crypto arm?<p>Kanav left, they liquidated a huge staked ETH position a few months ago (+ a bunch of other coins), and the SEC&#x2F;CFTC is all over them for the Terra Luna fiasco.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41531439&amp;goto=item%3Fid%3D41527675%2341531439\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41532404'><td><table border='0'>  <tr>    <td class='ind' indent='4'><img src=\"s.gif\" height=\"1\" width=\"160\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532404' href='vote?id=41532404&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a> <span class=\"age\" title=\"2024-09-13T15:57:30.000000Z\"><a href=\"item?id=41532404\">1 day ago</a></span> <span id=\"unv_41532404\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41531439\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532616\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532404\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Rumors of Jump’s demise are greatly exaggerated. Check the torrent of firedancer talks at Solana Breakpoint literally next week and decide yourself.<p>Folks have said jump is gonna die for 20+ years. They’ve been around 30ish…</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532404&amp;goto=item%3Fid%3D41527675%2341532404\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41534457'><td><table border='0'>  <tr>    <td class='ind' indent='5'><img src=\"s.gif\" height=\"1\" width=\"200\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41534457' href='vote?id=41534457&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=sangnoir\" class=\"hnuser\">sangnoir</a> <span class=\"age\" title=\"2024-09-13T19:41:12.000000Z\"><a href=\"item?id=41534457\">1 day ago</a></span> <span id=\"unv_41534457\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41532404\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532616\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41534457\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Parent asked a specific question about the survival of <i>Firedancer</i> and winding down of the <i>crypto arm</i> though. No demise of Jump mentioned.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41534457&amp;goto=item%3Fid%3D41527675%2341534457\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41535913'><td><table border='0'>  <tr>    <td class='ind' indent='6'><img src=\"s.gif\" height=\"1\" width=\"240\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41535913' href='vote?id=41535913&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a> <span class=\"age\" title=\"2024-09-13T22:48:12.000000Z\"><a href=\"item?id=41535913\">1 day ago</a></span> <span id=\"unv_41535913\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41534457\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532616\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41535913\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">You will see a half dozen or so talks about firedancer and probably 35-40 or so of us total (I’m at the company that does security for firedancer, Asymmetric Research. We were founded by former jumpers).<p>You can make the determination on your own, but there will be an obvious large showing of firedancer folks and some exciting updates for the project.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41535913&amp;goto=item%3Fid%3D41527675%2341535913\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                              <tr class='athing comtr' id='41532616'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532616' href='vote?id=41532616&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=caned\" class=\"hnuser\">caned</a> <span class=\"age\" title=\"2024-09-13T16:18:39.000000Z\"><a href=\"item?id=41532616\">1 day ago</a></span> <span id=\"unv_41532616\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41530509\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41531439\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532616\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of.<p>For users that have AVX-512, which isn&#x27;t widely available (AMD Zen 4 &#x2F; Zen 5, Sapphire Rapids)...</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532616&amp;goto=item%3Fid%3D41527675%2341532616\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41533002'><td><table border='0'>  <tr>    <td class='ind' indent='4'><img src=\"s.gif\" height=\"1\" width=\"160\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41533002' href='vote?id=41533002&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a> <span class=\"age\" title=\"2024-09-13T16:57:32.000000Z\"><a href=\"item?id=41533002\">1 day ago</a></span> <span id=\"unv_41533002\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41532616\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41533002\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Sure, and cpus supporting it will proliferate. Shockingly to no one reading hacker news... Both software and hardware continue to improve with time generally speaking. This was a huge software improvement on hardware that supports that functionality. It is a huge win for anyone wanting to use these algorithms where they can afford hardware that supports it.<p>We should celebrate Amazon&#x27;s improvements and we should celebrate these improvements. Both are great for the future of technology, regardless of why they were initially developed. Improving tech and keeping it open source is good for all.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41533002&amp;goto=item%3Fid%3D41527675%2341533002\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                              <tr class='athing comtr' id='41529425'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41529425' href='vote?id=41529425&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=4gotunameagain\" class=\"hnuser\">4gotunameagain</a> <span class=\"age\" title=\"2024-09-13T09:09:11.000000Z\"><a href=\"item?id=41529425\">1 day ago</a></span> <span id=\"unv_41529425\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530161\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41532959\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41529425\" n=\"11\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">So many manhours spent on finding better ways to shovel around money and pocket what falls from the cracks.<p>What a wasteful and unproductive enterprise, considering the vast majority of the devised improvements never see the public eye.<p>Still, impressive work. Imagine if those brilliant minds behind this were focused somewhere else.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41529425&amp;goto=item%3Fid%3D41527675%2341529425\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41529465'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41529465' href='vote?id=41529465&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=posnet\" class=\"hnuser\">posnet</a> <span class=\"age\" title=\"2024-09-13T09:17:00.000000Z\"><a href=\"item?id=41529465\">1 day ago</a></span> <span id=\"unv_41529465\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532000\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41529465\" n=\"6\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">The greatest minds of our generation spend their time thinking about how to:<p>- make people click on ads<p>- make trading algos faster<p>- replace human artists<p>- build more efficient killing machines<p>- destroy any remaining concept of privacy</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41529465&amp;goto=item%3Fid%3D41527675%2341529465\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41536712'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41536712' href='vote?id=41536712&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=geodel\" class=\"hnuser\">geodel</a> <span class=\"age\" title=\"2024-09-14T01:13:10.000000Z\"><a href=\"item?id=41536712\">23 hours ago</a></span> <span id=\"unv_41536712\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529465\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41536240\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41536712\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Greatest mind of previous generation made nuclear bombs and other deadly things.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41536712&amp;goto=item%3Fid%3D41527675%2341536712\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41536240'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41536240' href='vote?id=41536240&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=astrange\" class=\"hnuser\">astrange</a> <span class=\"age\" title=\"2024-09-13T23:49:06.000000Z\"><a href=\"item?id=41536240\">1 day ago</a></span> <span id=\"unv_41536240\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529465\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41536712\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530201\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41536240\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Aren&#x27;t the greatest mind(s) of our generation writing Terry Tao&#x27;s blog posts?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41536240&amp;goto=item%3Fid%3D41527675%2341536240\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41530201'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530201' href='vote?id=41530201&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=vladms\" class=\"hnuser\">vladms</a> <span class=\"age\" title=\"2024-09-13T11:35:22.000000Z\"><a href=\"item?id=41530201\">1 day ago</a></span> <span id=\"unv_41530201\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529465\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41536240\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41529474\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530201\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">This directly implies that all the people that did useful stuff (improving cancer survivability, new vaccines, renewable energy, and others) are all &quot;below&quot; the &quot;greatest minds of our generation&quot;.<p>Not to mention it also suggests there is a way to &quot;compare&quot; minds. I would not choose myself to do somethings, but that does not mean I despise automatically people choosing to.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530201&amp;goto=item%3Fid%3D41527675%2341530201\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41536721'><td><table border='0'>  <tr>    <td class='ind' indent='4'><img src=\"s.gif\" height=\"1\" width=\"160\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41536721' href='vote?id=41536721&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=geodel\" class=\"hnuser\">geodel</a> <span class=\"age\" title=\"2024-09-14T01:15:17.000000Z\"><a href=\"item?id=41536721\">23 hours ago</a></span> <span id=\"unv_41536721\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41530201\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41529474\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41536721\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I think they meant greatest minds have to be greatest money earners also. Else they are not greatest minds.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41536721&amp;goto=item%3Fid%3D41527675%2341536721\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41529474'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41529474' href='vote?id=41529474&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=4gotunameagain\" class=\"hnuser\">4gotunameagain</a> <span class=\"age\" title=\"2024-09-13T09:19:54.000000Z\"><a href=\"item?id=41529474\">1 day ago</a></span> <span id=\"unv_41529474\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529465\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530201\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41532000\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41529474\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Hey, at least we had one of them working on TempleOS.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41529474&amp;goto=item%3Fid%3D41527675%2341529474\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41532000'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532000' href='vote?id=41532000&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=toast0\" class=\"hnuser\">toast0</a> <span class=\"age\" title=\"2024-09-13T15:15:44.000000Z\"><a href=\"item?id=41532000\">1 day ago</a></span> <span id=\"unv_41532000\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41529465\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530663\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532000\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">It doesn&#x27;t seem wasteful and unproductive, given that the result of the HFT industry is smaller bid&#x2F;ask spreads (lowering costs for all trades) and payment for order flow which is the mechanism that eliminated retail commissions and provides price improvement on many retail trades. And even so, HFT firms are making money.<p>It might not seem like real work, but making money by reducing costs of market participants sounds like a good thing. I admit though, block trades might be harder now than before the rise of HFT.<p>If you could do warehousing&#x2F;distributing&#x2F;coordinating fresh foods in a way that reduced the difference in price between the farmer and the consumer and make money doing it, that would clearly be good work.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532000&amp;goto=item%3Fid%3D41527675%2341532000\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41530663'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530663' href='vote?id=41530663&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=appendix-rock\" class=\"hnuser\">appendix-rock</a> <span class=\"age\" title=\"2024-09-13T12:39:23.000000Z\"><a href=\"item?id=41530663\">1 day ago</a></span> <span id=\"unv_41530663\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532000\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530797\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530663\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">What do you work on?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530663&amp;goto=item%3Fid%3D41527675%2341530663\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41530797'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530797' href='vote?id=41530797&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=almostgotcaught\" class=\"hnuser\">almostgotcaught</a> <span class=\"age\" title=\"2024-09-13T12:55:03.000000Z\"><a href=\"item?id=41530797\">1 day ago</a></span> <span id=\"unv_41530797\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530663\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41532959\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530797\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c5A\">I&#x27;ll never be able to figure out what people get from repeating the same thing over and over. I&#x27;ve seen this same exact comment 1000 times on hn and I&#x27;m 100% sure you have too (indeed I believe the <i>reason</i> you repeat is because you&#x27;ve seen it and agree with it).</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530797&amp;goto=item%3Fid%3D41527675%2341530797\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41533370'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41533370' href='vote?id=41533370&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=XorNot\" class=\"hnuser\">XorNot</a> <span class=\"age\" title=\"2024-09-13T17:37:54.000000Z\"><a href=\"item?id=41533370\">1 day ago</a></span> <span id=\"unv_41533370\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41530797\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532959\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41533370\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">It&#x27;s virtue signalling.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41533370&amp;goto=item%3Fid%3D41527675%2341533370\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                        <tr class='athing comtr' id='41532959'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532959' href='vote?id=41532959&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=slt2021\" class=\"hnuser\">slt2021</a> <span class=\"age\" title=\"2024-09-13T16:51:51.000000Z\"><a href=\"item?id=41532959\">1 day ago</a></span> <span id=\"unv_41532959\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532959\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">wow amazing, nobody is gonna edit that code ever again...</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532959&amp;goto=item%3Fid%3D41527675%2341532959\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41533915'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41533915' href='vote?id=41533915&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=notfed\" class=\"hnuser\">notfed</a> <span class=\"age\" title=\"2024-09-13T18:42:05.000000Z\"><a href=\"item?id=41533915\">1 day ago</a></span> <span id=\"unv_41533915\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41533915\" n=\"6\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; The x25519 algorithm also plays a role in post-quantum safe cryptographic solutions, having been included as the classical algorithm in the TLS 1.3 and SSH hybrid scheme specifications for post-quantum key agreement.<p>Really though? This mostly-untrue statement is the line that warrants adding hashtag #post-quantum-cryptography to the blogpost?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41533915&amp;goto=item%3Fid%3D41527675%2341533915\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41535328'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41535328' href='vote?id=41535328&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=westurner\" class=\"hnuser\">westurner</a> <span class=\"age\" title=\"2024-09-13T21:27:40.000000Z\"><a href=\"item?id=41535328\">1 day ago</a></span> <span id=\"unv_41535328\"></span>          <span class='navs'>\n             | <a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41535328\" n=\"5\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Actually, e.g. rustls added X25519Kyber768Draft00 support this year: \n<a href=\"https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=41534500\">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=41534500</a><p>&#x2F;?q X25519Kyber768Draft00: <a href=\"https:&#x2F;&#x2F;www.google.com&#x2F;search?q=X25519Kyber768Draft00\" rel=\"nofollow\">https:&#x2F;&#x2F;www.google.com&#x2F;search?q=X25519Kyber768Draft00</a></div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41535328&amp;goto=item%3Fid%3D41527675%2341535328\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41535692'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41535692' href='vote?id=41535692&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=notfed\" class=\"hnuser\">notfed</a> <span class=\"age\" title=\"2024-09-13T22:14:19.000000Z\"><a href=\"item?id=41535692\">1 day ago</a></span> <span id=\"unv_41535692\"></span>          <span class='navs'>\n             | <a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41535328\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41535692\" n=\"4\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Kyber768 is the post-quantum algorithm in that example, not x25519.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41535692&amp;goto=item%3Fid%3D41527675%2341535692\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41535866'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41535866' href='vote?id=41535866&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=westurner\" class=\"hnuser\">westurner</a> <span class=\"age\" title=\"2024-09-13T22:39:56.000000Z\"><a href=\"item?id=41535866\">1 day ago</a></span> <span id=\"unv_41535866\"></span>          <span class='navs'>\n             | <a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41535692\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41535866\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">From &quot;OpenSSL 3.4 Alpha 1 Released with New Features&quot; (8 days ago) <a href=\"https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=41456447#41456774\">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=41456447#41456774</a> :<p>&gt; <i>Someday there will probably be a TLS1.4&#x2F;2.0 with PQ, and also FIPS-140 -4?</i><p>&gt; <i>Are there additional ways to implement NIST PQ finalist algos with openssl?</i><p>- open-quantum-safe&#x2F;oqs-provider [implements mlkem512 through mlkem1024 and x25519_mlkem768]</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41535866&amp;goto=item%3Fid%3D41527675%2341535866\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41541179'><td><table border='0'>  <tr>    <td class='ind' indent='4'><img src=\"s.gif\" height=\"1\" width=\"160\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41541179' href='vote?id=41541179&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=notfed\" class=\"hnuser\">notfed</a> <span class=\"age\" title=\"2024-09-14T17:16:46.000000Z\"><a href=\"item?id=41541179\">7 hours ago</a></span> <span id=\"unv_41541179\"></span>          <span class='navs'>\n             | <a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41535866\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41541179\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Not sure what you&#x27;re trying to say here . x25519 is objectively not PQC and never claimed to be, and this isn&#x27;t debatable.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41541179&amp;goto=item%3Fid%3D41527675%2341541179\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41541707'><td><table border='0'>  <tr>    <td class='ind' indent='5'><img src=\"s.gif\" height=\"1\" width=\"200\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41541707' href='vote?id=41541707&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=westurner\" class=\"hnuser\">westurner</a> <span class=\"age\" title=\"2024-09-14T18:18:45.000000Z\"><a href=\"item?id=41541707\">6 hours ago</a></span> <span id=\"unv_41541707\"></span>          <span class='navs'>\n             | <a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41541179\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41541707\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">In this case, hybrid means &quot;not entirely PQ&quot;.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41541707&amp;goto=item%3Fid%3D41527675%2341541707\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                                          <tr class='athing comtr' id='41527884'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41527884' href='vote?id=41527884&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=nanolith\" class=\"hnuser\">nanolith</a> <span class=\"age\" title=\"2024-09-13T03:50:59.000000Z\"><a href=\"item?id=41527884\">1 day ago</a></span> <span id=\"unv_41527884\"></span>          <span class='navs'>\n             | <a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41532635\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41527884\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">The formal methods nerd in me is happy to see HOL Light being used to formally verify this implementation. I&#x27;m curious to see how closely their abstract machine models follow specific machine implementations. OOO, speculation, and deep pipelining have non-trivial impacts on potential side channels, and these vary quite a bit by stepping and architecture.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41527884&amp;goto=item%3Fid%3D41527675%2341527884\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41529633'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41529633' href='vote?id=41529633&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=holowoodman\" class=\"hnuser\">holowoodman</a> <span class=\"age\" title=\"2024-09-13T09:52:20.000000Z\"><a href=\"item?id=41529633\">1 day ago</a></span> <span id=\"unv_41529633\"></span>          <span class='navs'>\n             | <a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532635\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41529633\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Even worse: Each new CPU generation will need a new machine model and a reevaluation. Because OOO, speculation and all the timing behaviour are non-functional properties that frequently change due to new optimizations, different internal structuring, etc.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41529633&amp;goto=item%3Fid%3D41527675%2341529633\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41532635'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532635' href='vote?id=41532635&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=aseipp\" class=\"hnuser\">aseipp</a> <span class=\"age\" title=\"2024-09-13T16:20:21.000000Z\"><a href=\"item?id=41532635\">1 day ago</a></span> <span id=\"unv_41532635\"></span>          <span class='navs'>\n             | <a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532635\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I was aware of s2n-bignum which is a very cool project, but apparently there is a larger sister project, aws-lc, that aims for broader set of APIs including OpenSSL compatibility, while retaining the general approach and vibe (lots of formal verification + performance work): <a href=\"https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-lc\">https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-lc</a><p>That&#x27;s pretty sweet. I&#x27;m currently using BoringSSL in a project as a supplement to OpenSSL (mostly because it is much easier to build for Windows users than requiring them to fiddle with msys2&#x2F;vcpkg etc; the alternative is to rely on the Windows CNG API, but it lacks features like ed25519 support.) I wonder how much effort it would take to use aws-lc instead... Not that I&#x27;m that interested, BSSL is pretty good, but free performance and heavy automated verification is always nice :)<p>Related: one of the authors of this post, John Harrison, wrote a really good book about automated theorm proving about 15 years ago while working on floating point verification at Intel -- there&#x27;s still no other book quite like this one, I think <a href=\"https:&#x2F;&#x2F;www.cl.cam.ac.uk&#x2F;~jrh13&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;www.cl.cam.ac.uk&#x2F;~jrh13&#x2F;</a></div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532635&amp;goto=item%3Fid%3D41527675%2341532635\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41533055'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41533055' href='vote?id=41533055&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=newman314\" class=\"hnuser\">newman314</a> <span class=\"age\" title=\"2024-09-13T17:04:38.000000Z\"><a href=\"item?id=41533055\">1 day ago</a></span> <span id=\"unv_41533055\"></span>          <span class='navs'>\n             | <a href=\"#41532635\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41533055\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Upon hearing about AWS-LC, I immediately thought about tying it to nginx to see if it will work.<p>Turns out someone else has already tried: <a href=\"https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-lc&#x2F;issues&#x2F;1827\">https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-lc&#x2F;issues&#x2F;1827</a></div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41533055&amp;goto=item%3Fid%3D41527675%2341533055\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                            <tr class='athing comtr' id='41528011'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41528011' href='vote?id=41528011&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=saghm\" class=\"hnuser\">saghm</a> <span class=\"age\" title=\"2024-09-13T04:23:43.000000Z\"><a href=\"item?id=41528011\">1 day ago</a></span> <span id=\"unv_41528011\"></span>          <span class='navs'>\n             | <a href=\"#41532635\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530898\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41528011\" n=\"28\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. At times I&#x27;ve run into places that require me to use RSA keys though (ironically, I seem to remember first experiencing this with AWS years back, although I honestly can&#x27;t recall if this is still the case or not).<p>If this further improvement becomes widely used, it would be interesting to see if it&#x27;s enough to tip the scales towards ed25519 being more of the de facto &quot;default&quot; ssh key algorithm. My experience is that a decent number of people still use RSA keys most of the time, but I don&#x27;t feel like I have nearly enough of a sample size to conclude anything significant from that.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41528011&amp;goto=item%3Fid%3D41527675%2341528011\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41528620'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41528620' href='vote?id=41528620&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=scrapheap\" class=\"hnuser\">scrapheap</a> <span class=\"age\" title=\"2024-09-13T06:44:49.000000Z\"><a href=\"item?id=41528620\">1 day ago</a></span> <span id=\"unv_41528620\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41528168\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41528620\" n=\"13\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; My experience is that a decent number of people still use RSA keys most of the time, but I don&#x27;t feel like I have nearly enough of a sample size to conclude anything significant from that.<p>I wouldn&#x27;t be surprised if a lot of people still use RSA for SSH keys for one or more of the following reasons:<p>1. A lot of tutorials about generating SSH Keys were written before ed25519, so if they follow an old tutorial they&#x27;ll probably be generating an RSA key.<p>2. Older versions of OpenSSH, that you&#x27;d find on CentOS 7 and below, would default to RSA if you didn&#x27;t specify a key type when running ssh-keygen.<p>3. There are some systems out there that don&#x27;t support ed25519, though they are becoming rarer.  If you have to deal with those systems then you&#x27;re forced to use RSA (at least for that system).<p>4. Some of us have been using SSH keys from way before OpenSSH add support for ed25519 keys in 2014, so any long lived SSH keys won&#x27;t be ed25519 keys (wow, ed25519 has now been about in OpenSSH for over 10 years).</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41528620&amp;goto=item%3Fid%3D41527675%2341528620\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41529557'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41529557' href='vote?id=41529557&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=miki123211\" class=\"hnuser\">miki123211</a> <span class=\"age\" title=\"2024-09-13T09:34:06.000000Z\"><a href=\"item?id=41529557\">1 day ago</a></span> <span id=\"unv_41529557\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41528620\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530168\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41529557\" n=\"4\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">5. a lot of people (especially older people I suspect) think &quot;RSA&quot; when they hear &quot;public key cryptography&quot;.<p>I&#x27;m in my twenties and still have that reaction. I know elliptic curves exist, I even sort-of-kind-of have an awareness of how they work, but if I was asked to name one cryptosystem that used public and private keys, I&#x27;d definitely say RSA first and not elliptic curves.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41529557&amp;goto=item%3Fid%3D41527675%2341529557\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41529976'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41529976' href='vote?id=41529976&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=vitus\" class=\"hnuser\">vitus</a> <span class=\"age\" title=\"2024-09-13T10:57:23.000000Z\"><a href=\"item?id=41529976\">1 day ago</a></span> <span id=\"unv_41529976\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529557\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530168\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41529976\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">This is likely in no small part due to CS education only really teaching the mechanics of RSA (modular arithmetic, Fermat&#x27;s little theorem, etc), or at least, that still seems to be the case at Berkeley. I&#x27;d guess because elliptic curve crypto requires more advanced math to reason about (more advanced group theory, at least) and doesn&#x27;t map as cleanly to existing concepts that non-math-major undergrads have.<p>cryptopals.com also doesn&#x27;t cover any elliptive curve crypto until you get into the last set.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41529976&amp;goto=item%3Fid%3D41527675%2341529976\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41531786'><td><table border='0'>  <tr>    <td class='ind' indent='4'><img src=\"s.gif\" height=\"1\" width=\"160\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41531786' href='vote?id=41531786&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=tptacek\" class=\"hnuser\">tptacek</a> <span class=\"age\" title=\"2024-09-13T14:52:16.000000Z\"><a href=\"item?id=41531786\">1 day ago</a></span> <span id=\"unv_41531786\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529976\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530744\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41531786\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">We didn&#x27;t even cover RSA until the original last set. It&#x27;s a build-up. :)</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41531786&amp;goto=item%3Fid%3D41527675%2341531786\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41530744'><td><table border='0'>  <tr>    <td class='ind' indent='4'><img src=\"s.gif\" height=\"1\" width=\"160\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530744' href='vote?id=41530744&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=throw0101b\" class=\"hnuser\">throw0101b</a> <span class=\"age\" title=\"2024-09-13T12:49:10.000000Z\"><a href=\"item?id=41530744\">1 day ago</a></span> <span id=\"unv_41530744\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529976\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41531786\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530168\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530744\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I would think that the (non-EC) Diffie-Hellman would also be easy enough to teach as well: exponentials and discrete <i>log</i> problem aren&#x27;t any&#x2F;much complicated than explaining factorization.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530744&amp;goto=item%3Fid%3D41527675%2341530744\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                        <tr class='athing comtr' id='41530168'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530168' href='vote?id=41530168&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=pantalaimon\" class=\"hnuser\">pantalaimon</a> <span class=\"age\" title=\"2024-09-13T11:29:54.000000Z\"><a href=\"item?id=41530168\">1 day ago</a></span> <span id=\"unv_41530168\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41528620\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41529557\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41529970\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530168\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; 3. There are some systems out there that don&#x27;t support ed25519, though they are becoming rarer. If you have to deal with those systems then you&#x27;re forced to use RSA (at least for that system).<p>Azure Devops is a big one.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530168&amp;goto=item%3Fid%3D41527675%2341530168\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41529970'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41529970' href='vote?id=41529970&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=Spooky23\" class=\"hnuser\">Spooky23</a> <span class=\"age\" title=\"2024-09-13T10:56:09.000000Z\"><a href=\"item?id=41529970\">1 day ago</a></span> <span id=\"unv_41529970\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41528620\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530168\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530221\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41529970\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41529970&amp;goto=item%3Fid%3D41527675%2341529970\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41530119'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530119' href='vote?id=41530119&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=vitus\" class=\"hnuser\">vitus</a> <span class=\"age\" title=\"2024-09-13T11:21:02.000000Z\"><a href=\"item?id=41530119\">1 day ago</a></span> <span id=\"unv_41530119\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529970\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41531820\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530119\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519.<p>Not even when FIPS 140-3 was (finally) finalized in 2019, and testing began in 2020?<p><a href=\"https:&#x2F;&#x2F;csrc.nist.gov&#x2F;projects&#x2F;cryptographic-module-validation-program&#x2F;sp-800-140-series-supplemental-information&#x2F;sp800-140c\" rel=\"nofollow\">https:&#x2F;&#x2F;csrc.nist.gov&#x2F;projects&#x2F;cryptographic-module-validati...</a> includes mentions of EdDSA, and Curve25519 is listed among the &quot;Recommended Curves for U.S. Federal Government Use&quot; on page 15 of <a href=\"https:&#x2F;&#x2F;nvlpubs.nist.gov&#x2F;nistpubs&#x2F;SpecialPublications&#x2F;NIST.SP.800-186.pdf\" rel=\"nofollow\">https:&#x2F;&#x2F;nvlpubs.nist.gov&#x2F;nistpubs&#x2F;SpecialPublications&#x2F;NIST.S...</a>.<p>(I guess the problem is that various crypto implementations need to get recertified under the new standard...)<p>edit: it looks like AWS-LC [0] and boringcrypto [1] have both been validated under FIPS 140-3. Azure&#x27;s OpenSSL crypto [2] has only been validated under FIPS 140-2 as far as I can tell.<p>[0] <a href=\"https:&#x2F;&#x2F;csrc.nist.gov&#x2F;projects&#x2F;cryptographic-module-validation-program&#x2F;certificate&#x2F;4631\" rel=\"nofollow\">https:&#x2F;&#x2F;csrc.nist.gov&#x2F;projects&#x2F;cryptographic-module-validati...</a><p>[1] <a href=\"https:&#x2F;&#x2F;csrc.nist.gov&#x2F;projects&#x2F;cryptographic-module-validation-program&#x2F;certificate&#x2F;4735\" rel=\"nofollow\">https:&#x2F;&#x2F;csrc.nist.gov&#x2F;projects&#x2F;cryptographic-module-validati...</a><p>[2] <a href=\"https:&#x2F;&#x2F;csrc.nist.gov&#x2F;projects&#x2F;cryptographic-module-validation-program&#x2F;certificate&#x2F;4496\" rel=\"nofollow\">https:&#x2F;&#x2F;csrc.nist.gov&#x2F;projects&#x2F;cryptographic-module-validati...</a></div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530119&amp;goto=item%3Fid%3D41527675%2341530119\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41531820'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41531820' href='vote?id=41531820&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=devman0\" class=\"hnuser\">devman0</a> <span class=\"age\" title=\"2024-09-13T14:56:25.000000Z\"><a href=\"item?id=41531820\">1 day ago</a></span> <span id=\"unv_41531820\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529970\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530119\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530221\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41531820\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">ed25519 is in FIPS 186-5 which meets criteria (a) for Approved Security Functions in FIPS 140-2.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41531820&amp;goto=item%3Fid%3D41527675%2341531820\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41530221'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530221' href='vote?id=41530221&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=loudmax\" class=\"hnuser\">loudmax</a> <span class=\"age\" title=\"2024-09-13T11:38:43.000000Z\"><a href=\"item?id=41530221\">1 day ago</a></span> <span id=\"unv_41530221\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41528620\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41529970\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41528168\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530221\" n=\"4\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">When I run `ssh-keygen`, I can remember the options `-t rsa` or `-t dsa`.  I simply cannot remember the flag `-t ed25519`.  I have to look it up every time.<p>I just remember the flag as being vaguely similar the name of the monster robot from RoboCop.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530221&amp;goto=item%3Fid%3D41527675%2341530221\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41530317'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530317' href='vote?id=41530317&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=homebrewer\" class=\"hnuser\">homebrewer</a> <span class=\"age\" title=\"2024-09-13T11:51:54.000000Z\"><a href=\"item?id=41530317\">1 day ago</a></span> <span id=\"unv_41530317\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41530221\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530765\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530317\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Use shell autocomplete. Even `bash-completion` suggests arguments for the key type these days:<p><pre><code>  $ ssh-keygen -t &lt;TAB&gt;\n  dsa   ecdsa   ecdsa-sk   ed25519   ed25519-sk  rsa \n</code></pre>\n`-sk` is short for &quot;security key&quot; if memory serves me right, and is used with FIDO2 hardware tokens.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530317&amp;goto=item%3Fid%3D41527675%2341530317\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41530765'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530765' href='vote?id=41530765&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=throw0101b\" class=\"hnuser\">throw0101b</a> <span class=\"age\" title=\"2024-09-13T12:51:28.000000Z\"><a href=\"item?id=41530765\">1 day ago</a></span> <span id=\"unv_41530765\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41530221\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530317\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41528168\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530765\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; <i>When I run `ssh-keygen`</i><p>As of OpenSSH 9.5 the default has changed, so you don&#x27;t have to specify anything:<p><pre><code>   * ssh-keygen(1): generate Ed25519 keys by default. Ed25519 public keys\n     are very convenient due to their small size. Ed25519 keys are\n     specified in RFC 8709 and OpenSSH has supported them since version 6.5\n     (January 2014).\n</code></pre>\n* <a href=\"https:&#x2F;&#x2F;www.openssh.com&#x2F;txt&#x2F;release-9.5\" rel=\"nofollow\">https:&#x2F;&#x2F;www.openssh.com&#x2F;txt&#x2F;release-9.5</a></div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530765&amp;goto=item%3Fid%3D41527675%2341530765\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41531951'><td><table border='0'>  <tr>    <td class='ind' indent='4'><img src=\"s.gif\" height=\"1\" width=\"160\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41531951' href='vote?id=41531951&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=saghm\" class=\"hnuser\">saghm</a> <span class=\"age\" title=\"2024-09-13T15:10:41.000000Z\"><a href=\"item?id=41531951\">1 day ago</a></span> <span id=\"unv_41531951\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41530765\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41528168\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41531951\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Oh wow, I didn&#x27;t know that one! I still manually type `-t ed25519` from muscle memory, I guess I don&#x27;t have to now</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41531951&amp;goto=item%3Fid%3D41527675%2341531951\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                              <tr class='athing comtr' id='41528168'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41528168' href='vote?id=41528168&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=toast0\" class=\"hnuser\">toast0</a> <span class=\"age\" title=\"2024-09-13T05:10:46.000000Z\"><a href=\"item?id=41528168\">1 day ago</a></span> <span id=\"unv_41528168\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41528620\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41528046\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41528168\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519.<p>My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41528168&amp;goto=item%3Fid%3D41527675%2341528168\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41531995'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41531995' href='vote?id=41531995&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=saghm\" class=\"hnuser\">saghm</a> <span class=\"age\" title=\"2024-09-13T15:15:19.000000Z\"><a href=\"item?id=41531995\">1 day ago</a></span> <span id=\"unv_41531995\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41528168\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41528046\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41531995\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though.<p>Interesting! I wonder if this new algorithm is intended to help with that. I&#x27;m super curious if the smaller payload does indeed make a difference (with the current algorithm) like you mention; I know that with databases and filesystems, compression is commonly used to shift the balance from I&#x2F;O to CPU due to disk writes being slow (with reduced storage size being a side benefit but not usually the main motivation), but I also know that cryptographic verification being too slow can be an anti-feature if it makes brute forcing feasible, so the amount of CPU work needed might be pretty high still.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41531995&amp;goto=item%3Fid%3D41527675%2341531995\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41536618'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41536618' href='vote?id=41536618&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=toast0\" class=\"hnuser\">toast0</a> <span class=\"age\" title=\"2024-09-14T00:50:21.000000Z\"><a href=\"item?id=41536618\">23 hours ago</a></span> <span id=\"unv_41536618\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41531995\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41528046\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41536618\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">On my ancient box, only including a few lines of output:<p><pre><code>   $ openssl speed rsa ecdsa\n\n                     sign    verify    sign&#x2F;s verify&#x2F;s\n   rsa 1024 bits 0.000117s 0.000008s   8518.7 132449.2\n   rsa 2048 bits 0.000884s 0.000025s   1130.6  39499.3\n\n                                 sign    verify    sign&#x2F;s verify&#x2F;s\n    256 bits ecdsa (nistp256)   0.0000s   0.0001s  33210.9  11483.0\n    384 bits ecdsa (nistp384)   0.0009s   0.0008s   1070.6   1268.9\n</code></pre>\nIt&#x27;s 11 k verify&#x2F;s for ecda vs 39k verify&#x2F;s for rsa-2048. A TLS handshake needs at least one sign and verify from the server cert, plus some verifies for the signature on the cert chain (but those signatures are used over and over).</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41536618&amp;goto=item%3Fid%3D41527675%2341536618\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                        <tr class='athing comtr' id='41528046'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41528046' href='vote?id=41528046&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=stouset\" class=\"hnuser\">stouset</a> <span class=\"age\" title=\"2024-09-13T04:33:55.000000Z\"><a href=\"item?id=41528046\">1 day ago</a></span> <span id=\"unv_41528046\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41528168\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530209\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41528046\" n=\"10\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519<p>That’s not really anecdotal. Generating an ed25519 key is barely more than generating a random 256-bit value. Generating an RSA key is <i>significantly</i> more work.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41528046&amp;goto=item%3Fid%3D41527675%2341528046\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41528118'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41528118' href='vote?id=41528118&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=saghm\" class=\"hnuser\">saghm</a> <span class=\"age\" title=\"2024-09-13T04:55:00.000000Z\"><a href=\"item?id=41528118\">1 day ago</a></span> <span id=\"unv_41528118\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41528046\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530209\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41528118\" n=\"9\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I did say my understanding was probably naive; I didn&#x27;t know the details to be able to assert anything beyond my own observation!</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41528118&amp;goto=item%3Fid%3D41527675%2341528118\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41528180'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41528180' href='vote?id=41528180&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=stouset\" class=\"hnuser\">stouset</a> <span class=\"age\" title=\"2024-09-13T05:14:27.000000Z\"><a href=\"item?id=41528180\">1 day ago</a></span> <span id=\"unv_41528180\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41528118\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41535836\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41528180\" n=\"7\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Yep, not faulting you at all! I too was surprised when I found out that it’s a straight 256-bit random value with a few bits masked.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41528180&amp;goto=item%3Fid%3D41527675%2341528180\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41532036'><td><table border='0'>  <tr>    <td class='ind' indent='4'><img src=\"s.gif\" height=\"1\" width=\"160\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532036' href='vote?id=41532036&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=saghm\" class=\"hnuser\">saghm</a> <span class=\"age\" title=\"2024-09-13T15:19:28.000000Z\"><a href=\"item?id=41532036\">1 day ago</a></span> <span id=\"unv_41532036\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41528180\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41535836\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532036\" n=\"6\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I pretty quickly realized in college when learning about this stuff that the math was well over my head, and I shifted my focus more to understanding how to properly use cryptography rather than implement it (which turned out to be more important as a software engineer anyhow). In retrospect, I really appreciate how the professor I had in a security-focused course explicitly told us it was okay if we didn&#x27;t understand the math and wouldn&#x27;t be tested on it when going over how it worked.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532036&amp;goto=item%3Fid%3D41527675%2341532036\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41532485'><td><table border='0'>  <tr>    <td class='ind' indent='5'><img src=\"s.gif\" height=\"1\" width=\"200\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532485' href='vote?id=41532485&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=tptacek\" class=\"hnuser\">tptacek</a> <span class=\"age\" title=\"2024-09-13T16:04:58.000000Z\"><a href=\"item?id=41532485\">1 day ago</a></span> <span id=\"unv_41532485\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41532036\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41535836\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532485\" n=\"5\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Counterpoint: it&#x27;s not OK to skip the math with cryptography. You may not need to power through all of Silverman&#x27;s curve book (though: I don&#x27;t know for sure that&#x27;s true, which is why I don&#x27;t call myself a cryptography engineer), but you have to get as deep into the math as you can in order to safely use cryptographic algorithms.<p>If you&#x27;re math-avoidant, stick with high-level abstractions like NaCL and TLS. There&#x27;s nothing wrong with that!<p>A professor talking about and demonstrating cryptography at the level of individual algorithms is doing their class a disservice if they say &quot;none of the math will be on the test&quot;. The algorithms are enough to put something together that seems like it works; the math is what you need to find out if your resulting system actually does work. It&#x27;s where many of the fun bug classes live.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532485&amp;goto=item%3Fid%3D41527675%2341532485\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41533561'><td><table border='0'>  <tr>    <td class='ind' indent='6'><img src=\"s.gif\" height=\"1\" width=\"240\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41533561' href='vote?id=41533561&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=saghm\" class=\"hnuser\">saghm</a> <span class=\"age\" title=\"2024-09-13T18:03:55.000000Z\"><a href=\"item?id=41533561\">1 day ago</a></span> <span id=\"unv_41533561\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41532485\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41535836\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41533561\" n=\"4\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I&#x27;m not sure if you&#x27;re reading more into what I said than I intended, but I&#x27;m not convinced by this argument. You might have missed that this course was on security in general, not cryptography; not everything in the course was cryptographic related.<p>That said, I&#x27;d argue that for the vast majority of software engineers the type of stuff they&#x27;re dealing with can be dealt with without needing to know the math. For example, you don&#x27;t need to understand the math to behind the algorithms to know that bcrypt is a reasonable password hashing algorithm and that sha1 and md5 are not, or that salts are used to mitigate issues when users reuse passwords. These are principles that you can understand at a high level without fully understanding the underlying details. If anything, I think that overemphasis on requiring people to learn and understand the math has the effect of over-focusing on simpler algorithms that aren&#x27;t actually what people want to be using in practice due to the fact that they&#x27;re easier to teach and often foundational in conveying concepts that would need to be learned to understand the more complicated algorithms.<p>If using cryptographic algorithms directly requires knowing the math, then I&#x27;d agree that most people shouldn&#x27;t be using them directly, but I&#x27;d go further and say that a lack of libraries that are safe for people to use for software engineering without understanding the implementation is a failing of the ecosystem; as much as &quot;regular&quot; software engineering people (like myself!) can struggle with the math behind cryptography, I think that a lot of people developing cryptographic libraries struggle with building reasonable abstractions and making user-friendly APIs (which is a skill I think in general is not emphasized enough for most software engineers, to the detriment of everyone).</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41533561&amp;goto=item%3Fid%3D41527675%2341533561\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41533690'><td><table border='0'>  <tr>    <td class='ind' indent='7'><img src=\"s.gif\" height=\"1\" width=\"280\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41533690' href='vote?id=41533690&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=tptacek\" class=\"hnuser\">tptacek</a> <span class=\"age\" title=\"2024-09-13T18:16:52.000000Z\"><a href=\"item?id=41533690\">1 day ago</a></span> <span id=\"unv_41533690\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41533561\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41535836\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41533690\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Sure. It&#x27;s a failing of the ecosystem. That observation, a cup of coffee, and 1-3 years will get you a Kenny Paterson paper stunt-breaking your system. I feel where you&#x27;re coming from, but, respectfully: it does not matter.<p>My thing here is just: learn the math! Or do something else. I did! There is <i>so much to do</i> in our industry.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41533690&amp;goto=item%3Fid%3D41527675%2341533690\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41535453'><td><table border='0'>  <tr>    <td class='ind' indent='8'><img src=\"s.gif\" height=\"1\" width=\"320\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41535453' href='vote?id=41535453&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=saghm\" class=\"hnuser\">saghm</a> <span class=\"age\" title=\"2024-09-13T21:42:19.000000Z\"><a href=\"item?id=41535453\">1 day ago</a></span> <span id=\"unv_41535453\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41533690\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41535836\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41535453\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry.<p>I&#x27;m not sure I understand what you mean here by &quot;something else in our industry&quot;. Are you arguing that I&#x27;m not qualified to be a software engineer due to not understanding the math behind elliptic curves, or did you miss my repeated use of phrases like &quot;the vast majority of software engineers&quot; rather than some specialty where cryptography implementation details details are more important? If the latter, I can reassure you that I don&#x27;t work in cryptography, work on any cryptographic libraries, or have any specific responsibilities related to security beyond the general idea that all software being written should be secure. If the former, I&#x27;ll have to respectfully disagree, and suggest that maybe even if you aren&#x27;t willing to consider that you&#x27;re wrong about the math being a hard requirement for someone being qualified as a software engineer, it&#x27;s worth considering that you almost certainly don&#x27;t have enough information to conclude whether a stranger on the internet is qualified based on reading some of their comments.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41535453&amp;goto=item%3Fid%3D41527675%2341535453\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41543028'><td><table border='0'>  <tr>    <td class='ind' indent='9'><img src=\"s.gif\" height=\"1\" width=\"360\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41543028' href='vote?id=41543028&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=tptacek\" class=\"hnuser\">tptacek</a> <span class=\"age\" title=\"2024-09-14T21:15:04.000000Z\"><a href=\"item?id=41543028\">3 hours ago</a></span> <span id=\"unv_41543028\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41535453\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41535836\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41543028\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I&#x27;m certainly not saying you&#x27;re not qualified to be a software engineer.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41543028&amp;goto=item%3Fid%3D41527675%2341543028\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                                                <tr class='athing comtr' id='41535836'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41535836' href='vote?id=41535836&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=syncsynchalt\" class=\"hnuser\">syncsynchalt</a> <span class=\"age\" title=\"2024-09-13T22:36:24.000000Z\"><a href=\"item?id=41535836\">1 day ago</a></span> <span id=\"unv_41535836\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41528118\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41528180\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530209\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41535836\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Learning X25519 isn&#x27;t too hard!  See <a href=\"https:&#x2F;&#x2F;curves.xargs.org\" rel=\"nofollow\">https:&#x2F;&#x2F;curves.xargs.org</a> for the basics and <a href=\"https:&#x2F;&#x2F;x25519.xargs.org\" rel=\"nofollow\">https:&#x2F;&#x2F;x25519.xargs.org</a> for some refining details.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41535836&amp;goto=item%3Fid%3D41527675%2341535836\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                        <tr class='athing comtr' id='41530209'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530209' href='vote?id=41530209&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=upofadown\" class=\"hnuser\">upofadown</a> <span class=\"age\" title=\"2024-09-13T11:36:22.000000Z\"><a href=\"item?id=41530209\">1 day ago</a></span> <span id=\"unv_41530209\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41528046\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530898\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530209\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Another article from the same blog about optimizing RSA:<p>* <a href=\"https:&#x2F;&#x2F;www.amazon.science&#x2F;blog&#x2F;formal-verification-makes-rsa-faster-and-faster-to-deploy\" rel=\"nofollow\">https:&#x2F;&#x2F;www.amazon.science&#x2F;blog&#x2F;formal-verification-makes-rs...</a><p>RSA signature verification is already very fast and TLS doesn&#x27;t use RSA for encryption anymore so the problem reduces to optimizing signing operations.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530209&amp;goto=item%3Fid%3D41527675%2341530209\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41530898'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530898' href='vote?id=41530898&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=fefe23\" class=\"hnuser\">fefe23</a> <span class=\"age\" title=\"2024-09-13T13:05:58.000000Z\"><a href=\"item?id=41530898\">1 day ago</a></span> <span id=\"unv_41530898\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41532049\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530898\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Holy shit these claims are wild!\nIt&#x27;s not just a percent more performance here and there, the graphs look more like 50% more throughput on the same hardware (depending on the cpu architecture).<p>My immediate fear was that they optimized away the security features like absence of timing side channels, but they say they still have those.<p>They also claim to have formal proof of correctness, which is even more amazing, because they are not doing it on a symbolic level but on a machine instruction level. Apparently they tought their reasoning system the semantics of all the CPU instructions used in the assembler implementation.<p>I&#x27;ll still wait what djb has to say about this, but it looks freaking amazing to me.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530898&amp;goto=item%3Fid%3D41527675%2341530898\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41532049'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532049' href='vote?id=41532049&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=jonmon6691\" class=\"hnuser\">jonmon6691</a> <span class=\"age\" title=\"2024-09-13T15:21:04.000000Z\"><a href=\"item?id=41532049\">1 day ago</a></span> <span id=\"unv_41532049\"></span>          <span class='navs'>\n             | <a href=\"#41530898\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41536430\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532049\" n=\"4\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I&#x27;m assuming when they say that this improves user experience, that it implies the use case is primarily TLS. In which case store-now-decrypt-later attacks are already considered an urgent threat with regard to post quantum crypto. With FIPS 203 being released and Chrome is already using an implementation based on the draft standard, this seems like this algo (at least for TLS) should be on its way out.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532049&amp;goto=item%3Fid%3D41527675%2341532049\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41532421'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532421' href='vote?id=41532421&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=dlgeek\" class=\"hnuser\">dlgeek</a> <span class=\"age\" title=\"2024-09-13T15:59:36.000000Z\"><a href=\"item?id=41532421\">1 day ago</a></span> <span id=\"unv_41532421\"></span>          <span class='navs'>\n             | <a href=\"#41532049\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532624\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532421\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">The industry is moving to a hybrid that mixes classic crypto (including ECC) with post-quantum crypto. AWS has even turned this on in some places - <a href=\"https:&#x2F;&#x2F;aws.amazon.com&#x2F;about-aws&#x2F;whats-new&#x2F;2022&#x2F;03&#x2F;aws-kms-acm-support-latest-hybrid-post-quantum-tls-ciphers&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;aws.amazon.com&#x2F;about-aws&#x2F;whats-new&#x2F;2022&#x2F;03&#x2F;aws-kms-a...</a> from 2022 and <a href=\"https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;kms&#x2F;latest&#x2F;developerguide&#x2F;pqtls.html\" rel=\"nofollow\">https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;kms&#x2F;latest&#x2F;developerguide&#x2F;pqtls....</a> for some details.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532421&amp;goto=item%3Fid%3D41527675%2341532421\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41532598'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532598' href='vote?id=41532598&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=jonmon6691\" class=\"hnuser\">jonmon6691</a> <span class=\"age\" title=\"2024-09-13T16:17:23.000000Z\"><a href=\"item?id=41532598\">1 day ago</a></span> <span id=\"unv_41532598\"></span>          <span class='navs'>\n             | <a href=\"#41532049\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41532421\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532624\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532598\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Thanks I forgot about that. So if understand it right, the idea is to provide some insurance in the case that these relatively young algorithms are broken as they get exposed to more and more cryptanalysis</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532598&amp;goto=item%3Fid%3D41527675%2341532598\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41532624'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532624' href='vote?id=41532624&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=adgjlsfhk1\" class=\"hnuser\">adgjlsfhk1</a> <span class=\"age\" title=\"2024-09-13T16:19:08.000000Z\"><a href=\"item?id=41532624\">1 day ago</a></span> <span id=\"unv_41532624\"></span>          <span class='navs'>\n             | <a href=\"#41532049\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532421\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41536430\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532624\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">No one other than NIST is recommending phasing out pre-quantum crypto. Everyone else is using a combination of pre-quantum and post-quantum because trust in the security and robustness of the post-quantum ecosystem is fairly low.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532624&amp;goto=item%3Fid%3D41527675%2341532624\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41536430'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41536430' href='vote?id=41536430&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=webXL\" class=\"hnuser\">webXL</a> <span class=\"age\" title=\"2024-09-14T00:16:38.000000Z\"><a href=\"item?id=41536430\">1 day ago</a></span> <span id=\"unv_41536430\"></span>          <span class='navs'>\n             | <a href=\"#41532049\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41529881\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41536430\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Why don&#x27;t they just focus on making a Gravitron variant with those algorithms in the circuitry?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41536430&amp;goto=item%3Fid%3D41527675%2341536430\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41529881'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41529881' href='vote?id=41529881&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=londons_explore\" class=\"hnuser\">londons_explore</a> <span class=\"age\" title=\"2024-09-13T10:40:26.000000Z\"><a href=\"item?id=41529881\">1 day ago</a></span> <span id=\"unv_41529881\"></span>          <span class='navs'>\n             | <a href=\"#41536430\" class=\"clicky\" aria-hidden=\"true\">prev</a> <a class=\"togg clicky\" id=\"41529881\" n=\"5\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext cAE\">Does 25519 suffer from key&#x2F;data-dependant execution time?<p>Is this implementation resistant to that?<p>If it isn&#x27;t, it&#x27;s kinda a footgun which shouldn&#x27;t be published for general use.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41529881&amp;goto=item%3Fid%3D41527675%2341529881\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41535817'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41535817' href='vote?id=41535817&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=syncsynchalt\" class=\"hnuser\">syncsynchalt</a> <span class=\"age\" title=\"2024-09-13T22:32:44.000000Z\"><a href=\"item?id=41535817\">1 day ago</a></span> <span id=\"unv_41535817\"></span>          <span class='navs'>\n             | <a href=\"#41529881\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530302\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41535817\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Curve25519 is designed to be resistant to timing attacks, such as clamping the 254th bit in x25519 keys to 1 so that implementors can not optimize away a multiplication round.<p>That doesn&#x27;t mean that this implementation doesn&#x27;t have timing attacks, but the implementors claim they chose mechanisms which should be constant-time.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41535817&amp;goto=item%3Fid%3D41527675%2341535817\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41530302'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530302' href='vote?id=41530302&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=vitus\" class=\"hnuser\">vitus</a> <span class=\"age\" title=\"2024-09-13T11:50:31.000000Z\"><a href=\"item?id=41530302\">1 day ago</a></span> <span id=\"unv_41530302\"></span>          <span class='navs'>\n             | <a href=\"#41529881\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41535817\" class=\"clicky\" aria-hidden=\"true\">prev</a> <a class=\"togg clicky\" id=\"41530302\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; Does 25519 suffer from key&#x2F;data-dependant execution time?<p>I mean, when implemented naively, yes, but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations.<p>From the article:<p>&gt; We also do our best to execute the algorithms in constant time, to thwart side-channel attacks that infer secret information from the durations of computations.<p><a href=\"https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;s2n-bignum\">https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;s2n-bignum</a> (where most of the heavy lifting is done, per the article) further explicitly states that &quot;Each function is moreover written in a constant-time style to avoid timing side-channels.&quot;</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530302&amp;goto=item%3Fid%3D41527675%2341530302\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41531101'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41531101' href='vote?id=41531101&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=justinwsmith\" class=\"hnuser\">justinwsmith</a> <span class=\"age\" title=\"2024-09-13T13:30:42.000000Z\"><a href=\"item?id=41531101\">1 day ago</a></span> <span id=\"unv_41531101\"></span>          <span class='navs'>\n             | <a href=\"#41529881\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41530302\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41531853\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41531101\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">The next paragraph makes a slightly stronger statement about its constant-time&#x27;ness:<p>&gt; Our implementations of x&#x2F;Ed25519 are designed with constant time in mind. They perform exactly the same sequence of basic CPU instructions regardless of the input values, and they avoid any CPU instructions that might have data-dependent timing.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41531101&amp;goto=item%3Fid%3D41527675%2341531101\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41531853'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41531853' href='vote?id=41531853&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=deathanatos\" class=\"hnuser\">deathanatos</a> <span class=\"age\" title=\"2024-09-13T14:59:49.000000Z\"><a href=\"item?id=41531853\">1 day ago</a></span> <span id=\"unv_41531853\"></span>          <span class='navs'>\n             | <a href=\"#41529881\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41530302\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41531101\" class=\"clicky\" aria-hidden=\"true\">prev</a> <a class=\"togg clicky\" id=\"41531853\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; <i>but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations.</i><p>When I see CVE-fests like — <a href=\"https:&#x2F;&#x2F;people.redhat.com&#x2F;~hkario&#x2F;marvin&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;people.redhat.com&#x2F;~hkario&#x2F;marvin&#x2F;</a> — … I just do not come away with that impression.<p>[Widely used] Cryptographic Rust crates offering &quot;constant time&quot; operations in &quot;pure Rust&quot; — but Rust <i>has no primitives for doing constant time operations</i>, so it&#x27;s only through hopes and prayers that it might actually work, and with no guarantee anywhere that it actually <i>should</i>.<p>(Other, less timing attack related stuff, but e.g., major companies still not supporting anything beyond RSA.)</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41531853&amp;goto=item%3Fid%3D41527675%2341531853\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                        </table>\n  <br><br>\n</td></tr>\n<tr><td><img src=\"s.gif\" height=\"10\" width=\"0\"><table width=\"100%\" cellspacing=\"0\" cellpadding=\"1\"><tr><td bgcolor=\"#ff6600\"></td></tr></table><br>\n<center><span class=\"yclinks\"><a href=\"newsguidelines.html\">Guidelines</a> | <a href=\"newsfaq.html\">FAQ</a> | <a href=\"lists\">Lists</a> | <a href=\"https://github.com/HackerNews/API\">API</a> | <a href=\"security.html\">Security</a> | <a href=\"https://www.ycombinator.com/legal/\">Legal</a> | <a href=\"https://www.ycombinator.com/apply/\">Apply to YC</a> | <a href=\"mailto:hn@ycombinator.com\">Contact</a></span><br><br>\n<form method=\"get\" action=\"//hn.algolia.com/\">Search: <input type=\"text\" name=\"q\" size=\"17\" autocorrect=\"off\" spellcheck=\"false\" autocapitalize=\"off\" autocomplete=\"off\"></form></center></td></tr>      </table></center></body>\n      <script type='text/javascript' src='hn.js?u0LUEXpE1l7JwndlBn23'></script>\n  </html>\n",
  "html": "<html lang=\"en\" op=\"item\"><head><meta name=\"referrer\" content=\"origin\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><link rel=\"stylesheet\" type=\"text/css\" href=\"news.css?u0LUEXpE1l7JwndlBn23\">\n        <link rel=\"icon\" href=\"y18.svg\">\n    <link rel=\"canonical\" href=\"https://news.ycombinator.com/item?id=41527675\"/>            <title>Better-performing “25519” elliptic-curve cryptography | Hacker News</title></head><body><center><table id=\"hnmain\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"85%\" bgcolor=\"#f6f6ef\">\n        <tr><td bgcolor=\"#ff6600\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"padding:2px\"><tr><td style=\"width:18px;padding-right:4px\"><a href=\"https://news.ycombinator.com\"><img src=\"y18.svg\" width=\"18\" height=\"18\" style=\"border:1px white solid; display:block\"></a></td>\n                  <td style=\"line-height:12pt; height:10px;\"><span class=\"pagetop\"><b class=\"hnname\"><a href=\"news\">Hacker News</a></b>\n                            <a href=\"newest\">new</a> | <a href=\"front\">past</a> | <a href=\"newcomments\">comments</a> | <a href=\"ask\">ask</a> | <a href=\"show\">show</a> | <a href=\"jobs\">jobs</a> | <a href=\"submit\" rel=\"nofollow\">submit</a>            </span></td><td style=\"text-align:right;padding-right:4px;\"><span class=\"pagetop\">\n                              <a href=\"login?goto=item%3Fid%3D41527675\">login</a>\n                          </span></td>\n              </tr></table></td></tr>\n<tr id=\"pagespace\" title=\"Better-performing “25519” elliptic-curve cryptography\" style=\"height:10px\"></tr><tr><td><table class=\"fatitem\" border=\"0\">\n        <tr class='athing' id='41527675'>\n      <td align=\"right\" valign=\"top\" class=\"title\"><span class=\"rank\"></span></td>      <td valign=\"top\" class=\"votelinks\"><center><a id='up_41527675' href='vote?id=41527675&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center></td><td class=\"title\"><span class=\"titleline\"><a href=\"https://www.amazon.science/blog/better-performing-25519-elliptic-curve-cryptography\">Better-performing “25519” elliptic-curve cryptography</a><span class=\"sitebit comhead\"> (<a href=\"from?site=amazon.science\"><span class=\"sitestr\">amazon.science</span></a>)</span></span></td></tr><tr><td colspan=\"2\"></td><td class=\"subtext\"><span class=\"subline\">\n          <span class=\"score\" id=\"score_41527675\">212 points</span> by <a href=\"user?id=lemaudit\" class=\"hnuser\">lemaudit</a> <span class=\"age\" title=\"2024-09-13T02:51:52.000000Z\"><a href=\"item?id=41527675\">1 day ago</a></span> <span id=\"unv_41527675\"></span> | <a href=\"hide?id=41527675&amp;goto=item%3Fid%3D41527675\">hide</a> | <a href=\"https://hn.algolia.com/?query=Better-performing%20%E2%80%9C25519%E2%80%9D%20elliptic-curve%20cryptography&type=story&dateRange=all&sort=byDate&storyText=false&prefix&page=0\" class=\"hnpast\">past</a> | <a href=\"fave?id=41527675&amp;auth=24699b50103550f6489b5ced7e981adadd23f1d3\">favorite</a> | <a href=\"item?id=41527675\">87&nbsp;comments</a>        </span>\n              </td></tr>\n            <tr><td style=\"height:10px\"></td></tr><tr><td colspan=\"2\"></td><td><form action=\"comment\" method=\"post\"><input type=\"hidden\" name=\"parent\" value=\"41527675\"><input type=\"hidden\" name=\"goto\" value=\"item?id=41527675\"><input type=\"hidden\" name=\"hmac\" value=\"5911e0e686665ed6ec0ff6f9bf019f4b455d89b9\"><textarea name=\"text\" rows=\"8\" cols=\"80\" wrap=\"virtual\"></textarea><br><br>\n<input type=\"submit\" value=\"add comment\"></form></td></tr>  </table><br><br><table border=\"0\" class='comment-tree'>\n            <tr class='athing comtr' id='41528060'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41528060' href='vote?id=41528060&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a> <span class=\"age\" title=\"2024-09-13T04:36:19.000000Z\"><a href=\"item?id=41528060\">1 day ago</a></span> <span id=\"unv_41528060\"></span>          <span class='navs'>\n             | <a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41528060\" n=\"38\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">The firedancer team at one of the better HFT firms wrote an AVX512 optimized implementation of ed25519 and X25519 that’s significantly faster than OpenSSL.<p><a href=\"https:&#x2F;&#x2F;github.com&#x2F;firedancer-io&#x2F;firedancer&#x2F;pull&#x2F;716\">https:&#x2F;&#x2F;github.com&#x2F;firedancer-io&#x2F;firedancer&#x2F;pull&#x2F;716</a><p>Ditto for sha256: <a href=\"https:&#x2F;&#x2F;github.com&#x2F;firedancer-io&#x2F;firedancer&#x2F;pull&#x2F;778\">https:&#x2F;&#x2F;github.com&#x2F;firedancer-io&#x2F;firedancer&#x2F;pull&#x2F;778</a><p>And sha512: <a href=\"https:&#x2F;&#x2F;github.com&#x2F;firedancer-io&#x2F;firedancer&#x2F;pull&#x2F;760\">https:&#x2F;&#x2F;github.com&#x2F;firedancer-io&#x2F;firedancer&#x2F;pull&#x2F;760</a><p>If you’re an optimization nerd, this codebase is wild.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41528060&amp;goto=item%3Fid%3D41527675%2341528060\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41529393'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41529393' href='vote?id=41529393&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=syzygyhack\" class=\"hnuser\">syzygyhack</a> <span class=\"age\" title=\"2024-09-13T09:02:00.000000Z\"><a href=\"item?id=41529393\">1 day ago</a></span> <span id=\"unv_41529393\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41531697\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41529393\" n=\"8\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I laughed a little at calling Firedancer contributors &quot;a team at a HFT firm&quot;.<p>Not that you are technically wrong, not at all, that&#x27;s where Jump came from. It&#x27;s just that this is all completely blockchain-driven optimization, but the b-word is so dirty now that we&#x27;ve gotta go back to using TradFi for the rep.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41529393&amp;goto=item%3Fid%3D41527675%2341529393\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41530425'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530425' href='vote?id=41530425&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a> <span class=\"age\" title=\"2024-09-13T12:10:08.000000Z\"><a href=\"item?id=41530425\">1 day ago</a></span> <span id=\"unv_41530425\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529393\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532043\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530425\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">It’s an optimization in hashing algorithms that is around twice as fast as the ones Amazon is posting in thus article for the same eliptic curves.<p>If the Amazon improvements are hacker news worthy (they are) this seems reasonable contextually.<p>Also, I worked for Jump for almost 12 years :)</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530425&amp;goto=item%3Fid%3D41527675%2341530425\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41532043'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532043' href='vote?id=41532043&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=webXL\" class=\"hnuser\">webXL</a> <span class=\"age\" title=\"2024-09-13T15:20:25.000000Z\"><a href=\"item?id=41532043\">1 day ago</a></span> <span id=\"unv_41532043\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529393\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530425\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41531697\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532043\" n=\"6\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">What makes the “b-word” dirty?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532043&amp;goto=item%3Fid%3D41527675%2341532043\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41532456'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532456' href='vote?id=41532456&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a> <span class=\"age\" title=\"2024-09-13T16:02:17.000000Z\"><a href=\"item?id=41532456\">1 day ago</a></span> <span id=\"unv_41532456\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41532043\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532723\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532456\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I didn’t use it because I didn’t find it relevant. They’re using hashing and EC algorithms and they’re improving them.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532456&amp;goto=item%3Fid%3D41527675%2341532456\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41532723'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532723' href='vote?id=41532723&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=jandrese\" class=\"hnuser\">jandrese</a> <span class=\"age\" title=\"2024-09-13T16:28:10.000000Z\"><a href=\"item?id=41532723\">1 day ago</a></span> <span id=\"unv_41532723\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41532043\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532456\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41532409\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532723\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">It&#x27;s hard to separate from the sea of grifters, con men, cranks, and scammers that infest the domain.  Just using the word is a yellow flag that you might be some kind of whacko, even if all you really want to talk about is the math.<p>People have to forever be on guard that you might at any point pivot to all taxation is theft or how you have formed your own micro nation that consists entirely of yourself and thus have diplomatic immunity from all prosecution.  Because it happens.  Or maybe you have a once in a lifetime deal to buy this receipt like object for some hideous art that is guaranteed to appreciate in value millions of percent.  It&#x27;s just the crowd that has aggregated around crypto currencies includes a lot of untrustworthy people.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532723&amp;goto=item%3Fid%3D41527675%2341532723\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41536393'><td><table border='0'>  <tr>    <td class='ind' indent='4'><img src=\"s.gif\" height=\"1\" width=\"160\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41536393' href='vote?id=41536393&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=webXL\" class=\"hnuser\">webXL</a> <span class=\"age\" title=\"2024-09-14T00:12:11.000000Z\"><a href=\"item?id=41536393\">1 day ago</a></span> <span id=\"unv_41536393\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41532723\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532409\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41536393\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c73\">Why do people need to be on guard for those beliefs? People should be critical thinkers and not thought police.<p>Granted, there are all kinds of whackos in crypto, but we should only be concerned about the immoral ones trying to scam us out of our money: SBF, Do-Kwon, and the like.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41536393&amp;goto=item%3Fid%3D41527675%2341536393\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41537011'><td><table border='0'>  <tr>    <td class='ind' indent='5'><img src=\"s.gif\" height=\"1\" width=\"200\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41537011' href='vote?id=41537011&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=sweeter\" class=\"hnuser\">sweeter</a> <span class=\"age\" title=\"2024-09-14T02:22:44.000000Z\"><a href=\"item?id=41537011\">22 hours ago</a></span> <span id=\"unv_41537011\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41536393\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532409\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41537011\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">people are legitimately buying farming land in the US and currently suing farmers for &quot;anti-trust&quot; for refusing to sell them their land so that they can quite literally create a crypto based sovereign micro-nation of wealthy tech VC&#x27;s. [1] and I think that is a selfish, vile and delusional thing to do. It has nothing to do with &quot;thought police&quot; its as simple as looking at the impact of their actions and beliefs and making the decision to reject that way of thinking and way of life.<p>1: <a href=\"https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=PHlcAx-I0oY\" rel=\"nofollow\">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=PHlcAx-I0oY</a></div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41537011&amp;goto=item%3Fid%3D41527675%2341537011\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                        <tr class='athing comtr' id='41532409'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532409' href='vote?id=41532409&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=ShroudedNight\" class=\"hnuser\">ShroudedNight</a> <span class=\"age\" title=\"2024-09-13T15:57:52.000000Z\"><a href=\"item?id=41532409\">1 day ago</a></span> <span id=\"unv_41532409\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41532043\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532723\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41531697\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532409\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">The trough of disillusionment carved out by grifters burning the peat of enthusiasm unsustainably.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532409&amp;goto=item%3Fid%3D41527675%2341532409\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                        <tr class='athing comtr' id='41531697'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41531697' href='vote?id=41531697&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=nly\" class=\"hnuser\">nly</a> <span class=\"age\" title=\"2024-09-13T14:42:32.000000Z\"><a href=\"item?id=41531697\">1 day ago</a></span> <span id=\"unv_41531697\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41529393\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41532069\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41531697\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">A lot of slowness comes typically comes from wanting to avoid methods that enable side-channel timing attacks</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41531697&amp;goto=item%3Fid%3D41527675%2341531697\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41532069'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532069' href='vote?id=41532069&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=inopinatus\" class=\"hnuser\">inopinatus</a> <span class=\"age\" title=\"2024-09-13T15:23:26.000000Z\"><a href=\"item?id=41532069\">1 day ago</a></span> <span id=\"unv_41532069\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41531697\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41528917\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532069\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I see they learned clang’s dirty little secret over intrinsics viz. that in producing the IR it deviates (sometimes dramatically when AVX-512 is concerned) from the documented opcodes and the results are inevitably detrimental.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532069&amp;goto=item%3Fid%3D41527675%2341532069\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41536223'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41536223' href='vote?id=41536223&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=astrange\" class=\"hnuser\">astrange</a> <span class=\"age\" title=\"2024-09-13T23:46:47.000000Z\"><a href=\"item?id=41536223\">1 day ago</a></span> <span id=\"unv_41536223\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41532069\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41528917\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41536223\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">This is why ffmpeg uses assembly, and people get extremely mad when you say it&#x27;s done for a reason, because they always want to come up with a fancier abstraction (usually cross-platform) which then defeats the purpose because it doesn&#x27;t actually work.<p>nb those abstractions do make sense when you can only afford to write a single implementation of the algorithm; then you&#x27;re just talking about a high level programming language. But they frequently fail to achieve their goal when you&#x27;re writing a second implementation for the sole purpose of being faster.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41536223&amp;goto=item%3Fid%3D41527675%2341536223\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41528917'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41528917' href='vote?id=41528917&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=electricshampo1\" class=\"hnuser\">electricshampo1</a> <span class=\"age\" title=\"2024-09-13T07:40:36.000000Z\"><a href=\"item?id=41528917\">1 day ago</a></span> <span id=\"unv_41528917\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532069\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530161\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41528917\" n=\"6\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Completely agree re: firedancer codebase. There is a level of thought and discipline wrt performance that I have never seen anywhere else.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41528917&amp;goto=item%3Fid%3D41527675%2341528917\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41531700'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41531700' href='vote?id=41531700&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=dhx\" class=\"hnuser\">dhx</a> <span class=\"age\" title=\"2024-09-13T14:42:41.000000Z\"><a href=\"item?id=41531700\">1 day ago</a></span> <span id=\"unv_41531700\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41528917\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530516\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41531700\" n=\"4\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">It&#x27;s much more than just performance they&#x27;ve thought about. Here are some of the secure programming practices that have been implemented:<p><pre><code>  &#x2F;* All the functions in this file are considered &quot;secure&quot;, specifically:\n     - Constant time in the input, i.e. the input can be a secret[2]\n     - Small and auditable code base, incl. simple types\n     - Either, no local variables = no need to clear them before exit (most functions)\n     - Or, only static allocation + clear local variable before exit (fd_ed25519_scalar_mul_base_const_time)\n     - Clear registers via FD_FN_SENSITIVE[3]\n     - C safety\n  *&#x2F;\n</code></pre>\nlibsodium[4] implements similar mechanisms, and Linux kernel encryption code does too (example: use of kfree_sensitive)[5]. However, firedancer appears to better avoid moving secrets outside of CPU registers, and [3] explains that libraries such as libsodium have inadequate zeroisation, something which firedancer claims to improve upon.<p>[1] <a href=\"https:&#x2F;&#x2F;github.com&#x2F;firedancer-io&#x2F;firedancer&#x2F;blob&#x2F;main&#x2F;src&#x2F;ballet&#x2F;ed25519&#x2F;fd_curve25519_secure.c\">https:&#x2F;&#x2F;github.com&#x2F;firedancer-io&#x2F;firedancer&#x2F;blob&#x2F;main&#x2F;src&#x2F;ba...</a><p>[2] <a href=\"https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Elliptic_curve_point_multiplication#Constant_time_Montgomery_ladder\" rel=\"nofollow\">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Elliptic_curve_point_multiplic...</a><p>[3] <a href=\"https:&#x2F;&#x2F;eprint.iacr.org&#x2F;2023&#x2F;1713\" rel=\"nofollow\">https:&#x2F;&#x2F;eprint.iacr.org&#x2F;2023&#x2F;1713</a><p>[4] <a href=\"https:&#x2F;&#x2F;libsodium.gitbook.io&#x2F;doc&#x2F;internals#security-first\" rel=\"nofollow\">https:&#x2F;&#x2F;libsodium.gitbook.io&#x2F;doc&#x2F;internals#security-first</a><p>[5] <a href=\"https:&#x2F;&#x2F;git.kernel.org&#x2F;pub&#x2F;scm&#x2F;linux&#x2F;kernel&#x2F;git&#x2F;torvalds&#x2F;linux.git&#x2F;tree&#x2F;crypto&#x2F;ecc.c\" rel=\"nofollow\">https:&#x2F;&#x2F;git.kernel.org&#x2F;pub&#x2F;scm&#x2F;linux&#x2F;kernel&#x2F;git&#x2F;torvalds&#x2F;lin...</a></div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41531700&amp;goto=item%3Fid%3D41527675%2341531700\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41531772'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41531772' href='vote?id=41531772&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=tptacek\" class=\"hnuser\">tptacek</a> <span class=\"age\" title=\"2024-09-13T14:51:03.000000Z\"><a href=\"item?id=41531772\">1 day ago</a></span> <span id=\"unv_41531772\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41531700\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530516\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41531772\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">These are table stakes for core cryptographic code, and SOT crypto code --- like the Amazon implementation this story is about --- tend at this point all to be derived from formal methods.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41531772&amp;goto=item%3Fid%3D41527675%2341531772\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41532199'><td><table border='0'>  <tr>    <td class='ind' indent='4'><img src=\"s.gif\" height=\"1\" width=\"160\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532199' href='vote?id=41532199&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=dhx\" class=\"hnuser\">dhx</a> <span class=\"age\" title=\"2024-09-13T15:37:31.000000Z\"><a href=\"item?id=41532199\">1 day ago</a></span> <span id=\"unv_41532199\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41531772\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530516\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532199\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">As an example, the Amazon implementation doesn&#x27;t refer to gcc&#x27;s[1] and clang&#x27;s[2] &quot;zero_call_used_regs&quot; to zeroise CPU registers upon return or exception of functions working on crypto secrets. OpenSSL doesn&#x27;t either.[3] firedancer _does_ use &quot;zero_call_used_regs&quot; to allow gcc&#x2F;clang to zeroise used CPU registers.[9]<p>As another example, the Amazon implementation also doesn&#x27;t refer to gcc&#x27;s &quot;strub&quot; attribute which zeroises the function&#x27;s stack upon return or exception of functions working on crypto secrets.[4][5] OpenSSL doesn&#x27;t either.[3] firedancer _does_ use the &quot;strub&quot; attribute to allow gcc to zeroise the function&#x27;s stack.[9]<p>Is there a performance impact? [6] has the overhead at 0% for X25519 for implementing CPU register and stack zeroisation. Compiling the Linux kernel with &quot;CONFIG_ZERO_CALL_USED_REGS=1&quot; for x64_64 (impacting all kernel functions) was found to result in a 1-1.5% performance penalty.[7][8]<p>[1] <a href=\"https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;gcc&#x2F;Common-Function-Attributes.html#index-zero_005fcall_005fused_005fregs-function-attribute\" rel=\"nofollow\">https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;gcc&#x2F;Common-Function-Attribute...</a><p>[2] <a href=\"https:&#x2F;&#x2F;clang.llvm.org&#x2F;docs&#x2F;AttributeReference.html#zero-call-used-regs\" rel=\"nofollow\">https:&#x2F;&#x2F;clang.llvm.org&#x2F;docs&#x2F;AttributeReference.html#zero-cal...</a><p>[3] <a href=\"https:&#x2F;&#x2F;github.com&#x2F;openssl&#x2F;openssl&#x2F;discussions&#x2F;24321\">https:&#x2F;&#x2F;github.com&#x2F;openssl&#x2F;openssl&#x2F;discussions&#x2F;24321</a><p>[4] <a href=\"https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;gcc-14.2.0&#x2F;gcc&#x2F;Common-Type-Attributes.html#index-strub-type-attribute\" rel=\"nofollow\">https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;gcc-14.2.0&#x2F;gcc&#x2F;Common-Type-At...</a><p>[5] <a href=\"https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;gcc&#x2F;Stack-Scrubbing.html\" rel=\"nofollow\">https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;gcc&#x2F;Stack-Scrubbing.html</a><p>[6] <a href=\"https:&#x2F;&#x2F;eprint.iacr.org&#x2F;2023&#x2F;1713.pdf\" rel=\"nofollow\">https:&#x2F;&#x2F;eprint.iacr.org&#x2F;2023&#x2F;1713.pdf</a><p>[7] <a href=\"https:&#x2F;&#x2F;www.phoronix.com&#x2F;review&#x2F;zero-used-regs&#x2F;5\" rel=\"nofollow\">https:&#x2F;&#x2F;www.phoronix.com&#x2F;review&#x2F;zero-used-regs&#x2F;5</a><p>[8] <a href=\"https:&#x2F;&#x2F;lore.kernel.org&#x2F;lkml&#x2F;20210505191804.4015873-1-keescook@chromium.org&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;lore.kernel.org&#x2F;lkml&#x2F;20210505191804.4015873-1-keesco...</a><p>[9] FD_FN_UNSANITIZED: <a href=\"https:&#x2F;&#x2F;github.com&#x2F;firedancer-io&#x2F;firedancer&#x2F;blob&#x2F;master&#x2F;src&#x2F;util&#x2F;fd_util_base.h\">https:&#x2F;&#x2F;github.com&#x2F;firedancer-io&#x2F;firedancer&#x2F;blob&#x2F;master&#x2F;src&#x2F;...</a></div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532199&amp;goto=item%3Fid%3D41527675%2341532199\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41532761'><td><table border='0'>  <tr>    <td class='ind' indent='5'><img src=\"s.gif\" height=\"1\" width=\"200\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532761' href='vote?id=41532761&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=jandrese\" class=\"hnuser\">jandrese</a> <span class=\"age\" title=\"2024-09-13T16:32:09.000000Z\"><a href=\"item?id=41532761\">1 day ago</a></span> <span id=\"unv_41532761\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41532199\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530516\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532761\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Zeroizing a register seems pretty straightforward.  Zeroizing any cache that it may have touched seems a lot more complex.  I guess that&#x27;s why they work so hard to keep everything in registers.  Lucky for them we aren&#x27;t in the x86 era anymore and there are a useful number of registers.  I&#x27;ll need to read up on how they avoid context switches while their registers are loaded.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532761&amp;goto=item%3Fid%3D41527675%2341532761\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                              <tr class='athing comtr' id='41530516'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530516' href='vote?id=41530516&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a> <span class=\"age\" title=\"2024-09-13T12:21:28.000000Z\"><a href=\"item?id=41530516\">1 day ago</a></span> <span id=\"unv_41530516\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41528917\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41531700\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530161\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530516\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">That team is full of world experts in high performance computing.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530516&amp;goto=item%3Fid%3D41527675%2341530516\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41530161'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530161' href='vote?id=41530161&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=pantalaimon\" class=\"hnuser\">pantalaimon</a> <span class=\"age\" title=\"2024-09-13T11:29:01.000000Z\"><a href=\"item?id=41530161\">1 day ago</a></span> <span id=\"unv_41530161\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41528917\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530161\" n=\"8\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">That looks really neat, but I still don&#x27;t understand what firedancer actually <i>is</i> - what is a validator client for Solana and why does it need it&#x27;s own crypto library?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530161&amp;goto=item%3Fid%3D41527675%2341530161\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41530509'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530509' href='vote?id=41530509&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a> <span class=\"age\" title=\"2024-09-13T12:21:02.000000Z\"><a href=\"item?id=41530509\">1 day ago</a></span> <span id=\"unv_41530509\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41530161\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530509\" n=\"7\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">It’s a new from scratch implementation of a validator for Solana the fastest blockchain by several orders of magnitude. The slowest part is signature verification so they sped up hashing to improve performance of the entire system.<p>They follow a first principles approach (the lead has a few physics degrees) and opted to speed up the cryptography. The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of.<p>It’s a win in cryptography, much like this Amazon post is, except it’s slower than the firedancer implementation.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530509&amp;goto=item%3Fid%3D41527675%2341530509\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41531439'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41531439' href='vote?id=41531439&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=scrlk\" class=\"hnuser\">scrlk</a> <span class=\"age\" title=\"2024-09-13T14:10:07.000000Z\"><a href=\"item?id=41531439\">1 day ago</a></span> <span id=\"unv_41531439\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41530509\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532616\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41531439\" n=\"4\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Off topic - is Firedancer going to survive Jump winding down its crypto arm?<p>Kanav left, they liquidated a huge staked ETH position a few months ago (+ a bunch of other coins), and the SEC&#x2F;CFTC is all over them for the Terra Luna fiasco.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41531439&amp;goto=item%3Fid%3D41527675%2341531439\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41532404'><td><table border='0'>  <tr>    <td class='ind' indent='4'><img src=\"s.gif\" height=\"1\" width=\"160\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532404' href='vote?id=41532404&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a> <span class=\"age\" title=\"2024-09-13T15:57:30.000000Z\"><a href=\"item?id=41532404\">1 day ago</a></span> <span id=\"unv_41532404\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41531439\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532616\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532404\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Rumors of Jump’s demise are greatly exaggerated. Check the torrent of firedancer talks at Solana Breakpoint literally next week and decide yourself.<p>Folks have said jump is gonna die for 20+ years. They’ve been around 30ish…</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532404&amp;goto=item%3Fid%3D41527675%2341532404\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41534457'><td><table border='0'>  <tr>    <td class='ind' indent='5'><img src=\"s.gif\" height=\"1\" width=\"200\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41534457' href='vote?id=41534457&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=sangnoir\" class=\"hnuser\">sangnoir</a> <span class=\"age\" title=\"2024-09-13T19:41:12.000000Z\"><a href=\"item?id=41534457\">1 day ago</a></span> <span id=\"unv_41534457\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41532404\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532616\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41534457\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Parent asked a specific question about the survival of <i>Firedancer</i> and winding down of the <i>crypto arm</i> though. No demise of Jump mentioned.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41534457&amp;goto=item%3Fid%3D41527675%2341534457\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41535913'><td><table border='0'>  <tr>    <td class='ind' indent='6'><img src=\"s.gif\" height=\"1\" width=\"240\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41535913' href='vote?id=41535913&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a> <span class=\"age\" title=\"2024-09-13T22:48:12.000000Z\"><a href=\"item?id=41535913\">1 day ago</a></span> <span id=\"unv_41535913\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41534457\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532616\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41535913\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">You will see a half dozen or so talks about firedancer and probably 35-40 or so of us total (I’m at the company that does security for firedancer, Asymmetric Research. We were founded by former jumpers).<p>You can make the determination on your own, but there will be an obvious large showing of firedancer folks and some exciting updates for the project.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41535913&amp;goto=item%3Fid%3D41527675%2341535913\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                              <tr class='athing comtr' id='41532616'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532616' href='vote?id=41532616&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=caned\" class=\"hnuser\">caned</a> <span class=\"age\" title=\"2024-09-13T16:18:39.000000Z\"><a href=\"item?id=41532616\">1 day ago</a></span> <span id=\"unv_41532616\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41530509\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41531439\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532616\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of.<p>For users that have AVX-512, which isn&#x27;t widely available (AMD Zen 4 &#x2F; Zen 5, Sapphire Rapids)...</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532616&amp;goto=item%3Fid%3D41527675%2341532616\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41533002'><td><table border='0'>  <tr>    <td class='ind' indent='4'><img src=\"s.gif\" height=\"1\" width=\"160\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41533002' href='vote?id=41533002&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a> <span class=\"age\" title=\"2024-09-13T16:57:32.000000Z\"><a href=\"item?id=41533002\">1 day ago</a></span> <span id=\"unv_41533002\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41532616\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41533002\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Sure, and cpus supporting it will proliferate. Shockingly to no one reading hacker news... Both software and hardware continue to improve with time generally speaking. This was a huge software improvement on hardware that supports that functionality. It is a huge win for anyone wanting to use these algorithms where they can afford hardware that supports it.<p>We should celebrate Amazon&#x27;s improvements and we should celebrate these improvements. Both are great for the future of technology, regardless of why they were initially developed. Improving tech and keeping it open source is good for all.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41533002&amp;goto=item%3Fid%3D41527675%2341533002\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                              <tr class='athing comtr' id='41529425'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41529425' href='vote?id=41529425&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=4gotunameagain\" class=\"hnuser\">4gotunameagain</a> <span class=\"age\" title=\"2024-09-13T09:09:11.000000Z\"><a href=\"item?id=41529425\">1 day ago</a></span> <span id=\"unv_41529425\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530161\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41532959\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41529425\" n=\"11\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">So many manhours spent on finding better ways to shovel around money and pocket what falls from the cracks.<p>What a wasteful and unproductive enterprise, considering the vast majority of the devised improvements never see the public eye.<p>Still, impressive work. Imagine if those brilliant minds behind this were focused somewhere else.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41529425&amp;goto=item%3Fid%3D41527675%2341529425\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41529465'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41529465' href='vote?id=41529465&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=posnet\" class=\"hnuser\">posnet</a> <span class=\"age\" title=\"2024-09-13T09:17:00.000000Z\"><a href=\"item?id=41529465\">1 day ago</a></span> <span id=\"unv_41529465\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532000\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41529465\" n=\"6\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">The greatest minds of our generation spend their time thinking about how to:<p>- make people click on ads<p>- make trading algos faster<p>- replace human artists<p>- build more efficient killing machines<p>- destroy any remaining concept of privacy</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41529465&amp;goto=item%3Fid%3D41527675%2341529465\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41536712'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41536712' href='vote?id=41536712&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=geodel\" class=\"hnuser\">geodel</a> <span class=\"age\" title=\"2024-09-14T01:13:10.000000Z\"><a href=\"item?id=41536712\">23 hours ago</a></span> <span id=\"unv_41536712\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529465\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41536240\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41536712\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Greatest mind of previous generation made nuclear bombs and other deadly things.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41536712&amp;goto=item%3Fid%3D41527675%2341536712\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41536240'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41536240' href='vote?id=41536240&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=astrange\" class=\"hnuser\">astrange</a> <span class=\"age\" title=\"2024-09-13T23:49:06.000000Z\"><a href=\"item?id=41536240\">1 day ago</a></span> <span id=\"unv_41536240\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529465\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41536712\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530201\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41536240\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Aren&#x27;t the greatest mind(s) of our generation writing Terry Tao&#x27;s blog posts?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41536240&amp;goto=item%3Fid%3D41527675%2341536240\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41530201'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530201' href='vote?id=41530201&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=vladms\" class=\"hnuser\">vladms</a> <span class=\"age\" title=\"2024-09-13T11:35:22.000000Z\"><a href=\"item?id=41530201\">1 day ago</a></span> <span id=\"unv_41530201\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529465\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41536240\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41529474\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530201\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">This directly implies that all the people that did useful stuff (improving cancer survivability, new vaccines, renewable energy, and others) are all &quot;below&quot; the &quot;greatest minds of our generation&quot;.<p>Not to mention it also suggests there is a way to &quot;compare&quot; minds. I would not choose myself to do somethings, but that does not mean I despise automatically people choosing to.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530201&amp;goto=item%3Fid%3D41527675%2341530201\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41536721'><td><table border='0'>  <tr>    <td class='ind' indent='4'><img src=\"s.gif\" height=\"1\" width=\"160\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41536721' href='vote?id=41536721&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=geodel\" class=\"hnuser\">geodel</a> <span class=\"age\" title=\"2024-09-14T01:15:17.000000Z\"><a href=\"item?id=41536721\">23 hours ago</a></span> <span id=\"unv_41536721\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41530201\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41529474\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41536721\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I think they meant greatest minds have to be greatest money earners also. Else they are not greatest minds.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41536721&amp;goto=item%3Fid%3D41527675%2341536721\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41529474'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41529474' href='vote?id=41529474&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=4gotunameagain\" class=\"hnuser\">4gotunameagain</a> <span class=\"age\" title=\"2024-09-13T09:19:54.000000Z\"><a href=\"item?id=41529474\">1 day ago</a></span> <span id=\"unv_41529474\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529465\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530201\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41532000\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41529474\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Hey, at least we had one of them working on TempleOS.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41529474&amp;goto=item%3Fid%3D41527675%2341529474\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41532000'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532000' href='vote?id=41532000&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=toast0\" class=\"hnuser\">toast0</a> <span class=\"age\" title=\"2024-09-13T15:15:44.000000Z\"><a href=\"item?id=41532000\">1 day ago</a></span> <span id=\"unv_41532000\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41529465\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530663\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532000\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">It doesn&#x27;t seem wasteful and unproductive, given that the result of the HFT industry is smaller bid&#x2F;ask spreads (lowering costs for all trades) and payment for order flow which is the mechanism that eliminated retail commissions and provides price improvement on many retail trades. And even so, HFT firms are making money.<p>It might not seem like real work, but making money by reducing costs of market participants sounds like a good thing. I admit though, block trades might be harder now than before the rise of HFT.<p>If you could do warehousing&#x2F;distributing&#x2F;coordinating fresh foods in a way that reduced the difference in price between the farmer and the consumer and make money doing it, that would clearly be good work.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532000&amp;goto=item%3Fid%3D41527675%2341532000\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41530663'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530663' href='vote?id=41530663&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=appendix-rock\" class=\"hnuser\">appendix-rock</a> <span class=\"age\" title=\"2024-09-13T12:39:23.000000Z\"><a href=\"item?id=41530663\">1 day ago</a></span> <span id=\"unv_41530663\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532000\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530797\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530663\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">What do you work on?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530663&amp;goto=item%3Fid%3D41527675%2341530663\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41530797'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530797' href='vote?id=41530797&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=almostgotcaught\" class=\"hnuser\">almostgotcaught</a> <span class=\"age\" title=\"2024-09-13T12:55:03.000000Z\"><a href=\"item?id=41530797\">1 day ago</a></span> <span id=\"unv_41530797\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530663\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41532959\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530797\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c5A\">I&#x27;ll never be able to figure out what people get from repeating the same thing over and over. I&#x27;ve seen this same exact comment 1000 times on hn and I&#x27;m 100% sure you have too (indeed I believe the <i>reason</i> you repeat is because you&#x27;ve seen it and agree with it).</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530797&amp;goto=item%3Fid%3D41527675%2341530797\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41533370'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41533370' href='vote?id=41533370&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=XorNot\" class=\"hnuser\">XorNot</a> <span class=\"age\" title=\"2024-09-13T17:37:54.000000Z\"><a href=\"item?id=41533370\">1 day ago</a></span> <span id=\"unv_41533370\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41530797\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532959\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41533370\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">It&#x27;s virtue signalling.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41533370&amp;goto=item%3Fid%3D41527675%2341533370\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                        <tr class='athing comtr' id='41532959'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532959' href='vote?id=41532959&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=slt2021\" class=\"hnuser\">slt2021</a> <span class=\"age\" title=\"2024-09-13T16:51:51.000000Z\"><a href=\"item?id=41532959\">1 day ago</a></span> <span id=\"unv_41532959\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532959\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">wow amazing, nobody is gonna edit that code ever again...</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532959&amp;goto=item%3Fid%3D41527675%2341532959\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41533915'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41533915' href='vote?id=41533915&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=notfed\" class=\"hnuser\">notfed</a> <span class=\"age\" title=\"2024-09-13T18:42:05.000000Z\"><a href=\"item?id=41533915\">1 day ago</a></span> <span id=\"unv_41533915\"></span>          <span class='navs'>\n             | <a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41533915\" n=\"6\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; The x25519 algorithm also plays a role in post-quantum safe cryptographic solutions, having been included as the classical algorithm in the TLS 1.3 and SSH hybrid scheme specifications for post-quantum key agreement.<p>Really though? This mostly-untrue statement is the line that warrants adding hashtag #post-quantum-cryptography to the blogpost?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41533915&amp;goto=item%3Fid%3D41527675%2341533915\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41535328'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41535328' href='vote?id=41535328&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=westurner\" class=\"hnuser\">westurner</a> <span class=\"age\" title=\"2024-09-13T21:27:40.000000Z\"><a href=\"item?id=41535328\">1 day ago</a></span> <span id=\"unv_41535328\"></span>          <span class='navs'>\n             | <a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41535328\" n=\"5\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Actually, e.g. rustls added X25519Kyber768Draft00 support this year: \n<a href=\"https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=41534500\">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=41534500</a><p>&#x2F;?q X25519Kyber768Draft00: <a href=\"https:&#x2F;&#x2F;www.google.com&#x2F;search?q=X25519Kyber768Draft00\" rel=\"nofollow\">https:&#x2F;&#x2F;www.google.com&#x2F;search?q=X25519Kyber768Draft00</a></div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41535328&amp;goto=item%3Fid%3D41527675%2341535328\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41535692'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41535692' href='vote?id=41535692&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=notfed\" class=\"hnuser\">notfed</a> <span class=\"age\" title=\"2024-09-13T22:14:19.000000Z\"><a href=\"item?id=41535692\">1 day ago</a></span> <span id=\"unv_41535692\"></span>          <span class='navs'>\n             | <a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41535328\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41535692\" n=\"4\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Kyber768 is the post-quantum algorithm in that example, not x25519.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41535692&amp;goto=item%3Fid%3D41527675%2341535692\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41535866'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41535866' href='vote?id=41535866&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=westurner\" class=\"hnuser\">westurner</a> <span class=\"age\" title=\"2024-09-13T22:39:56.000000Z\"><a href=\"item?id=41535866\">1 day ago</a></span> <span id=\"unv_41535866\"></span>          <span class='navs'>\n             | <a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41535692\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41535866\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">From &quot;OpenSSL 3.4 Alpha 1 Released with New Features&quot; (8 days ago) <a href=\"https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=41456447#41456774\">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=41456447#41456774</a> :<p>&gt; <i>Someday there will probably be a TLS1.4&#x2F;2.0 with PQ, and also FIPS-140 -4?</i><p>&gt; <i>Are there additional ways to implement NIST PQ finalist algos with openssl?</i><p>- open-quantum-safe&#x2F;oqs-provider [implements mlkem512 through mlkem1024 and x25519_mlkem768]</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41535866&amp;goto=item%3Fid%3D41527675%2341535866\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41541179'><td><table border='0'>  <tr>    <td class='ind' indent='4'><img src=\"s.gif\" height=\"1\" width=\"160\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41541179' href='vote?id=41541179&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=notfed\" class=\"hnuser\">notfed</a> <span class=\"age\" title=\"2024-09-14T17:16:46.000000Z\"><a href=\"item?id=41541179\">7 hours ago</a></span> <span id=\"unv_41541179\"></span>          <span class='navs'>\n             | <a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41535866\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41541179\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Not sure what you&#x27;re trying to say here . x25519 is objectively not PQC and never claimed to be, and this isn&#x27;t debatable.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41541179&amp;goto=item%3Fid%3D41527675%2341541179\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41541707'><td><table border='0'>  <tr>    <td class='ind' indent='5'><img src=\"s.gif\" height=\"1\" width=\"200\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41541707' href='vote?id=41541707&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=westurner\" class=\"hnuser\">westurner</a> <span class=\"age\" title=\"2024-09-14T18:18:45.000000Z\"><a href=\"item?id=41541707\">6 hours ago</a></span> <span id=\"unv_41541707\"></span>          <span class='navs'>\n             | <a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41541179\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41541707\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">In this case, hybrid means &quot;not entirely PQ&quot;.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41541707&amp;goto=item%3Fid%3D41527675%2341541707\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                                          <tr class='athing comtr' id='41527884'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41527884' href='vote?id=41527884&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=nanolith\" class=\"hnuser\">nanolith</a> <span class=\"age\" title=\"2024-09-13T03:50:59.000000Z\"><a href=\"item?id=41527884\">1 day ago</a></span> <span id=\"unv_41527884\"></span>          <span class='navs'>\n             | <a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41532635\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41527884\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">The formal methods nerd in me is happy to see HOL Light being used to formally verify this implementation. I&#x27;m curious to see how closely their abstract machine models follow specific machine implementations. OOO, speculation, and deep pipelining have non-trivial impacts on potential side channels, and these vary quite a bit by stepping and architecture.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41527884&amp;goto=item%3Fid%3D41527675%2341527884\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41529633'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41529633' href='vote?id=41529633&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=holowoodman\" class=\"hnuser\">holowoodman</a> <span class=\"age\" title=\"2024-09-13T09:52:20.000000Z\"><a href=\"item?id=41529633\">1 day ago</a></span> <span id=\"unv_41529633\"></span>          <span class='navs'>\n             | <a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532635\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41529633\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Even worse: Each new CPU generation will need a new machine model and a reevaluation. Because OOO, speculation and all the timing behaviour are non-functional properties that frequently change due to new optimizations, different internal structuring, etc.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41529633&amp;goto=item%3Fid%3D41527675%2341529633\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41532635'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532635' href='vote?id=41532635&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=aseipp\" class=\"hnuser\">aseipp</a> <span class=\"age\" title=\"2024-09-13T16:20:21.000000Z\"><a href=\"item?id=41532635\">1 day ago</a></span> <span id=\"unv_41532635\"></span>          <span class='navs'>\n             | <a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532635\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I was aware of s2n-bignum which is a very cool project, but apparently there is a larger sister project, aws-lc, that aims for broader set of APIs including OpenSSL compatibility, while retaining the general approach and vibe (lots of formal verification + performance work): <a href=\"https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-lc\">https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-lc</a><p>That&#x27;s pretty sweet. I&#x27;m currently using BoringSSL in a project as a supplement to OpenSSL (mostly because it is much easier to build for Windows users than requiring them to fiddle with msys2&#x2F;vcpkg etc; the alternative is to rely on the Windows CNG API, but it lacks features like ed25519 support.) I wonder how much effort it would take to use aws-lc instead... Not that I&#x27;m that interested, BSSL is pretty good, but free performance and heavy automated verification is always nice :)<p>Related: one of the authors of this post, John Harrison, wrote a really good book about automated theorm proving about 15 years ago while working on floating point verification at Intel -- there&#x27;s still no other book quite like this one, I think <a href=\"https:&#x2F;&#x2F;www.cl.cam.ac.uk&#x2F;~jrh13&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;www.cl.cam.ac.uk&#x2F;~jrh13&#x2F;</a></div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532635&amp;goto=item%3Fid%3D41527675%2341532635\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41533055'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41533055' href='vote?id=41533055&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=newman314\" class=\"hnuser\">newman314</a> <span class=\"age\" title=\"2024-09-13T17:04:38.000000Z\"><a href=\"item?id=41533055\">1 day ago</a></span> <span id=\"unv_41533055\"></span>          <span class='navs'>\n             | <a href=\"#41532635\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41533055\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Upon hearing about AWS-LC, I immediately thought about tying it to nginx to see if it will work.<p>Turns out someone else has already tried: <a href=\"https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-lc&#x2F;issues&#x2F;1827\">https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-lc&#x2F;issues&#x2F;1827</a></div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41533055&amp;goto=item%3Fid%3D41527675%2341533055\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                            <tr class='athing comtr' id='41528011'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41528011' href='vote?id=41528011&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=saghm\" class=\"hnuser\">saghm</a> <span class=\"age\" title=\"2024-09-13T04:23:43.000000Z\"><a href=\"item?id=41528011\">1 day ago</a></span> <span id=\"unv_41528011\"></span>          <span class='navs'>\n             | <a href=\"#41532635\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530898\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41528011\" n=\"28\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. At times I&#x27;ve run into places that require me to use RSA keys though (ironically, I seem to remember first experiencing this with AWS years back, although I honestly can&#x27;t recall if this is still the case or not).<p>If this further improvement becomes widely used, it would be interesting to see if it&#x27;s enough to tip the scales towards ed25519 being more of the de facto &quot;default&quot; ssh key algorithm. My experience is that a decent number of people still use RSA keys most of the time, but I don&#x27;t feel like I have nearly enough of a sample size to conclude anything significant from that.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41528011&amp;goto=item%3Fid%3D41527675%2341528011\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41528620'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41528620' href='vote?id=41528620&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=scrapheap\" class=\"hnuser\">scrapheap</a> <span class=\"age\" title=\"2024-09-13T06:44:49.000000Z\"><a href=\"item?id=41528620\">1 day ago</a></span> <span id=\"unv_41528620\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41528168\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41528620\" n=\"13\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; My experience is that a decent number of people still use RSA keys most of the time, but I don&#x27;t feel like I have nearly enough of a sample size to conclude anything significant from that.<p>I wouldn&#x27;t be surprised if a lot of people still use RSA for SSH keys for one or more of the following reasons:<p>1. A lot of tutorials about generating SSH Keys were written before ed25519, so if they follow an old tutorial they&#x27;ll probably be generating an RSA key.<p>2. Older versions of OpenSSH, that you&#x27;d find on CentOS 7 and below, would default to RSA if you didn&#x27;t specify a key type when running ssh-keygen.<p>3. There are some systems out there that don&#x27;t support ed25519, though they are becoming rarer.  If you have to deal with those systems then you&#x27;re forced to use RSA (at least for that system).<p>4. Some of us have been using SSH keys from way before OpenSSH add support for ed25519 keys in 2014, so any long lived SSH keys won&#x27;t be ed25519 keys (wow, ed25519 has now been about in OpenSSH for over 10 years).</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41528620&amp;goto=item%3Fid%3D41527675%2341528620\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41529557'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41529557' href='vote?id=41529557&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=miki123211\" class=\"hnuser\">miki123211</a> <span class=\"age\" title=\"2024-09-13T09:34:06.000000Z\"><a href=\"item?id=41529557\">1 day ago</a></span> <span id=\"unv_41529557\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41528620\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530168\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41529557\" n=\"4\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">5. a lot of people (especially older people I suspect) think &quot;RSA&quot; when they hear &quot;public key cryptography&quot;.<p>I&#x27;m in my twenties and still have that reaction. I know elliptic curves exist, I even sort-of-kind-of have an awareness of how they work, but if I was asked to name one cryptosystem that used public and private keys, I&#x27;d definitely say RSA first and not elliptic curves.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41529557&amp;goto=item%3Fid%3D41527675%2341529557\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41529976'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41529976' href='vote?id=41529976&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=vitus\" class=\"hnuser\">vitus</a> <span class=\"age\" title=\"2024-09-13T10:57:23.000000Z\"><a href=\"item?id=41529976\">1 day ago</a></span> <span id=\"unv_41529976\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529557\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530168\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41529976\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">This is likely in no small part due to CS education only really teaching the mechanics of RSA (modular arithmetic, Fermat&#x27;s little theorem, etc), or at least, that still seems to be the case at Berkeley. I&#x27;d guess because elliptic curve crypto requires more advanced math to reason about (more advanced group theory, at least) and doesn&#x27;t map as cleanly to existing concepts that non-math-major undergrads have.<p>cryptopals.com also doesn&#x27;t cover any elliptive curve crypto until you get into the last set.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41529976&amp;goto=item%3Fid%3D41527675%2341529976\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41531786'><td><table border='0'>  <tr>    <td class='ind' indent='4'><img src=\"s.gif\" height=\"1\" width=\"160\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41531786' href='vote?id=41531786&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=tptacek\" class=\"hnuser\">tptacek</a> <span class=\"age\" title=\"2024-09-13T14:52:16.000000Z\"><a href=\"item?id=41531786\">1 day ago</a></span> <span id=\"unv_41531786\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529976\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530744\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41531786\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">We didn&#x27;t even cover RSA until the original last set. It&#x27;s a build-up. :)</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41531786&amp;goto=item%3Fid%3D41527675%2341531786\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41530744'><td><table border='0'>  <tr>    <td class='ind' indent='4'><img src=\"s.gif\" height=\"1\" width=\"160\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530744' href='vote?id=41530744&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=throw0101b\" class=\"hnuser\">throw0101b</a> <span class=\"age\" title=\"2024-09-13T12:49:10.000000Z\"><a href=\"item?id=41530744\">1 day ago</a></span> <span id=\"unv_41530744\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529976\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41531786\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530168\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530744\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I would think that the (non-EC) Diffie-Hellman would also be easy enough to teach as well: exponentials and discrete <i>log</i> problem aren&#x27;t any&#x2F;much complicated than explaining factorization.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530744&amp;goto=item%3Fid%3D41527675%2341530744\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                        <tr class='athing comtr' id='41530168'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530168' href='vote?id=41530168&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=pantalaimon\" class=\"hnuser\">pantalaimon</a> <span class=\"age\" title=\"2024-09-13T11:29:54.000000Z\"><a href=\"item?id=41530168\">1 day ago</a></span> <span id=\"unv_41530168\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41528620\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41529557\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41529970\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530168\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; 3. There are some systems out there that don&#x27;t support ed25519, though they are becoming rarer. If you have to deal with those systems then you&#x27;re forced to use RSA (at least for that system).<p>Azure Devops is a big one.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530168&amp;goto=item%3Fid%3D41527675%2341530168\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41529970'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41529970' href='vote?id=41529970&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=Spooky23\" class=\"hnuser\">Spooky23</a> <span class=\"age\" title=\"2024-09-13T10:56:09.000000Z\"><a href=\"item?id=41529970\">1 day ago</a></span> <span id=\"unv_41529970\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41528620\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530168\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530221\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41529970\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41529970&amp;goto=item%3Fid%3D41527675%2341529970\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41530119'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530119' href='vote?id=41530119&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=vitus\" class=\"hnuser\">vitus</a> <span class=\"age\" title=\"2024-09-13T11:21:02.000000Z\"><a href=\"item?id=41530119\">1 day ago</a></span> <span id=\"unv_41530119\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529970\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41531820\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530119\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519.<p>Not even when FIPS 140-3 was (finally) finalized in 2019, and testing began in 2020?<p><a href=\"https:&#x2F;&#x2F;csrc.nist.gov&#x2F;projects&#x2F;cryptographic-module-validation-program&#x2F;sp-800-140-series-supplemental-information&#x2F;sp800-140c\" rel=\"nofollow\">https:&#x2F;&#x2F;csrc.nist.gov&#x2F;projects&#x2F;cryptographic-module-validati...</a> includes mentions of EdDSA, and Curve25519 is listed among the &quot;Recommended Curves for U.S. Federal Government Use&quot; on page 15 of <a href=\"https:&#x2F;&#x2F;nvlpubs.nist.gov&#x2F;nistpubs&#x2F;SpecialPublications&#x2F;NIST.SP.800-186.pdf\" rel=\"nofollow\">https:&#x2F;&#x2F;nvlpubs.nist.gov&#x2F;nistpubs&#x2F;SpecialPublications&#x2F;NIST.S...</a>.<p>(I guess the problem is that various crypto implementations need to get recertified under the new standard...)<p>edit: it looks like AWS-LC [0] and boringcrypto [1] have both been validated under FIPS 140-3. Azure&#x27;s OpenSSL crypto [2] has only been validated under FIPS 140-2 as far as I can tell.<p>[0] <a href=\"https:&#x2F;&#x2F;csrc.nist.gov&#x2F;projects&#x2F;cryptographic-module-validation-program&#x2F;certificate&#x2F;4631\" rel=\"nofollow\">https:&#x2F;&#x2F;csrc.nist.gov&#x2F;projects&#x2F;cryptographic-module-validati...</a><p>[1] <a href=\"https:&#x2F;&#x2F;csrc.nist.gov&#x2F;projects&#x2F;cryptographic-module-validation-program&#x2F;certificate&#x2F;4735\" rel=\"nofollow\">https:&#x2F;&#x2F;csrc.nist.gov&#x2F;projects&#x2F;cryptographic-module-validati...</a><p>[2] <a href=\"https:&#x2F;&#x2F;csrc.nist.gov&#x2F;projects&#x2F;cryptographic-module-validation-program&#x2F;certificate&#x2F;4496\" rel=\"nofollow\">https:&#x2F;&#x2F;csrc.nist.gov&#x2F;projects&#x2F;cryptographic-module-validati...</a></div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530119&amp;goto=item%3Fid%3D41527675%2341530119\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41531820'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41531820' href='vote?id=41531820&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=devman0\" class=\"hnuser\">devman0</a> <span class=\"age\" title=\"2024-09-13T14:56:25.000000Z\"><a href=\"item?id=41531820\">1 day ago</a></span> <span id=\"unv_41531820\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41529970\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530119\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530221\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41531820\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">ed25519 is in FIPS 186-5 which meets criteria (a) for Approved Security Functions in FIPS 140-2.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41531820&amp;goto=item%3Fid%3D41527675%2341531820\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41530221'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530221' href='vote?id=41530221&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=loudmax\" class=\"hnuser\">loudmax</a> <span class=\"age\" title=\"2024-09-13T11:38:43.000000Z\"><a href=\"item?id=41530221\">1 day ago</a></span> <span id=\"unv_41530221\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41528620\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41529970\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41528168\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530221\" n=\"4\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">When I run `ssh-keygen`, I can remember the options `-t rsa` or `-t dsa`.  I simply cannot remember the flag `-t ed25519`.  I have to look it up every time.<p>I just remember the flag as being vaguely similar the name of the monster robot from RoboCop.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530221&amp;goto=item%3Fid%3D41527675%2341530221\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41530317'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530317' href='vote?id=41530317&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=homebrewer\" class=\"hnuser\">homebrewer</a> <span class=\"age\" title=\"2024-09-13T11:51:54.000000Z\"><a href=\"item?id=41530317\">1 day ago</a></span> <span id=\"unv_41530317\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41530221\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530765\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530317\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Use shell autocomplete. Even `bash-completion` suggests arguments for the key type these days:<p><pre><code>  $ ssh-keygen -t &lt;TAB&gt;\n  dsa   ecdsa   ecdsa-sk   ed25519   ed25519-sk  rsa \n</code></pre>\n`-sk` is short for &quot;security key&quot; if memory serves me right, and is used with FIDO2 hardware tokens.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530317&amp;goto=item%3Fid%3D41527675%2341530317\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41530765'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530765' href='vote?id=41530765&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=throw0101b\" class=\"hnuser\">throw0101b</a> <span class=\"age\" title=\"2024-09-13T12:51:28.000000Z\"><a href=\"item?id=41530765\">1 day ago</a></span> <span id=\"unv_41530765\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41530221\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530317\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41528168\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530765\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; <i>When I run `ssh-keygen`</i><p>As of OpenSSH 9.5 the default has changed, so you don&#x27;t have to specify anything:<p><pre><code>   * ssh-keygen(1): generate Ed25519 keys by default. Ed25519 public keys\n     are very convenient due to their small size. Ed25519 keys are\n     specified in RFC 8709 and OpenSSH has supported them since version 6.5\n     (January 2014).\n</code></pre>\n* <a href=\"https:&#x2F;&#x2F;www.openssh.com&#x2F;txt&#x2F;release-9.5\" rel=\"nofollow\">https:&#x2F;&#x2F;www.openssh.com&#x2F;txt&#x2F;release-9.5</a></div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530765&amp;goto=item%3Fid%3D41527675%2341530765\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41531951'><td><table border='0'>  <tr>    <td class='ind' indent='4'><img src=\"s.gif\" height=\"1\" width=\"160\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41531951' href='vote?id=41531951&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=saghm\" class=\"hnuser\">saghm</a> <span class=\"age\" title=\"2024-09-13T15:10:41.000000Z\"><a href=\"item?id=41531951\">1 day ago</a></span> <span id=\"unv_41531951\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41530765\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41528168\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41531951\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Oh wow, I didn&#x27;t know that one! I still manually type `-t ed25519` from muscle memory, I guess I don&#x27;t have to now</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41531951&amp;goto=item%3Fid%3D41527675%2341531951\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                              <tr class='athing comtr' id='41528168'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41528168' href='vote?id=41528168&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=toast0\" class=\"hnuser\">toast0</a> <span class=\"age\" title=\"2024-09-13T05:10:46.000000Z\"><a href=\"item?id=41528168\">1 day ago</a></span> <span id=\"unv_41528168\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41528620\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41528046\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41528168\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519.<p>My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41528168&amp;goto=item%3Fid%3D41527675%2341528168\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41531995'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41531995' href='vote?id=41531995&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=saghm\" class=\"hnuser\">saghm</a> <span class=\"age\" title=\"2024-09-13T15:15:19.000000Z\"><a href=\"item?id=41531995\">1 day ago</a></span> <span id=\"unv_41531995\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41528168\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41528046\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41531995\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though.<p>Interesting! I wonder if this new algorithm is intended to help with that. I&#x27;m super curious if the smaller payload does indeed make a difference (with the current algorithm) like you mention; I know that with databases and filesystems, compression is commonly used to shift the balance from I&#x2F;O to CPU due to disk writes being slow (with reduced storage size being a side benefit but not usually the main motivation), but I also know that cryptographic verification being too slow can be an anti-feature if it makes brute forcing feasible, so the amount of CPU work needed might be pretty high still.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41531995&amp;goto=item%3Fid%3D41527675%2341531995\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41536618'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41536618' href='vote?id=41536618&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=toast0\" class=\"hnuser\">toast0</a> <span class=\"age\" title=\"2024-09-14T00:50:21.000000Z\"><a href=\"item?id=41536618\">23 hours ago</a></span> <span id=\"unv_41536618\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41531995\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41528046\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41536618\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">On my ancient box, only including a few lines of output:<p><pre><code>   $ openssl speed rsa ecdsa\n\n                     sign    verify    sign&#x2F;s verify&#x2F;s\n   rsa 1024 bits 0.000117s 0.000008s   8518.7 132449.2\n   rsa 2048 bits 0.000884s 0.000025s   1130.6  39499.3\n\n                                 sign    verify    sign&#x2F;s verify&#x2F;s\n    256 bits ecdsa (nistp256)   0.0000s   0.0001s  33210.9  11483.0\n    384 bits ecdsa (nistp384)   0.0009s   0.0008s   1070.6   1268.9\n</code></pre>\nIt&#x27;s 11 k verify&#x2F;s for ecda vs 39k verify&#x2F;s for rsa-2048. A TLS handshake needs at least one sign and verify from the server cert, plus some verifies for the signature on the cert chain (but those signatures are used over and over).</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41536618&amp;goto=item%3Fid%3D41527675%2341536618\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                        <tr class='athing comtr' id='41528046'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41528046' href='vote?id=41528046&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=stouset\" class=\"hnuser\">stouset</a> <span class=\"age\" title=\"2024-09-13T04:33:55.000000Z\"><a href=\"item?id=41528046\">1 day ago</a></span> <span id=\"unv_41528046\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41528168\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530209\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41528046\" n=\"10\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519<p>That’s not really anecdotal. Generating an ed25519 key is barely more than generating a random 256-bit value. Generating an RSA key is <i>significantly</i> more work.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41528046&amp;goto=item%3Fid%3D41527675%2341528046\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41528118'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41528118' href='vote?id=41528118&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=saghm\" class=\"hnuser\">saghm</a> <span class=\"age\" title=\"2024-09-13T04:55:00.000000Z\"><a href=\"item?id=41528118\">1 day ago</a></span> <span id=\"unv_41528118\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41528046\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530209\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41528118\" n=\"9\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I did say my understanding was probably naive; I didn&#x27;t know the details to be able to assert anything beyond my own observation!</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41528118&amp;goto=item%3Fid%3D41527675%2341528118\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41528180'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41528180' href='vote?id=41528180&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=stouset\" class=\"hnuser\">stouset</a> <span class=\"age\" title=\"2024-09-13T05:14:27.000000Z\"><a href=\"item?id=41528180\">1 day ago</a></span> <span id=\"unv_41528180\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41528118\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41535836\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41528180\" n=\"7\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Yep, not faulting you at all! I too was surprised when I found out that it’s a straight 256-bit random value with a few bits masked.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41528180&amp;goto=item%3Fid%3D41527675%2341528180\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41532036'><td><table border='0'>  <tr>    <td class='ind' indent='4'><img src=\"s.gif\" height=\"1\" width=\"160\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532036' href='vote?id=41532036&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=saghm\" class=\"hnuser\">saghm</a> <span class=\"age\" title=\"2024-09-13T15:19:28.000000Z\"><a href=\"item?id=41532036\">1 day ago</a></span> <span id=\"unv_41532036\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41528180\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41535836\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532036\" n=\"6\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I pretty quickly realized in college when learning about this stuff that the math was well over my head, and I shifted my focus more to understanding how to properly use cryptography rather than implement it (which turned out to be more important as a software engineer anyhow). In retrospect, I really appreciate how the professor I had in a security-focused course explicitly told us it was okay if we didn&#x27;t understand the math and wouldn&#x27;t be tested on it when going over how it worked.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532036&amp;goto=item%3Fid%3D41527675%2341532036\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41532485'><td><table border='0'>  <tr>    <td class='ind' indent='5'><img src=\"s.gif\" height=\"1\" width=\"200\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532485' href='vote?id=41532485&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=tptacek\" class=\"hnuser\">tptacek</a> <span class=\"age\" title=\"2024-09-13T16:04:58.000000Z\"><a href=\"item?id=41532485\">1 day ago</a></span> <span id=\"unv_41532485\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41532036\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41535836\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532485\" n=\"5\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Counterpoint: it&#x27;s not OK to skip the math with cryptography. You may not need to power through all of Silverman&#x27;s curve book (though: I don&#x27;t know for sure that&#x27;s true, which is why I don&#x27;t call myself a cryptography engineer), but you have to get as deep into the math as you can in order to safely use cryptographic algorithms.<p>If you&#x27;re math-avoidant, stick with high-level abstractions like NaCL and TLS. There&#x27;s nothing wrong with that!<p>A professor talking about and demonstrating cryptography at the level of individual algorithms is doing their class a disservice if they say &quot;none of the math will be on the test&quot;. The algorithms are enough to put something together that seems like it works; the math is what you need to find out if your resulting system actually does work. It&#x27;s where many of the fun bug classes live.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532485&amp;goto=item%3Fid%3D41527675%2341532485\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41533561'><td><table border='0'>  <tr>    <td class='ind' indent='6'><img src=\"s.gif\" height=\"1\" width=\"240\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41533561' href='vote?id=41533561&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=saghm\" class=\"hnuser\">saghm</a> <span class=\"age\" title=\"2024-09-13T18:03:55.000000Z\"><a href=\"item?id=41533561\">1 day ago</a></span> <span id=\"unv_41533561\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41532485\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41535836\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41533561\" n=\"4\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I&#x27;m not sure if you&#x27;re reading more into what I said than I intended, but I&#x27;m not convinced by this argument. You might have missed that this course was on security in general, not cryptography; not everything in the course was cryptographic related.<p>That said, I&#x27;d argue that for the vast majority of software engineers the type of stuff they&#x27;re dealing with can be dealt with without needing to know the math. For example, you don&#x27;t need to understand the math to behind the algorithms to know that bcrypt is a reasonable password hashing algorithm and that sha1 and md5 are not, or that salts are used to mitigate issues when users reuse passwords. These are principles that you can understand at a high level without fully understanding the underlying details. If anything, I think that overemphasis on requiring people to learn and understand the math has the effect of over-focusing on simpler algorithms that aren&#x27;t actually what people want to be using in practice due to the fact that they&#x27;re easier to teach and often foundational in conveying concepts that would need to be learned to understand the more complicated algorithms.<p>If using cryptographic algorithms directly requires knowing the math, then I&#x27;d agree that most people shouldn&#x27;t be using them directly, but I&#x27;d go further and say that a lack of libraries that are safe for people to use for software engineering without understanding the implementation is a failing of the ecosystem; as much as &quot;regular&quot; software engineering people (like myself!) can struggle with the math behind cryptography, I think that a lot of people developing cryptographic libraries struggle with building reasonable abstractions and making user-friendly APIs (which is a skill I think in general is not emphasized enough for most software engineers, to the detriment of everyone).</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41533561&amp;goto=item%3Fid%3D41527675%2341533561\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41533690'><td><table border='0'>  <tr>    <td class='ind' indent='7'><img src=\"s.gif\" height=\"1\" width=\"280\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41533690' href='vote?id=41533690&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=tptacek\" class=\"hnuser\">tptacek</a> <span class=\"age\" title=\"2024-09-13T18:16:52.000000Z\"><a href=\"item?id=41533690\">1 day ago</a></span> <span id=\"unv_41533690\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41533561\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41535836\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41533690\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Sure. It&#x27;s a failing of the ecosystem. That observation, a cup of coffee, and 1-3 years will get you a Kenny Paterson paper stunt-breaking your system. I feel where you&#x27;re coming from, but, respectfully: it does not matter.<p>My thing here is just: learn the math! Or do something else. I did! There is <i>so much to do</i> in our industry.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41533690&amp;goto=item%3Fid%3D41527675%2341533690\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41535453'><td><table border='0'>  <tr>    <td class='ind' indent='8'><img src=\"s.gif\" height=\"1\" width=\"320\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41535453' href='vote?id=41535453&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=saghm\" class=\"hnuser\">saghm</a> <span class=\"age\" title=\"2024-09-13T21:42:19.000000Z\"><a href=\"item?id=41535453\">1 day ago</a></span> <span id=\"unv_41535453\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41533690\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41535836\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41535453\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry.<p>I&#x27;m not sure I understand what you mean here by &quot;something else in our industry&quot;. Are you arguing that I&#x27;m not qualified to be a software engineer due to not understanding the math behind elliptic curves, or did you miss my repeated use of phrases like &quot;the vast majority of software engineers&quot; rather than some specialty where cryptography implementation details details are more important? If the latter, I can reassure you that I don&#x27;t work in cryptography, work on any cryptographic libraries, or have any specific responsibilities related to security beyond the general idea that all software being written should be secure. If the former, I&#x27;ll have to respectfully disagree, and suggest that maybe even if you aren&#x27;t willing to consider that you&#x27;re wrong about the math being a hard requirement for someone being qualified as a software engineer, it&#x27;s worth considering that you almost certainly don&#x27;t have enough information to conclude whether a stranger on the internet is qualified based on reading some of their comments.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41535453&amp;goto=item%3Fid%3D41527675%2341535453\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41543028'><td><table border='0'>  <tr>    <td class='ind' indent='9'><img src=\"s.gif\" height=\"1\" width=\"360\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41543028' href='vote?id=41543028&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=tptacek\" class=\"hnuser\">tptacek</a> <span class=\"age\" title=\"2024-09-14T21:15:04.000000Z\"><a href=\"item?id=41543028\">3 hours ago</a></span> <span id=\"unv_41543028\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41535453\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41535836\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41543028\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I&#x27;m certainly not saying you&#x27;re not qualified to be a software engineer.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41543028&amp;goto=item%3Fid%3D41527675%2341543028\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                                                <tr class='athing comtr' id='41535836'><td><table border='0'>  <tr>    <td class='ind' indent='3'><img src=\"s.gif\" height=\"1\" width=\"120\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41535836' href='vote?id=41535836&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=syncsynchalt\" class=\"hnuser\">syncsynchalt</a> <span class=\"age\" title=\"2024-09-13T22:36:24.000000Z\"><a href=\"item?id=41535836\">1 day ago</a></span> <span id=\"unv_41535836\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41528118\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41528180\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530209\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41535836\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Learning X25519 isn&#x27;t too hard!  See <a href=\"https:&#x2F;&#x2F;curves.xargs.org\" rel=\"nofollow\">https:&#x2F;&#x2F;curves.xargs.org</a> for the basics and <a href=\"https:&#x2F;&#x2F;x25519.xargs.org\" rel=\"nofollow\">https:&#x2F;&#x2F;x25519.xargs.org</a> for some refining details.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41535836&amp;goto=item%3Fid%3D41527675%2341535836\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                        <tr class='athing comtr' id='41530209'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530209' href='vote?id=41530209&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=upofadown\" class=\"hnuser\">upofadown</a> <span class=\"age\" title=\"2024-09-13T11:36:22.000000Z\"><a href=\"item?id=41530209\">1 day ago</a></span> <span id=\"unv_41530209\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41528046\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41530898\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530209\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Another article from the same blog about optimizing RSA:<p>* <a href=\"https:&#x2F;&#x2F;www.amazon.science&#x2F;blog&#x2F;formal-verification-makes-rsa-faster-and-faster-to-deploy\" rel=\"nofollow\">https:&#x2F;&#x2F;www.amazon.science&#x2F;blog&#x2F;formal-verification-makes-rs...</a><p>RSA signature verification is already very fast and TLS doesn&#x27;t use RSA for encryption anymore so the problem reduces to optimizing signing operations.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530209&amp;goto=item%3Fid%3D41527675%2341530209\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41530898'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530898' href='vote?id=41530898&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=fefe23\" class=\"hnuser\">fefe23</a> <span class=\"age\" title=\"2024-09-13T13:05:58.000000Z\"><a href=\"item?id=41530898\">1 day ago</a></span> <span id=\"unv_41530898\"></span>          <span class='navs'>\n             | <a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41532049\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41530898\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Holy shit these claims are wild!\nIt&#x27;s not just a percent more performance here and there, the graphs look more like 50% more throughput on the same hardware (depending on the cpu architecture).<p>My immediate fear was that they optimized away the security features like absence of timing side channels, but they say they still have those.<p>They also claim to have formal proof of correctness, which is even more amazing, because they are not doing it on a symbolic level but on a machine instruction level. Apparently they tought their reasoning system the semantics of all the CPU instructions used in the assembler implementation.<p>I&#x27;ll still wait what djb has to say about this, but it looks freaking amazing to me.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530898&amp;goto=item%3Fid%3D41527675%2341530898\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41532049'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532049' href='vote?id=41532049&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=jonmon6691\" class=\"hnuser\">jonmon6691</a> <span class=\"age\" title=\"2024-09-13T15:21:04.000000Z\"><a href=\"item?id=41532049\">1 day ago</a></span> <span id=\"unv_41532049\"></span>          <span class='navs'>\n             | <a href=\"#41530898\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41536430\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532049\" n=\"4\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">I&#x27;m assuming when they say that this improves user experience, that it implies the use case is primarily TLS. In which case store-now-decrypt-later attacks are already considered an urgent threat with regard to post quantum crypto. With FIPS 203 being released and Chrome is already using an implementation based on the draft standard, this seems like this algo (at least for TLS) should be on its way out.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532049&amp;goto=item%3Fid%3D41527675%2341532049\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41532421'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532421' href='vote?id=41532421&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=dlgeek\" class=\"hnuser\">dlgeek</a> <span class=\"age\" title=\"2024-09-13T15:59:36.000000Z\"><a href=\"item?id=41532421\">1 day ago</a></span> <span id=\"unv_41532421\"></span>          <span class='navs'>\n             | <a href=\"#41532049\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532624\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532421\" n=\"2\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">The industry is moving to a hybrid that mixes classic crypto (including ECC) with post-quantum crypto. AWS has even turned this on in some places - <a href=\"https:&#x2F;&#x2F;aws.amazon.com&#x2F;about-aws&#x2F;whats-new&#x2F;2022&#x2F;03&#x2F;aws-kms-acm-support-latest-hybrid-post-quantum-tls-ciphers&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;aws.amazon.com&#x2F;about-aws&#x2F;whats-new&#x2F;2022&#x2F;03&#x2F;aws-kms-a...</a> from 2022 and <a href=\"https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;kms&#x2F;latest&#x2F;developerguide&#x2F;pqtls.html\" rel=\"nofollow\">https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;kms&#x2F;latest&#x2F;developerguide&#x2F;pqtls....</a> for some details.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532421&amp;goto=item%3Fid%3D41527675%2341532421\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41532598'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532598' href='vote?id=41532598&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=jonmon6691\" class=\"hnuser\">jonmon6691</a> <span class=\"age\" title=\"2024-09-13T16:17:23.000000Z\"><a href=\"item?id=41532598\">1 day ago</a></span> <span id=\"unv_41532598\"></span>          <span class='navs'>\n             | <a href=\"#41532049\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41532421\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532624\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532598\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Thanks I forgot about that. So if understand it right, the idea is to provide some insurance in the case that these relatively young algorithms are broken as they get exposed to more and more cryptanalysis</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532598&amp;goto=item%3Fid%3D41527675%2341532598\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41532624'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41532624' href='vote?id=41532624&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=adgjlsfhk1\" class=\"hnuser\">adgjlsfhk1</a> <span class=\"age\" title=\"2024-09-13T16:19:08.000000Z\"><a href=\"item?id=41532624\">1 day ago</a></span> <span id=\"unv_41532624\"></span>          <span class='navs'>\n             | <a href=\"#41532049\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41532421\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41536430\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41532624\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">No one other than NIST is recommending phasing out pre-quantum crypto. Everyone else is using a combination of pre-quantum and post-quantum because trust in the security and robustness of the post-quantum ecosystem is fairly low.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41532624&amp;goto=item%3Fid%3D41527675%2341532624\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                  <tr class='athing comtr' id='41536430'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41536430' href='vote?id=41536430&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=webXL\" class=\"hnuser\">webXL</a> <span class=\"age\" title=\"2024-09-14T00:16:38.000000Z\"><a href=\"item?id=41536430\">1 day ago</a></span> <span id=\"unv_41536430\"></span>          <span class='navs'>\n             | <a href=\"#41532049\" class=\"clicky\" aria-hidden=\"true\">prev</a> | <a href=\"#41529881\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41536430\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Why don&#x27;t they just focus on making a Gravitron variant with those algorithms in the circuitry?</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41536430&amp;goto=item%3Fid%3D41527675%2341536430\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41529881'><td><table border='0'>  <tr>    <td class='ind' indent='0'><img src=\"s.gif\" height=\"1\" width=\"0\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41529881' href='vote?id=41529881&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=londons_explore\" class=\"hnuser\">londons_explore</a> <span class=\"age\" title=\"2024-09-13T10:40:26.000000Z\"><a href=\"item?id=41529881\">1 day ago</a></span> <span id=\"unv_41529881\"></span>          <span class='navs'>\n             | <a href=\"#41536430\" class=\"clicky\" aria-hidden=\"true\">prev</a> <a class=\"togg clicky\" id=\"41529881\" n=\"5\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext cAE\">Does 25519 suffer from key&#x2F;data-dependant execution time?<p>Is this implementation resistant to that?<p>If it isn&#x27;t, it&#x27;s kinda a footgun which shouldn&#x27;t be published for general use.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41529881&amp;goto=item%3Fid%3D41527675%2341529881\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41535817'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41535817' href='vote?id=41535817&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=syncsynchalt\" class=\"hnuser\">syncsynchalt</a> <span class=\"age\" title=\"2024-09-13T22:32:44.000000Z\"><a href=\"item?id=41535817\">1 day ago</a></span> <span id=\"unv_41535817\"></span>          <span class='navs'>\n             | <a href=\"#41529881\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41530302\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41535817\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">Curve25519 is designed to be resistant to timing attacks, such as clamping the 254th bit in x25519 keys to 1 so that implementors can not optimize away a multiplication round.<p>That doesn&#x27;t mean that this implementation doesn&#x27;t have timing attacks, but the implementors claim they chose mechanisms which should be constant-time.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41535817&amp;goto=item%3Fid%3D41527675%2341535817\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41530302'><td><table border='0'>  <tr>    <td class='ind' indent='1'><img src=\"s.gif\" height=\"1\" width=\"40\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41530302' href='vote?id=41530302&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=vitus\" class=\"hnuser\">vitus</a> <span class=\"age\" title=\"2024-09-13T11:50:31.000000Z\"><a href=\"item?id=41530302\">1 day ago</a></span> <span id=\"unv_41530302\"></span>          <span class='navs'>\n             | <a href=\"#41529881\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41535817\" class=\"clicky\" aria-hidden=\"true\">prev</a> <a class=\"togg clicky\" id=\"41530302\" n=\"3\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; Does 25519 suffer from key&#x2F;data-dependant execution time?<p>I mean, when implemented naively, yes, but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations.<p>From the article:<p>&gt; We also do our best to execute the algorithms in constant time, to thwart side-channel attacks that infer secret information from the durations of computations.<p><a href=\"https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;s2n-bignum\">https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;s2n-bignum</a> (where most of the heavy lifting is done, per the article) further explicitly states that &quot;Each function is moreover written in a constant-time style to avoid timing side-channels.&quot;</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41530302&amp;goto=item%3Fid%3D41527675%2341530302\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                <tr class='athing comtr' id='41531101'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41531101' href='vote?id=41531101&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=justinwsmith\" class=\"hnuser\">justinwsmith</a> <span class=\"age\" title=\"2024-09-13T13:30:42.000000Z\"><a href=\"item?id=41531101\">1 day ago</a></span> <span id=\"unv_41531101\"></span>          <span class='navs'>\n             | <a href=\"#41529881\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41530302\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41531853\" class=\"clicky\" aria-hidden=\"true\">next</a> <a class=\"togg clicky\" id=\"41531101\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">The next paragraph makes a slightly stronger statement about its constant-time&#x27;ness:<p>&gt; Our implementations of x&#x2F;Ed25519 are designed with constant time in mind. They perform exactly the same sequence of basic CPU instructions regardless of the input values, and they avoid any CPU instructions that might have data-dependent timing.</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41531101&amp;goto=item%3Fid%3D41527675%2341531101\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n            <tr class='athing comtr' id='41531853'><td><table border='0'>  <tr>    <td class='ind' indent='2'><img src=\"s.gif\" height=\"1\" width=\"80\"></td><td valign=\"top\" class=\"votelinks\">\n      <center><a id='up_41531853' href='vote?id=41531853&amp;how=up&amp;goto=item%3Fid%3D41527675'><div class='votearrow' title='upvote'></div></a></center>    </td><td class=\"default\"><div style=\"margin-top:2px; margin-bottom:-10px;\"><span class=\"comhead\">\n          <a href=\"user?id=deathanatos\" class=\"hnuser\">deathanatos</a> <span class=\"age\" title=\"2024-09-13T14:59:49.000000Z\"><a href=\"item?id=41531853\">1 day ago</a></span> <span id=\"unv_41531853\"></span>          <span class='navs'>\n             | <a href=\"#41529881\" class=\"clicky\" aria-hidden=\"true\">root</a> | <a href=\"#41530302\" class=\"clicky\" aria-hidden=\"true\">parent</a> | <a href=\"#41531101\" class=\"clicky\" aria-hidden=\"true\">prev</a> <a class=\"togg clicky\" id=\"41531853\" n=\"1\" href=\"javascript:void(0)\">[–]</a><span class=\"onstory\"></span>          </span>\n                  </span></div><br><div class=\"comment\">\n                  <div class=\"commtext c00\">&gt; <i>but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations.</i><p>When I see CVE-fests like — <a href=\"https:&#x2F;&#x2F;people.redhat.com&#x2F;~hkario&#x2F;marvin&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;people.redhat.com&#x2F;~hkario&#x2F;marvin&#x2F;</a> — … I just do not come away with that impression.<p>[Widely used] Cryptographic Rust crates offering &quot;constant time&quot; operations in &quot;pure Rust&quot; — but Rust <i>has no primitives for doing constant time operations</i>, so it&#x27;s only through hopes and prayers that it might actually work, and with no guarantee anywhere that it actually <i>should</i>.<p>(Other, less timing attack related stuff, but e.g., major companies still not supporting anything beyond RSA.)</div>\n              <div class='reply'>        <p><font size=\"1\">\n                      <u><a href=\"reply?id=41531853&amp;goto=item%3Fid%3D41527675%2341531853\" rel=\"nofollow\">reply</a></u>\n                  </font>\n      </div></div></td></tr>\n        </table></td></tr>\n                        </table>\n  <br><br>\n</td></tr>\n<tr><td><img src=\"s.gif\" height=\"10\" width=\"0\"><table width=\"100%\" cellspacing=\"0\" cellpadding=\"1\"><tr><td bgcolor=\"#ff6600\"></td></tr></table><br>\n<center><span class=\"yclinks\"><a href=\"newsguidelines.html\">Guidelines</a> | <a href=\"newsfaq.html\">FAQ</a> | <a href=\"lists\">Lists</a> | <a href=\"https://github.com/HackerNews/API\">API</a> | <a href=\"security.html\">Security</a> | <a href=\"https://www.ycombinator.com/legal/\">Legal</a> | <a href=\"https://www.ycombinator.com/apply/\">Apply to YC</a> | <a href=\"mailto:hn@ycombinator.com\">Contact</a></span><br><br>\n<form method=\"get\" action=\"//hn.algolia.com/\">Search: <input type=\"text\" name=\"q\" size=\"17\" autocorrect=\"off\" spellcheck=\"false\" autocapitalize=\"off\" autocomplete=\"off\"></form></center></td></tr>      </table></center></body>\n      <script type='text/javascript' src='hn.js?u0LUEXpE1l7JwndlBn23'></script>\n  </html>\n",
  "text": "        Better-performing “25519” elliptic-curve cryptography | Hacker News    Hacker News  new | past | comments | ask | show | jobs | submit   login          Better-performing “25519” elliptic-curve cryptography ( amazon.science )   212 points by lemaudit  1 day ago   | hide | past | favorite | 87 comments                         SEJeff  1 day ago    | next  [–]      The firedancer team at one of the better HFT firms wrote an AVX512 optimized implementation of ed25519 and X25519 that’s significantly faster than OpenSSL. https://github.com/firedancer-io/firedancer/pull/716 Ditto for sha256: https://github.com/firedancer-io/firedancer/pull/778 And sha512: https://github.com/firedancer-io/firedancer/pull/760 If you’re an optimization nerd, this codebase is wild.    reply            syzygyhack  1 day ago    | parent | next  [–]      I laughed a little at calling Firedancer contributors \"a team at a HFT firm\". Not that you are technically wrong, not at all, that's where Jump came from. It's just that this is all completely blockchain-driven optimization, but the b-word is so dirty now that we've gotta go back to using TradFi for the rep.    reply            SEJeff  1 day ago    | root | parent | next  [–]      It’s an optimization in hashing algorithms that is around twice as fast as the ones Amazon is posting in thus article for the same eliptic curves. If the Amazon improvements are hacker news worthy (they are) this seems reasonable contextually. Also, I worked for Jump for almost 12 years :)    reply            webXL  1 day ago    | root | parent | prev | next  [–]      What makes the “b-word” dirty?    reply            SEJeff  1 day ago    | root | parent | next  [–]      I didn’t use it because I didn’t find it relevant. They’re using hashing and EC algorithms and they’re improving them.    reply            jandrese  1 day ago    | root | parent | prev | next  [–]      It's hard to separate from the sea of grifters, con men, cranks, and scammers that infest the domain.  Just using the word is a yellow flag that you might be some kind of whacko, even if all you really want to talk about is the math. People have to forever be on guard that you might at any point pivot to all taxation is theft or how you have formed your own micro nation that consists entirely of yourself and thus have diplomatic immunity from all prosecution.  Because it happens.  Or maybe you have a once in a lifetime deal to buy this receipt like object for some hideous art that is guaranteed to appreciate in value millions of percent.  It's just the crowd that has aggregated around crypto currencies includes a lot of untrustworthy people.    reply            webXL  1 day ago    | root | parent | next  [–]      Why do people need to be on guard for those beliefs? People should be critical thinkers and not thought police. Granted, there are all kinds of whackos in crypto, but we should only be concerned about the immoral ones trying to scam us out of our money: SBF, Do-Kwon, and the like.    reply            sweeter  22 hours ago    | root | parent | next  [–]      people are legitimately buying farming land in the US and currently suing farmers for \"anti-trust\" for refusing to sell them their land so that they can quite literally create a crypto based sovereign micro-nation of wealthy tech VC's. [1] and I think that is a selfish, vile and delusional thing to do. It has nothing to do with \"thought police\" its as simple as looking at the impact of their actions and beliefs and making the decision to reject that way of thinking and way of life. 1: https://www.youtube.com/watch?v=PHlcAx-I0oY    reply            ShroudedNight  1 day ago    | root | parent | prev | next  [–]      The trough of disillusionment carved out by grifters burning the peat of enthusiasm unsustainably.    reply            nly  1 day ago    | parent | prev | next  [–]      A lot of slowness comes typically comes from wanting to avoid methods that enable side-channel timing attacks    reply            inopinatus  1 day ago    | parent | prev | next  [–]      I see they learned clang’s dirty little secret over intrinsics viz. that in producing the IR it deviates (sometimes dramatically when AVX-512 is concerned) from the documented opcodes and the results are inevitably detrimental.    reply            astrange  1 day ago    | root | parent | next  [–]      This is why ffmpeg uses assembly, and people get extremely mad when you say it's done for a reason, because they always want to come up with a fancier abstraction (usually cross-platform) which then defeats the purpose because it doesn't actually work. nb those abstractions do make sense when you can only afford to write a single implementation of the algorithm; then you're just talking about a high level programming language. But they frequently fail to achieve their goal when you're writing a second implementation for the sole purpose of being faster.    reply            electricshampo1  1 day ago    | parent | prev | next  [–]      Completely agree re: firedancer codebase. There is a level of thought and discipline wrt performance that I have never seen anywhere else.    reply            dhx  1 day ago    | root | parent | next  [–]      It's much more than just performance they've thought about. Here are some of the secure programming practices that have been implemented:  /* All the functions in this file are considered \"secure\", specifically:\n     - Constant time in the input, i.e. the input can be a secret[2]\n     - Small and auditable code base, incl. simple types\n     - Either, no local variables = no need to clear them before exit (most functions)\n     - Or, only static allocation + clear local variable before exit (fd_ed25519_scalar_mul_base_const_time)\n     - Clear registers via FD_FN_SENSITIVE[3]\n     - C safety\n  */ libsodium[4] implements similar mechanisms, and Linux kernel encryption code does too (example: use of kfree_sensitive)[5]. However, firedancer appears to better avoid moving secrets outside of CPU registers, and [3] explains that libraries such as libsodium have inadequate zeroisation, something which firedancer claims to improve upon. [1] https://github.com/firedancer-io/firedancer/blob/main/src/ba... [2] https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplic... [3] https://eprint.iacr.org/2023/1713 [4] https://libsodium.gitbook.io/doc/internals#security-first [5] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/lin...    reply            tptacek  1 day ago    | root | parent | next  [–]      These are table stakes for core cryptographic code, and SOT crypto code --- like the Amazon implementation this story is about --- tend at this point all to be derived from formal methods.    reply            dhx  1 day ago    | root | parent | next  [–]      As an example, the Amazon implementation doesn't refer to gcc's[1] and clang's[2] \"zero_call_used_regs\" to zeroise CPU registers upon return or exception of functions working on crypto secrets. OpenSSL doesn't either.[3] firedancer _does_ use \"zero_call_used_regs\" to allow gcc/clang to zeroise used CPU registers.[9] As another example, the Amazon implementation also doesn't refer to gcc's \"strub\" attribute which zeroises the function's stack upon return or exception of functions working on crypto secrets.[4][5] OpenSSL doesn't either.[3] firedancer _does_ use the \"strub\" attribute to allow gcc to zeroise the function's stack.[9] Is there a performance impact? [6] has the overhead at 0% for X25519 for implementing CPU register and stack zeroisation. Compiling the Linux kernel with \"CONFIG_ZERO_CALL_USED_REGS=1\" for x64_64 (impacting all kernel functions) was found to result in a 1-1.5% performance penalty.[7][8] [1] https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attribute... [2] https://clang.llvm.org/docs/AttributeReference.html#zero-cal... [3] https://github.com/openssl/openssl/discussions/24321 [4] https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Common-Type-At... [5] https://gcc.gnu.org/onlinedocs/gcc/Stack-Scrubbing.html [6] https://eprint.iacr.org/2023/1713.pdf [7] https://www.phoronix.com/review/zero-used-regs/5 [8] https://lore.kernel.org/lkml/20210505191804.4015873-1-keesco... [9] FD_FN_UNSANITIZED: https://github.com/firedancer-io/firedancer/blob/master/src/...    reply            jandrese  1 day ago    | root | parent | next  [–]      Zeroizing a register seems pretty straightforward.  Zeroizing any cache that it may have touched seems a lot more complex.  I guess that's why they work so hard to keep everything in registers.  Lucky for them we aren't in the x86 era anymore and there are a useful number of registers.  I'll need to read up on how they avoid context switches while their registers are loaded.    reply            SEJeff  1 day ago    | root | parent | prev | next  [–]      That team is full of world experts in high performance computing.    reply            pantalaimon  1 day ago    | parent | prev | next  [–]      That looks really neat, but I still don't understand what firedancer actually is - what is a validator client for Solana and why does it need it's own crypto library?    reply            SEJeff  1 day ago    | root | parent | next  [–]      It’s a new from scratch implementation of a validator for Solana the fastest blockchain by several orders of magnitude. The slowest part is signature verification so they sped up hashing to improve performance of the entire system. They follow a first principles approach (the lead has a few physics degrees) and opted to speed up the cryptography. The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. It’s a win in cryptography, much like this Amazon post is, except it’s slower than the firedancer implementation.    reply            scrlk  1 day ago    | root | parent | next  [–]      Off topic - is Firedancer going to survive Jump winding down its crypto arm? Kanav left, they liquidated a huge staked ETH position a few months ago (+ a bunch of other coins), and the SEC/CFTC is all over them for the Terra Luna fiasco.    reply            SEJeff  1 day ago    | root | parent | next  [–]      Rumors of Jump’s demise are greatly exaggerated. Check the torrent of firedancer talks at Solana Breakpoint literally next week and decide yourself. Folks have said jump is gonna die for 20+ years. They’ve been around 30ish…    reply            sangnoir  1 day ago    | root | parent | next  [–]      Parent asked a specific question about the survival of Firedancer and winding down of the crypto arm though. No demise of Jump mentioned.    reply            SEJeff  1 day ago    | root | parent | next  [–]      You will see a half dozen or so talks about firedancer and probably 35-40 or so of us total (I’m at the company that does security for firedancer, Asymmetric Research. We were founded by former jumpers). You can make the determination on your own, but there will be an obvious large showing of firedancer folks and some exciting updates for the project.    reply            caned  1 day ago    | root | parent | prev | next  [–]      > The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. For users that have AVX-512, which isn't widely available (AMD Zen 4 / Zen 5, Sapphire Rapids)...    reply            SEJeff  1 day ago    | root | parent | next  [–]      Sure, and cpus supporting it will proliferate. Shockingly to no one reading hacker news... Both software and hardware continue to improve with time generally speaking. This was a huge software improvement on hardware that supports that functionality. It is a huge win for anyone wanting to use these algorithms where they can afford hardware that supports it. We should celebrate Amazon's improvements and we should celebrate these improvements. Both are great for the future of technology, regardless of why they were initially developed. Improving tech and keeping it open source is good for all.    reply            4gotunameagain  1 day ago    | parent | prev | next  [–]      So many manhours spent on finding better ways to shovel around money and pocket what falls from the cracks. What a wasteful and unproductive enterprise, considering the vast majority of the devised improvements never see the public eye. Still, impressive work. Imagine if those brilliant minds behind this were focused somewhere else.    reply            posnet  1 day ago    | root | parent | next  [–]      The greatest minds of our generation spend their time thinking about how to: - make people click on ads - make trading algos faster - replace human artists - build more efficient killing machines - destroy any remaining concept of privacy    reply            geodel  23 hours ago    | root | parent | next  [–]      Greatest mind of previous generation made nuclear bombs and other deadly things.    reply            astrange  1 day ago    | root | parent | prev | next  [–]      Aren't the greatest mind(s) of our generation writing Terry Tao's blog posts?    reply            vladms  1 day ago    | root | parent | prev | next  [–]      This directly implies that all the people that did useful stuff (improving cancer survivability, new vaccines, renewable energy, and others) are all \"below\" the \"greatest minds of our generation\". Not to mention it also suggests there is a way to \"compare\" minds. I would not choose myself to do somethings, but that does not mean I despise automatically people choosing to.    reply            geodel  23 hours ago    | root | parent | next  [–]      I think they meant greatest minds have to be greatest money earners also. Else they are not greatest minds.    reply            4gotunameagain  1 day ago    | root | parent | prev | next  [–]      Hey, at least we had one of them working on TempleOS.    reply            toast0  1 day ago    | root | parent | prev | next  [–]      It doesn't seem wasteful and unproductive, given that the result of the HFT industry is smaller bid/ask spreads (lowering costs for all trades) and payment for order flow which is the mechanism that eliminated retail commissions and provides price improvement on many retail trades. And even so, HFT firms are making money. It might not seem like real work, but making money by reducing costs of market participants sounds like a good thing. I admit though, block trades might be harder now than before the rise of HFT. If you could do warehousing/distributing/coordinating fresh foods in a way that reduced the difference in price between the farmer and the consumer and make money doing it, that would clearly be good work.    reply            appendix-rock  1 day ago    | root | parent | prev | next  [–]      What do you work on?    reply            almostgotcaught  1 day ago    | root | parent | prev | next  [–]      I'll never be able to figure out what people get from repeating the same thing over and over. I've seen this same exact comment 1000 times on hn and I'm 100% sure you have too (indeed I believe the reason you repeat is because you've seen it and agree with it).    reply            XorNot  1 day ago    | root | parent | next  [–]      It's virtue signalling.    reply            slt2021  1 day ago    | parent | prev | next  [–]      wow amazing, nobody is gonna edit that code ever again...    reply            notfed  1 day ago    | prev | next  [–]      > The x25519 algorithm also plays a role in post-quantum safe cryptographic solutions, having been included as the classical algorithm in the TLS 1.3 and SSH hybrid scheme specifications for post-quantum key agreement. Really though? This mostly-untrue statement is the line that warrants adding hashtag #post-quantum-cryptography to the blogpost?    reply            westurner  1 day ago    | parent | next  [–]      Actually, e.g. rustls added X25519Kyber768Draft00 support this year: https://news.ycombinator.com/item?id=41534500 /?q X25519Kyber768Draft00: https://www.google.com/search?q=X25519Kyber768Draft00    reply            notfed  1 day ago    | root | parent | next  [–]      Kyber768 is the post-quantum algorithm in that example, not x25519.    reply            westurner  1 day ago    | root | parent | next  [–]      From \"OpenSSL 3.4 Alpha 1 Released with New Features\" (8 days ago) https://news.ycombinator.com/item?id=41456447#41456774 : > Someday there will probably be a TLS1.4/2.0 with PQ, and also FIPS-140 -4? > Are there additional ways to implement NIST PQ finalist algos with openssl? - open-quantum-safe/oqs-provider [implements mlkem512 through mlkem1024 and x25519_mlkem768]    reply            notfed  7 hours ago    | root | parent | next  [–]      Not sure what you're trying to say here . x25519 is objectively not PQC and never claimed to be, and this isn't debatable.    reply            westurner  6 hours ago    | root | parent | next  [–]      In this case, hybrid means \"not entirely PQ\".    reply            nanolith  1 day ago    | prev | next  [–]      The formal methods nerd in me is happy to see HOL Light being used to formally verify this implementation. I'm curious to see how closely their abstract machine models follow specific machine implementations. OOO, speculation, and deep pipelining have non-trivial impacts on potential side channels, and these vary quite a bit by stepping and architecture.    reply            holowoodman  1 day ago    | parent | next  [–]      Even worse: Each new CPU generation will need a new machine model and a reevaluation. Because OOO, speculation and all the timing behaviour are non-functional properties that frequently change due to new optimizations, different internal structuring, etc.    reply            aseipp  1 day ago    | prev | next  [–]      I was aware of s2n-bignum which is a very cool project, but apparently there is a larger sister project, aws-lc, that aims for broader set of APIs including OpenSSL compatibility, while retaining the general approach and vibe (lots of formal verification + performance work): https://github.com/aws/aws-lc That's pretty sweet. I'm currently using BoringSSL in a project as a supplement to OpenSSL (mostly because it is much easier to build for Windows users than requiring them to fiddle with msys2/vcpkg etc; the alternative is to rely on the Windows CNG API, but it lacks features like ed25519 support.) I wonder how much effort it would take to use aws-lc instead... Not that I'm that interested, BSSL is pretty good, but free performance and heavy automated verification is always nice :) Related: one of the authors of this post, John Harrison, wrote a really good book about automated theorm proving about 15 years ago while working on floating point verification at Intel -- there's still no other book quite like this one, I think https://www.cl.cam.ac.uk/~jrh13/    reply            newman314  1 day ago    | parent | next  [–]      Upon hearing about AWS-LC, I immediately thought about tying it to nginx to see if it will work. Turns out someone else has already tried: https://github.com/aws/aws-lc/issues/1827    reply            saghm  1 day ago    | prev | next  [–]      My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. At times I've run into places that require me to use RSA keys though (ironically, I seem to remember first experiencing this with AWS years back, although I honestly can't recall if this is still the case or not). If this further improvement becomes widely used, it would be interesting to see if it's enough to tip the scales towards ed25519 being more of the de facto \"default\" ssh key algorithm. My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that.    reply            scrapheap  1 day ago    | parent | next  [–]      > My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that. I wouldn't be surprised if a lot of people still use RSA for SSH keys for one or more of the following reasons: 1. A lot of tutorials about generating SSH Keys were written before ed25519, so if they follow an old tutorial they'll probably be generating an RSA key. 2. Older versions of OpenSSH, that you'd find on CentOS 7 and below, would default to RSA if you didn't specify a key type when running ssh-keygen. 3. There are some systems out there that don't support ed25519, though they are becoming rarer.  If you have to deal with those systems then you're forced to use RSA (at least for that system). 4. Some of us have been using SSH keys from way before OpenSSH add support for ed25519 keys in 2014, so any long lived SSH keys won't be ed25519 keys (wow, ed25519 has now been about in OpenSSH for over 10 years).    reply            miki123211  1 day ago    | root | parent | next  [–]      5. a lot of people (especially older people I suspect) think \"RSA\" when they hear \"public key cryptography\". I'm in my twenties and still have that reaction. I know elliptic curves exist, I even sort-of-kind-of have an awareness of how they work, but if I was asked to name one cryptosystem that used public and private keys, I'd definitely say RSA first and not elliptic curves.    reply            vitus  1 day ago    | root | parent | next  [–]      This is likely in no small part due to CS education only really teaching the mechanics of RSA (modular arithmetic, Fermat's little theorem, etc), or at least, that still seems to be the case at Berkeley. I'd guess because elliptic curve crypto requires more advanced math to reason about (more advanced group theory, at least) and doesn't map as cleanly to existing concepts that non-math-major undergrads have. cryptopals.com also doesn't cover any elliptive curve crypto until you get into the last set.    reply            tptacek  1 day ago    | root | parent | next  [–]      We didn't even cover RSA until the original last set. It's a build-up. :)    reply            throw0101b  1 day ago    | root | parent | prev | next  [–]      I would think that the (non-EC) Diffie-Hellman would also be easy enough to teach as well: exponentials and discrete log problem aren't any/much complicated than explaining factorization.    reply            pantalaimon  1 day ago    | root | parent | prev | next  [–]      > 3. There are some systems out there that don't support ed25519, though they are becoming rarer. If you have to deal with those systems then you're forced to use RSA (at least for that system). Azure Devops is a big one.    reply            Spooky23  1 day ago    | root | parent | prev | next  [–]      If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519.    reply            vitus  1 day ago    | root | parent | next  [–]      > If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519. Not even when FIPS 140-3 was (finally) finalized in 2019, and testing began in 2020? https://csrc.nist.gov/projects/cryptographic-module-validati... includes mentions of EdDSA, and Curve25519 is listed among the \"Recommended Curves for U.S. Federal Government Use\" on page 15 of https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.S... . (I guess the problem is that various crypto implementations need to get recertified under the new standard...) edit: it looks like AWS-LC [0] and boringcrypto [1] have both been validated under FIPS 140-3. Azure's OpenSSL crypto [2] has only been validated under FIPS 140-2 as far as I can tell. [0] https://csrc.nist.gov/projects/cryptographic-module-validati... [1] https://csrc.nist.gov/projects/cryptographic-module-validati... [2] https://csrc.nist.gov/projects/cryptographic-module-validati...    reply            devman0  1 day ago    | root | parent | prev | next  [–]      ed25519 is in FIPS 186-5 which meets criteria (a) for Approved Security Functions in FIPS 140-2.    reply            loudmax  1 day ago    | root | parent | prev | next  [–]      When I run `ssh-keygen`, I can remember the options `-t rsa` or `-t dsa`.  I simply cannot remember the flag `-t ed25519`.  I have to look it up every time. I just remember the flag as being vaguely similar the name of the monster robot from RoboCop.    reply            homebrewer  1 day ago    | root | parent | next  [–]      Use shell autocomplete. Even `bash-completion` suggests arguments for the key type these days:  $ ssh-keygen -t <TAB>\n  dsa   ecdsa   ecdsa-sk   ed25519   ed25519-sk  rsa `-sk` is short for \"security key\" if memory serves me right, and is used with FIDO2 hardware tokens.    reply            throw0101b  1 day ago    | root | parent | prev | next  [–]      > When I run `ssh-keygen` As of OpenSSH 9.5 the default has changed, so you don't have to specify anything:  * ssh-keygen(1): generate Ed25519 keys by default. Ed25519 public keys\n     are very convenient due to their small size. Ed25519 keys are\n     specified in RFC 8709 and OpenSSH has supported them since version 6.5\n     (January 2014). * https://www.openssh.com/txt/release-9.5    reply            saghm  1 day ago    | root | parent | next  [–]      Oh wow, I didn't know that one! I still manually type `-t ed25519` from muscle memory, I guess I don't have to now    reply            toast0  1 day ago    | parent | prev | next  [–]      > My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though.    reply            saghm  1 day ago    | root | parent | next  [–]      > My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though. Interesting! I wonder if this new algorithm is intended to help with that. I'm super curious if the smaller payload does indeed make a difference (with the current algorithm) like you mention; I know that with databases and filesystems, compression is commonly used to shift the balance from I/O to CPU due to disk writes being slow (with reduced storage size being a side benefit but not usually the main motivation), but I also know that cryptographic verification being too slow can be an anti-feature if it makes brute forcing feasible, so the amount of CPU work needed might be pretty high still.    reply            toast0  23 hours ago    | root | parent | next  [–]      On my ancient box, only including a few lines of output:  $ openssl speed rsa ecdsa\n\n                     sign    verify    sign/s verify/s\n   rsa 1024 bits 0.000117s 0.000008s   8518.7 132449.2\n   rsa 2048 bits 0.000884s 0.000025s   1130.6  39499.3\n\n                                 sign    verify    sign/s verify/s\n    256 bits ecdsa (nistp256)   0.0000s   0.0001s  33210.9  11483.0\n    384 bits ecdsa (nistp384)   0.0009s   0.0008s   1070.6   1268.9 It's 11 k verify/s for ecda vs 39k verify/s for rsa-2048. A TLS handshake needs at least one sign and verify from the server cert, plus some verifies for the signature on the cert chain (but those signatures are used over and over).    reply            stouset  1 day ago    | parent | prev | next  [–]      > anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519 That’s not really anecdotal. Generating an ed25519 key is barely more than generating a random 256-bit value. Generating an RSA key is significantly more work.    reply            saghm  1 day ago    | root | parent | next  [–]      I did say my understanding was probably naive; I didn't know the details to be able to assert anything beyond my own observation!    reply            stouset  1 day ago    | root | parent | next  [–]      Yep, not faulting you at all! I too was surprised when I found out that it’s a straight 256-bit random value with a few bits masked.    reply            saghm  1 day ago    | root | parent | next  [–]      I pretty quickly realized in college when learning about this stuff that the math was well over my head, and I shifted my focus more to understanding how to properly use cryptography rather than implement it (which turned out to be more important as a software engineer anyhow). In retrospect, I really appreciate how the professor I had in a security-focused course explicitly told us it was okay if we didn't understand the math and wouldn't be tested on it when going over how it worked.    reply            tptacek  1 day ago    | root | parent | next  [–]      Counterpoint: it's not OK to skip the math with cryptography. You may not need to power through all of Silverman's curve book (though: I don't know for sure that's true, which is why I don't call myself a cryptography engineer), but you have to get as deep into the math as you can in order to safely use cryptographic algorithms. If you're math-avoidant, stick with high-level abstractions like NaCL and TLS. There's nothing wrong with that! A professor talking about and demonstrating cryptography at the level of individual algorithms is doing their class a disservice if they say \"none of the math will be on the test\". The algorithms are enough to put something together that seems like it works; the math is what you need to find out if your resulting system actually does work. It's where many of the fun bug classes live.    reply            saghm  1 day ago    | root | parent | next  [–]      I'm not sure if you're reading more into what I said than I intended, but I'm not convinced by this argument. You might have missed that this course was on security in general, not cryptography; not everything in the course was cryptographic related. That said, I'd argue that for the vast majority of software engineers the type of stuff they're dealing with can be dealt with without needing to know the math. For example, you don't need to understand the math to behind the algorithms to know that bcrypt is a reasonable password hashing algorithm and that sha1 and md5 are not, or that salts are used to mitigate issues when users reuse passwords. These are principles that you can understand at a high level without fully understanding the underlying details. If anything, I think that overemphasis on requiring people to learn and understand the math has the effect of over-focusing on simpler algorithms that aren't actually what people want to be using in practice due to the fact that they're easier to teach and often foundational in conveying concepts that would need to be learned to understand the more complicated algorithms. If using cryptographic algorithms directly requires knowing the math, then I'd agree that most people shouldn't be using them directly, but I'd go further and say that a lack of libraries that are safe for people to use for software engineering without understanding the implementation is a failing of the ecosystem; as much as \"regular\" software engineering people (like myself!) can struggle with the math behind cryptography, I think that a lot of people developing cryptographic libraries struggle with building reasonable abstractions and making user-friendly APIs (which is a skill I think in general is not emphasized enough for most software engineers, to the detriment of everyone).    reply            tptacek  1 day ago    | root | parent | next  [–]      Sure. It's a failing of the ecosystem. That observation, a cup of coffee, and 1-3 years will get you a Kenny Paterson paper stunt-breaking your system. I feel where you're coming from, but, respectfully: it does not matter. My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry.    reply            saghm  1 day ago    | root | parent | next  [–]      > My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry. I'm not sure I understand what you mean here by \"something else in our industry\". Are you arguing that I'm not qualified to be a software engineer due to not understanding the math behind elliptic curves, or did you miss my repeated use of phrases like \"the vast majority of software engineers\" rather than some specialty where cryptography implementation details details are more important? If the latter, I can reassure you that I don't work in cryptography, work on any cryptographic libraries, or have any specific responsibilities related to security beyond the general idea that all software being written should be secure. If the former, I'll have to respectfully disagree, and suggest that maybe even if you aren't willing to consider that you're wrong about the math being a hard requirement for someone being qualified as a software engineer, it's worth considering that you almost certainly don't have enough information to conclude whether a stranger on the internet is qualified based on reading some of their comments.    reply            tptacek  3 hours ago    | root | parent | next  [–]      I'm certainly not saying you're not qualified to be a software engineer.    reply            syncsynchalt  1 day ago    | root | parent | prev | next  [–]      Learning X25519 isn't too hard!  See https://curves.xargs.org for the basics and https://x25519.xargs.org for some refining details.    reply            upofadown  1 day ago    | parent | prev | next  [–]      Another article from the same blog about optimizing RSA: * https://www.amazon.science/blog/formal-verification-makes-rs... RSA signature verification is already very fast and TLS doesn't use RSA for encryption anymore so the problem reduces to optimizing signing operations.    reply            fefe23  1 day ago    | prev | next  [–]      Holy shit these claims are wild!\nIt's not just a percent more performance here and there, the graphs look more like 50% more throughput on the same hardware (depending on the cpu architecture). My immediate fear was that they optimized away the security features like absence of timing side channels, but they say they still have those. They also claim to have formal proof of correctness, which is even more amazing, because they are not doing it on a symbolic level but on a machine instruction level. Apparently they tought their reasoning system the semantics of all the CPU instructions used in the assembler implementation. I'll still wait what djb has to say about this, but it looks freaking amazing to me.    reply            jonmon6691  1 day ago    | prev | next  [–]      I'm assuming when they say that this improves user experience, that it implies the use case is primarily TLS. In which case store-now-decrypt-later attacks are already considered an urgent threat with regard to post quantum crypto. With FIPS 203 being released and Chrome is already using an implementation based on the draft standard, this seems like this algo (at least for TLS) should be on its way out.    reply            dlgeek  1 day ago    | parent | next  [–]      The industry is moving to a hybrid that mixes classic crypto (including ECC) with post-quantum crypto. AWS has even turned this on in some places - https://aws.amazon.com/about-aws/whats-new/2022/03/aws-kms-a... from 2022 and https://docs.aws.amazon.com/kms/latest/developerguide/pqtls.... for some details.    reply            jonmon6691  1 day ago    | root | parent | next  [–]      Thanks I forgot about that. So if understand it right, the idea is to provide some insurance in the case that these relatively young algorithms are broken as they get exposed to more and more cryptanalysis    reply            adgjlsfhk1  1 day ago    | parent | prev | next  [–]      No one other than NIST is recommending phasing out pre-quantum crypto. Everyone else is using a combination of pre-quantum and post-quantum because trust in the security and robustness of the post-quantum ecosystem is fairly low.    reply            webXL  1 day ago    | prev | next  [–]      Why don't they just focus on making a Gravitron variant with those algorithms in the circuitry?    reply            londons_explore  1 day ago    | prev  [–]      Does 25519 suffer from key/data-dependant execution time? Is this implementation resistant to that? If it isn't, it's kinda a footgun which shouldn't be published for general use.    reply            syncsynchalt  1 day ago    | parent | next  [–]      Curve25519 is designed to be resistant to timing attacks, such as clamping the 254th bit in x25519 keys to 1 so that implementors can not optimize away a multiplication round. That doesn't mean that this implementation doesn't have timing attacks, but the implementors claim they chose mechanisms which should be constant-time.    reply            vitus  1 day ago    | parent | prev  [–]      > Does 25519 suffer from key/data-dependant execution time? I mean, when implemented naively, yes, but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. From the article: > We also do our best to execute the algorithms in constant time, to thwart side-channel attacks that infer secret information from the durations of computations. https://github.com/awslabs/s2n-bignum (where most of the heavy lifting is done, per the article) further explicitly states that \"Each function is moreover written in a constant-time style to avoid timing side-channels.\"    reply            justinwsmith  1 day ago    | root | parent | next  [–]      The next paragraph makes a slightly stronger statement about its constant-time'ness: > Our implementations of x/Ed25519 are designed with constant time in mind. They perform exactly the same sequence of basic CPU instructions regardless of the input values, and they avoid any CPU instructions that might have data-dependent timing.    reply            deathanatos  1 day ago    | root | parent | prev  [–]      > but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. When I see CVE-fests like — https://people.redhat.com/~hkario/marvin/ — … I just do not come away with that impression. [Widely used] Cryptographic Rust crates offering \"constant time\" operations in \"pure Rust\" — but Rust has no primitives for doing constant time operations , so it's only through hopes and prayers that it might actually work, and with no guarantee anywhere that it actually should . (Other, less timing attack related stuff, but e.g., major companies still not supporting anything beyond RSA.)    reply              Guidelines | FAQ | Lists | API | Security | Legal | Apply to YC | Contact    Search:             Better-performing “25519” elliptic-curve cryptography | Hacker News Better-performing “25519” elliptic-curve cryptography | Hacker News    Hacker News  new | past | comments | ask | show | jobs | submit   login          Better-performing “25519” elliptic-curve cryptography ( amazon.science )   212 points by lemaudit  1 day ago   | hide | past | favorite | 87 comments                         SEJeff  1 day ago    | next  [–]      The firedancer team at one of the better HFT firms wrote an AVX512 optimized implementation of ed25519 and X25519 that’s significantly faster than OpenSSL. https://github.com/firedancer-io/firedancer/pull/716 Ditto for sha256: https://github.com/firedancer-io/firedancer/pull/778 And sha512: https://github.com/firedancer-io/firedancer/pull/760 If you’re an optimization nerd, this codebase is wild.    reply            syzygyhack  1 day ago    | parent | next  [–]      I laughed a little at calling Firedancer contributors \"a team at a HFT firm\". Not that you are technically wrong, not at all, that's where Jump came from. It's just that this is all completely blockchain-driven optimization, but the b-word is so dirty now that we've gotta go back to using TradFi for the rep.    reply            SEJeff  1 day ago    | root | parent | next  [–]      It’s an optimization in hashing algorithms that is around twice as fast as the ones Amazon is posting in thus article for the same eliptic curves. If the Amazon improvements are hacker news worthy (they are) this seems reasonable contextually. Also, I worked for Jump for almost 12 years :)    reply            webXL  1 day ago    | root | parent | prev | next  [–]      What makes the “b-word” dirty?    reply            SEJeff  1 day ago    | root | parent | next  [–]      I didn’t use it because I didn’t find it relevant. They’re using hashing and EC algorithms and they’re improving them.    reply            jandrese  1 day ago    | root | parent | prev | next  [–]      It's hard to separate from the sea of grifters, con men, cranks, and scammers that infest the domain.  Just using the word is a yellow flag that you might be some kind of whacko, even if all you really want to talk about is the math. People have to forever be on guard that you might at any point pivot to all taxation is theft or how you have formed your own micro nation that consists entirely of yourself and thus have diplomatic immunity from all prosecution.  Because it happens.  Or maybe you have a once in a lifetime deal to buy this receipt like object for some hideous art that is guaranteed to appreciate in value millions of percent.  It's just the crowd that has aggregated around crypto currencies includes a lot of untrustworthy people.    reply            webXL  1 day ago    | root | parent | next  [–]      Why do people need to be on guard for those beliefs? People should be critical thinkers and not thought police. Granted, there are all kinds of whackos in crypto, but we should only be concerned about the immoral ones trying to scam us out of our money: SBF, Do-Kwon, and the like.    reply            sweeter  22 hours ago    | root | parent | next  [–]      people are legitimately buying farming land in the US and currently suing farmers for \"anti-trust\" for refusing to sell them their land so that they can quite literally create a crypto based sovereign micro-nation of wealthy tech VC's. [1] and I think that is a selfish, vile and delusional thing to do. It has nothing to do with \"thought police\" its as simple as looking at the impact of their actions and beliefs and making the decision to reject that way of thinking and way of life. 1: https://www.youtube.com/watch?v=PHlcAx-I0oY    reply            ShroudedNight  1 day ago    | root | parent | prev | next  [–]      The trough of disillusionment carved out by grifters burning the peat of enthusiasm unsustainably.    reply            nly  1 day ago    | parent | prev | next  [–]      A lot of slowness comes typically comes from wanting to avoid methods that enable side-channel timing attacks    reply            inopinatus  1 day ago    | parent | prev | next  [–]      I see they learned clang’s dirty little secret over intrinsics viz. that in producing the IR it deviates (sometimes dramatically when AVX-512 is concerned) from the documented opcodes and the results are inevitably detrimental.    reply            astrange  1 day ago    | root | parent | next  [–]      This is why ffmpeg uses assembly, and people get extremely mad when you say it's done for a reason, because they always want to come up with a fancier abstraction (usually cross-platform) which then defeats the purpose because it doesn't actually work. nb those abstractions do make sense when you can only afford to write a single implementation of the algorithm; then you're just talking about a high level programming language. But they frequently fail to achieve their goal when you're writing a second implementation for the sole purpose of being faster.    reply            electricshampo1  1 day ago    | parent | prev | next  [–]      Completely agree re: firedancer codebase. There is a level of thought and discipline wrt performance that I have never seen anywhere else.    reply            dhx  1 day ago    | root | parent | next  [–]      It's much more than just performance they've thought about. Here are some of the secure programming practices that have been implemented:  /* All the functions in this file are considered \"secure\", specifically:\n     - Constant time in the input, i.e. the input can be a secret[2]\n     - Small and auditable code base, incl. simple types\n     - Either, no local variables = no need to clear them before exit (most functions)\n     - Or, only static allocation + clear local variable before exit (fd_ed25519_scalar_mul_base_const_time)\n     - Clear registers via FD_FN_SENSITIVE[3]\n     - C safety\n  */ libsodium[4] implements similar mechanisms, and Linux kernel encryption code does too (example: use of kfree_sensitive)[5]. However, firedancer appears to better avoid moving secrets outside of CPU registers, and [3] explains that libraries such as libsodium have inadequate zeroisation, something which firedancer claims to improve upon. [1] https://github.com/firedancer-io/firedancer/blob/main/src/ba... [2] https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplic... [3] https://eprint.iacr.org/2023/1713 [4] https://libsodium.gitbook.io/doc/internals#security-first [5] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/lin...    reply            tptacek  1 day ago    | root | parent | next  [–]      These are table stakes for core cryptographic code, and SOT crypto code --- like the Amazon implementation this story is about --- tend at this point all to be derived from formal methods.    reply            dhx  1 day ago    | root | parent | next  [–]      As an example, the Amazon implementation doesn't refer to gcc's[1] and clang's[2] \"zero_call_used_regs\" to zeroise CPU registers upon return or exception of functions working on crypto secrets. OpenSSL doesn't either.[3] firedancer _does_ use \"zero_call_used_regs\" to allow gcc/clang to zeroise used CPU registers.[9] As another example, the Amazon implementation also doesn't refer to gcc's \"strub\" attribute which zeroises the function's stack upon return or exception of functions working on crypto secrets.[4][5] OpenSSL doesn't either.[3] firedancer _does_ use the \"strub\" attribute to allow gcc to zeroise the function's stack.[9] Is there a performance impact? [6] has the overhead at 0% for X25519 for implementing CPU register and stack zeroisation. Compiling the Linux kernel with \"CONFIG_ZERO_CALL_USED_REGS=1\" for x64_64 (impacting all kernel functions) was found to result in a 1-1.5% performance penalty.[7][8] [1] https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attribute... [2] https://clang.llvm.org/docs/AttributeReference.html#zero-cal... [3] https://github.com/openssl/openssl/discussions/24321 [4] https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Common-Type-At... [5] https://gcc.gnu.org/onlinedocs/gcc/Stack-Scrubbing.html [6] https://eprint.iacr.org/2023/1713.pdf [7] https://www.phoronix.com/review/zero-used-regs/5 [8] https://lore.kernel.org/lkml/20210505191804.4015873-1-keesco... [9] FD_FN_UNSANITIZED: https://github.com/firedancer-io/firedancer/blob/master/src/...    reply            jandrese  1 day ago    | root | parent | next  [–]      Zeroizing a register seems pretty straightforward.  Zeroizing any cache that it may have touched seems a lot more complex.  I guess that's why they work so hard to keep everything in registers.  Lucky for them we aren't in the x86 era anymore and there are a useful number of registers.  I'll need to read up on how they avoid context switches while their registers are loaded.    reply            SEJeff  1 day ago    | root | parent | prev | next  [–]      That team is full of world experts in high performance computing.    reply            pantalaimon  1 day ago    | parent | prev | next  [–]      That looks really neat, but I still don't understand what firedancer actually is - what is a validator client for Solana and why does it need it's own crypto library?    reply            SEJeff  1 day ago    | root | parent | next  [–]      It’s a new from scratch implementation of a validator for Solana the fastest blockchain by several orders of magnitude. The slowest part is signature verification so they sped up hashing to improve performance of the entire system. They follow a first principles approach (the lead has a few physics degrees) and opted to speed up the cryptography. The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. It’s a win in cryptography, much like this Amazon post is, except it’s slower than the firedancer implementation.    reply            scrlk  1 day ago    | root | parent | next  [–]      Off topic - is Firedancer going to survive Jump winding down its crypto arm? Kanav left, they liquidated a huge staked ETH position a few months ago (+ a bunch of other coins), and the SEC/CFTC is all over them for the Terra Luna fiasco.    reply            SEJeff  1 day ago    | root | parent | next  [–]      Rumors of Jump’s demise are greatly exaggerated. Check the torrent of firedancer talks at Solana Breakpoint literally next week and decide yourself. Folks have said jump is gonna die for 20+ years. They’ve been around 30ish…    reply            sangnoir  1 day ago    | root | parent | next  [–]      Parent asked a specific question about the survival of Firedancer and winding down of the crypto arm though. No demise of Jump mentioned.    reply            SEJeff  1 day ago    | root | parent | next  [–]      You will see a half dozen or so talks about firedancer and probably 35-40 or so of us total (I’m at the company that does security for firedancer, Asymmetric Research. We were founded by former jumpers). You can make the determination on your own, but there will be an obvious large showing of firedancer folks and some exciting updates for the project.    reply            caned  1 day ago    | root | parent | prev | next  [–]      > The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. For users that have AVX-512, which isn't widely available (AMD Zen 4 / Zen 5, Sapphire Rapids)...    reply            SEJeff  1 day ago    | root | parent | next  [–]      Sure, and cpus supporting it will proliferate. Shockingly to no one reading hacker news... Both software and hardware continue to improve with time generally speaking. This was a huge software improvement on hardware that supports that functionality. It is a huge win for anyone wanting to use these algorithms where they can afford hardware that supports it. We should celebrate Amazon's improvements and we should celebrate these improvements. Both are great for the future of technology, regardless of why they were initially developed. Improving tech and keeping it open source is good for all.    reply            4gotunameagain  1 day ago    | parent | prev | next  [–]      So many manhours spent on finding better ways to shovel around money and pocket what falls from the cracks. What a wasteful and unproductive enterprise, considering the vast majority of the devised improvements never see the public eye. Still, impressive work. Imagine if those brilliant minds behind this were focused somewhere else.    reply            posnet  1 day ago    | root | parent | next  [–]      The greatest minds of our generation spend their time thinking about how to: - make people click on ads - make trading algos faster - replace human artists - build more efficient killing machines - destroy any remaining concept of privacy    reply            geodel  23 hours ago    | root | parent | next  [–]      Greatest mind of previous generation made nuclear bombs and other deadly things.    reply            astrange  1 day ago    | root | parent | prev | next  [–]      Aren't the greatest mind(s) of our generation writing Terry Tao's blog posts?    reply            vladms  1 day ago    | root | parent | prev | next  [–]      This directly implies that all the people that did useful stuff (improving cancer survivability, new vaccines, renewable energy, and others) are all \"below\" the \"greatest minds of our generation\". Not to mention it also suggests there is a way to \"compare\" minds. I would not choose myself to do somethings, but that does not mean I despise automatically people choosing to.    reply            geodel  23 hours ago    | root | parent | next  [–]      I think they meant greatest minds have to be greatest money earners also. Else they are not greatest minds.    reply            4gotunameagain  1 day ago    | root | parent | prev | next  [–]      Hey, at least we had one of them working on TempleOS.    reply            toast0  1 day ago    | root | parent | prev | next  [–]      It doesn't seem wasteful and unproductive, given that the result of the HFT industry is smaller bid/ask spreads (lowering costs for all trades) and payment for order flow which is the mechanism that eliminated retail commissions and provides price improvement on many retail trades. And even so, HFT firms are making money. It might not seem like real work, but making money by reducing costs of market participants sounds like a good thing. I admit though, block trades might be harder now than before the rise of HFT. If you could do warehousing/distributing/coordinating fresh foods in a way that reduced the difference in price between the farmer and the consumer and make money doing it, that would clearly be good work.    reply            appendix-rock  1 day ago    | root | parent | prev | next  [–]      What do you work on?    reply            almostgotcaught  1 day ago    | root | parent | prev | next  [–]      I'll never be able to figure out what people get from repeating the same thing over and over. I've seen this same exact comment 1000 times on hn and I'm 100% sure you have too (indeed I believe the reason you repeat is because you've seen it and agree with it).    reply            XorNot  1 day ago    | root | parent | next  [–]      It's virtue signalling.    reply            slt2021  1 day ago    | parent | prev | next  [–]      wow amazing, nobody is gonna edit that code ever again...    reply            notfed  1 day ago    | prev | next  [–]      > The x25519 algorithm also plays a role in post-quantum safe cryptographic solutions, having been included as the classical algorithm in the TLS 1.3 and SSH hybrid scheme specifications for post-quantum key agreement. Really though? This mostly-untrue statement is the line that warrants adding hashtag #post-quantum-cryptography to the blogpost?    reply            westurner  1 day ago    | parent | next  [–]      Actually, e.g. rustls added X25519Kyber768Draft00 support this year: https://news.ycombinator.com/item?id=41534500 /?q X25519Kyber768Draft00: https://www.google.com/search?q=X25519Kyber768Draft00    reply            notfed  1 day ago    | root | parent | next  [–]      Kyber768 is the post-quantum algorithm in that example, not x25519.    reply            westurner  1 day ago    | root | parent | next  [–]      From \"OpenSSL 3.4 Alpha 1 Released with New Features\" (8 days ago) https://news.ycombinator.com/item?id=41456447#41456774 : > Someday there will probably be a TLS1.4/2.0 with PQ, and also FIPS-140 -4? > Are there additional ways to implement NIST PQ finalist algos with openssl? - open-quantum-safe/oqs-provider [implements mlkem512 through mlkem1024 and x25519_mlkem768]    reply            notfed  7 hours ago    | root | parent | next  [–]      Not sure what you're trying to say here . x25519 is objectively not PQC and never claimed to be, and this isn't debatable.    reply            westurner  6 hours ago    | root | parent | next  [–]      In this case, hybrid means \"not entirely PQ\".    reply            nanolith  1 day ago    | prev | next  [–]      The formal methods nerd in me is happy to see HOL Light being used to formally verify this implementation. I'm curious to see how closely their abstract machine models follow specific machine implementations. OOO, speculation, and deep pipelining have non-trivial impacts on potential side channels, and these vary quite a bit by stepping and architecture.    reply            holowoodman  1 day ago    | parent | next  [–]      Even worse: Each new CPU generation will need a new machine model and a reevaluation. Because OOO, speculation and all the timing behaviour are non-functional properties that frequently change due to new optimizations, different internal structuring, etc.    reply            aseipp  1 day ago    | prev | next  [–]      I was aware of s2n-bignum which is a very cool project, but apparently there is a larger sister project, aws-lc, that aims for broader set of APIs including OpenSSL compatibility, while retaining the general approach and vibe (lots of formal verification + performance work): https://github.com/aws/aws-lc That's pretty sweet. I'm currently using BoringSSL in a project as a supplement to OpenSSL (mostly because it is much easier to build for Windows users than requiring them to fiddle with msys2/vcpkg etc; the alternative is to rely on the Windows CNG API, but it lacks features like ed25519 support.) I wonder how much effort it would take to use aws-lc instead... Not that I'm that interested, BSSL is pretty good, but free performance and heavy automated verification is always nice :) Related: one of the authors of this post, John Harrison, wrote a really good book about automated theorm proving about 15 years ago while working on floating point verification at Intel -- there's still no other book quite like this one, I think https://www.cl.cam.ac.uk/~jrh13/    reply            newman314  1 day ago    | parent | next  [–]      Upon hearing about AWS-LC, I immediately thought about tying it to nginx to see if it will work. Turns out someone else has already tried: https://github.com/aws/aws-lc/issues/1827    reply            saghm  1 day ago    | prev | next  [–]      My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. At times I've run into places that require me to use RSA keys though (ironically, I seem to remember first experiencing this with AWS years back, although I honestly can't recall if this is still the case or not). If this further improvement becomes widely used, it would be interesting to see if it's enough to tip the scales towards ed25519 being more of the de facto \"default\" ssh key algorithm. My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that.    reply            scrapheap  1 day ago    | parent | next  [–]      > My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that. I wouldn't be surprised if a lot of people still use RSA for SSH keys for one or more of the following reasons: 1. A lot of tutorials about generating SSH Keys were written before ed25519, so if they follow an old tutorial they'll probably be generating an RSA key. 2. Older versions of OpenSSH, that you'd find on CentOS 7 and below, would default to RSA if you didn't specify a key type when running ssh-keygen. 3. There are some systems out there that don't support ed25519, though they are becoming rarer.  If you have to deal with those systems then you're forced to use RSA (at least for that system). 4. Some of us have been using SSH keys from way before OpenSSH add support for ed25519 keys in 2014, so any long lived SSH keys won't be ed25519 keys (wow, ed25519 has now been about in OpenSSH for over 10 years).    reply            miki123211  1 day ago    | root | parent | next  [–]      5. a lot of people (especially older people I suspect) think \"RSA\" when they hear \"public key cryptography\". I'm in my twenties and still have that reaction. I know elliptic curves exist, I even sort-of-kind-of have an awareness of how they work, but if I was asked to name one cryptosystem that used public and private keys, I'd definitely say RSA first and not elliptic curves.    reply            vitus  1 day ago    | root | parent | next  [–]      This is likely in no small part due to CS education only really teaching the mechanics of RSA (modular arithmetic, Fermat's little theorem, etc), or at least, that still seems to be the case at Berkeley. I'd guess because elliptic curve crypto requires more advanced math to reason about (more advanced group theory, at least) and doesn't map as cleanly to existing concepts that non-math-major undergrads have. cryptopals.com also doesn't cover any elliptive curve crypto until you get into the last set.    reply            tptacek  1 day ago    | root | parent | next  [–]      We didn't even cover RSA until the original last set. It's a build-up. :)    reply            throw0101b  1 day ago    | root | parent | prev | next  [–]      I would think that the (non-EC) Diffie-Hellman would also be easy enough to teach as well: exponentials and discrete log problem aren't any/much complicated than explaining factorization.    reply            pantalaimon  1 day ago    | root | parent | prev | next  [–]      > 3. There are some systems out there that don't support ed25519, though they are becoming rarer. If you have to deal with those systems then you're forced to use RSA (at least for that system). Azure Devops is a big one.    reply            Spooky23  1 day ago    | root | parent | prev | next  [–]      If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519.    reply            vitus  1 day ago    | root | parent | next  [–]      > If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519. Not even when FIPS 140-3 was (finally) finalized in 2019, and testing began in 2020? https://csrc.nist.gov/projects/cryptographic-module-validati... includes mentions of EdDSA, and Curve25519 is listed among the \"Recommended Curves for U.S. Federal Government Use\" on page 15 of https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.S... . (I guess the problem is that various crypto implementations need to get recertified under the new standard...) edit: it looks like AWS-LC [0] and boringcrypto [1] have both been validated under FIPS 140-3. Azure's OpenSSL crypto [2] has only been validated under FIPS 140-2 as far as I can tell. [0] https://csrc.nist.gov/projects/cryptographic-module-validati... [1] https://csrc.nist.gov/projects/cryptographic-module-validati... [2] https://csrc.nist.gov/projects/cryptographic-module-validati...    reply            devman0  1 day ago    | root | parent | prev | next  [–]      ed25519 is in FIPS 186-5 which meets criteria (a) for Approved Security Functions in FIPS 140-2.    reply            loudmax  1 day ago    | root | parent | prev | next  [–]      When I run `ssh-keygen`, I can remember the options `-t rsa` or `-t dsa`.  I simply cannot remember the flag `-t ed25519`.  I have to look it up every time. I just remember the flag as being vaguely similar the name of the monster robot from RoboCop.    reply            homebrewer  1 day ago    | root | parent | next  [–]      Use shell autocomplete. Even `bash-completion` suggests arguments for the key type these days:  $ ssh-keygen -t <TAB>\n  dsa   ecdsa   ecdsa-sk   ed25519   ed25519-sk  rsa `-sk` is short for \"security key\" if memory serves me right, and is used with FIDO2 hardware tokens.    reply            throw0101b  1 day ago    | root | parent | prev | next  [–]      > When I run `ssh-keygen` As of OpenSSH 9.5 the default has changed, so you don't have to specify anything:  * ssh-keygen(1): generate Ed25519 keys by default. Ed25519 public keys\n     are very convenient due to their small size. Ed25519 keys are\n     specified in RFC 8709 and OpenSSH has supported them since version 6.5\n     (January 2014). * https://www.openssh.com/txt/release-9.5    reply            saghm  1 day ago    | root | parent | next  [–]      Oh wow, I didn't know that one! I still manually type `-t ed25519` from muscle memory, I guess I don't have to now    reply            toast0  1 day ago    | parent | prev | next  [–]      > My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though.    reply            saghm  1 day ago    | root | parent | next  [–]      > My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though. Interesting! I wonder if this new algorithm is intended to help with that. I'm super curious if the smaller payload does indeed make a difference (with the current algorithm) like you mention; I know that with databases and filesystems, compression is commonly used to shift the balance from I/O to CPU due to disk writes being slow (with reduced storage size being a side benefit but not usually the main motivation), but I also know that cryptographic verification being too slow can be an anti-feature if it makes brute forcing feasible, so the amount of CPU work needed might be pretty high still.    reply            toast0  23 hours ago    | root | parent | next  [–]      On my ancient box, only including a few lines of output:  $ openssl speed rsa ecdsa\n\n                     sign    verify    sign/s verify/s\n   rsa 1024 bits 0.000117s 0.000008s   8518.7 132449.2\n   rsa 2048 bits 0.000884s 0.000025s   1130.6  39499.3\n\n                                 sign    verify    sign/s verify/s\n    256 bits ecdsa (nistp256)   0.0000s   0.0001s  33210.9  11483.0\n    384 bits ecdsa (nistp384)   0.0009s   0.0008s   1070.6   1268.9 It's 11 k verify/s for ecda vs 39k verify/s for rsa-2048. A TLS handshake needs at least one sign and verify from the server cert, plus some verifies for the signature on the cert chain (but those signatures are used over and over).    reply            stouset  1 day ago    | parent | prev | next  [–]      > anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519 That’s not really anecdotal. Generating an ed25519 key is barely more than generating a random 256-bit value. Generating an RSA key is significantly more work.    reply            saghm  1 day ago    | root | parent | next  [–]      I did say my understanding was probably naive; I didn't know the details to be able to assert anything beyond my own observation!    reply            stouset  1 day ago    | root | parent | next  [–]      Yep, not faulting you at all! I too was surprised when I found out that it’s a straight 256-bit random value with a few bits masked.    reply            saghm  1 day ago    | root | parent | next  [–]      I pretty quickly realized in college when learning about this stuff that the math was well over my head, and I shifted my focus more to understanding how to properly use cryptography rather than implement it (which turned out to be more important as a software engineer anyhow). In retrospect, I really appreciate how the professor I had in a security-focused course explicitly told us it was okay if we didn't understand the math and wouldn't be tested on it when going over how it worked.    reply            tptacek  1 day ago    | root | parent | next  [–]      Counterpoint: it's not OK to skip the math with cryptography. You may not need to power through all of Silverman's curve book (though: I don't know for sure that's true, which is why I don't call myself a cryptography engineer), but you have to get as deep into the math as you can in order to safely use cryptographic algorithms. If you're math-avoidant, stick with high-level abstractions like NaCL and TLS. There's nothing wrong with that! A professor talking about and demonstrating cryptography at the level of individual algorithms is doing their class a disservice if they say \"none of the math will be on the test\". The algorithms are enough to put something together that seems like it works; the math is what you need to find out if your resulting system actually does work. It's where many of the fun bug classes live.    reply            saghm  1 day ago    | root | parent | next  [–]      I'm not sure if you're reading more into what I said than I intended, but I'm not convinced by this argument. You might have missed that this course was on security in general, not cryptography; not everything in the course was cryptographic related. That said, I'd argue that for the vast majority of software engineers the type of stuff they're dealing with can be dealt with without needing to know the math. For example, you don't need to understand the math to behind the algorithms to know that bcrypt is a reasonable password hashing algorithm and that sha1 and md5 are not, or that salts are used to mitigate issues when users reuse passwords. These are principles that you can understand at a high level without fully understanding the underlying details. If anything, I think that overemphasis on requiring people to learn and understand the math has the effect of over-focusing on simpler algorithms that aren't actually what people want to be using in practice due to the fact that they're easier to teach and often foundational in conveying concepts that would need to be learned to understand the more complicated algorithms. If using cryptographic algorithms directly requires knowing the math, then I'd agree that most people shouldn't be using them directly, but I'd go further and say that a lack of libraries that are safe for people to use for software engineering without understanding the implementation is a failing of the ecosystem; as much as \"regular\" software engineering people (like myself!) can struggle with the math behind cryptography, I think that a lot of people developing cryptographic libraries struggle with building reasonable abstractions and making user-friendly APIs (which is a skill I think in general is not emphasized enough for most software engineers, to the detriment of everyone).    reply            tptacek  1 day ago    | root | parent | next  [–]      Sure. It's a failing of the ecosystem. That observation, a cup of coffee, and 1-3 years will get you a Kenny Paterson paper stunt-breaking your system. I feel where you're coming from, but, respectfully: it does not matter. My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry.    reply            saghm  1 day ago    | root | parent | next  [–]      > My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry. I'm not sure I understand what you mean here by \"something else in our industry\". Are you arguing that I'm not qualified to be a software engineer due to not understanding the math behind elliptic curves, or did you miss my repeated use of phrases like \"the vast majority of software engineers\" rather than some specialty where cryptography implementation details details are more important? If the latter, I can reassure you that I don't work in cryptography, work on any cryptographic libraries, or have any specific responsibilities related to security beyond the general idea that all software being written should be secure. If the former, I'll have to respectfully disagree, and suggest that maybe even if you aren't willing to consider that you're wrong about the math being a hard requirement for someone being qualified as a software engineer, it's worth considering that you almost certainly don't have enough information to conclude whether a stranger on the internet is qualified based on reading some of their comments.    reply            tptacek  3 hours ago    | root | parent | next  [–]      I'm certainly not saying you're not qualified to be a software engineer.    reply            syncsynchalt  1 day ago    | root | parent | prev | next  [–]      Learning X25519 isn't too hard!  See https://curves.xargs.org for the basics and https://x25519.xargs.org for some refining details.    reply            upofadown  1 day ago    | parent | prev | next  [–]      Another article from the same blog about optimizing RSA: * https://www.amazon.science/blog/formal-verification-makes-rs... RSA signature verification is already very fast and TLS doesn't use RSA for encryption anymore so the problem reduces to optimizing signing operations.    reply            fefe23  1 day ago    | prev | next  [–]      Holy shit these claims are wild!\nIt's not just a percent more performance here and there, the graphs look more like 50% more throughput on the same hardware (depending on the cpu architecture). My immediate fear was that they optimized away the security features like absence of timing side channels, but they say they still have those. They also claim to have formal proof of correctness, which is even more amazing, because they are not doing it on a symbolic level but on a machine instruction level. Apparently they tought their reasoning system the semantics of all the CPU instructions used in the assembler implementation. I'll still wait what djb has to say about this, but it looks freaking amazing to me.    reply            jonmon6691  1 day ago    | prev | next  [–]      I'm assuming when they say that this improves user experience, that it implies the use case is primarily TLS. In which case store-now-decrypt-later attacks are already considered an urgent threat with regard to post quantum crypto. With FIPS 203 being released and Chrome is already using an implementation based on the draft standard, this seems like this algo (at least for TLS) should be on its way out.    reply            dlgeek  1 day ago    | parent | next  [–]      The industry is moving to a hybrid that mixes classic crypto (including ECC) with post-quantum crypto. AWS has even turned this on in some places - https://aws.amazon.com/about-aws/whats-new/2022/03/aws-kms-a... from 2022 and https://docs.aws.amazon.com/kms/latest/developerguide/pqtls.... for some details.    reply            jonmon6691  1 day ago    | root | parent | next  [–]      Thanks I forgot about that. So if understand it right, the idea is to provide some insurance in the case that these relatively young algorithms are broken as they get exposed to more and more cryptanalysis    reply            adgjlsfhk1  1 day ago    | parent | prev | next  [–]      No one other than NIST is recommending phasing out pre-quantum crypto. Everyone else is using a combination of pre-quantum and post-quantum because trust in the security and robustness of the post-quantum ecosystem is fairly low.    reply            webXL  1 day ago    | prev | next  [–]      Why don't they just focus on making a Gravitron variant with those algorithms in the circuitry?    reply            londons_explore  1 day ago    | prev  [–]      Does 25519 suffer from key/data-dependant execution time? Is this implementation resistant to that? If it isn't, it's kinda a footgun which shouldn't be published for general use.    reply            syncsynchalt  1 day ago    | parent | next  [–]      Curve25519 is designed to be resistant to timing attacks, such as clamping the 254th bit in x25519 keys to 1 so that implementors can not optimize away a multiplication round. That doesn't mean that this implementation doesn't have timing attacks, but the implementors claim they chose mechanisms which should be constant-time.    reply            vitus  1 day ago    | parent | prev  [–]      > Does 25519 suffer from key/data-dependant execution time? I mean, when implemented naively, yes, but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. From the article: > We also do our best to execute the algorithms in constant time, to thwart side-channel attacks that infer secret information from the durations of computations. https://github.com/awslabs/s2n-bignum (where most of the heavy lifting is done, per the article) further explicitly states that \"Each function is moreover written in a constant-time style to avoid timing side-channels.\"    reply            justinwsmith  1 day ago    | root | parent | next  [–]      The next paragraph makes a slightly stronger statement about its constant-time'ness: > Our implementations of x/Ed25519 are designed with constant time in mind. They perform exactly the same sequence of basic CPU instructions regardless of the input values, and they avoid any CPU instructions that might have data-dependent timing.    reply            deathanatos  1 day ago    | root | parent | prev  [–]      > but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. When I see CVE-fests like — https://people.redhat.com/~hkario/marvin/ — … I just do not come away with that impression. [Widely used] Cryptographic Rust crates offering \"constant time\" operations in \"pure Rust\" — but Rust has no primitives for doing constant time operations , so it's only through hopes and prayers that it might actually work, and with no guarantee anywhere that it actually should . (Other, less timing attack related stuff, but e.g., major companies still not supporting anything beyond RSA.)    reply              Guidelines | FAQ | Lists | API | Security | Legal | Apply to YC | Contact    Search:        Hacker News  new | past | comments | ask | show | jobs | submit   login          Better-performing “25519” elliptic-curve cryptography ( amazon.science )   212 points by lemaudit  1 day ago   | hide | past | favorite | 87 comments                         SEJeff  1 day ago    | next  [–]      The firedancer team at one of the better HFT firms wrote an AVX512 optimized implementation of ed25519 and X25519 that’s significantly faster than OpenSSL. https://github.com/firedancer-io/firedancer/pull/716 Ditto for sha256: https://github.com/firedancer-io/firedancer/pull/778 And sha512: https://github.com/firedancer-io/firedancer/pull/760 If you’re an optimization nerd, this codebase is wild.    reply            syzygyhack  1 day ago    | parent | next  [–]      I laughed a little at calling Firedancer contributors \"a team at a HFT firm\". Not that you are technically wrong, not at all, that's where Jump came from. It's just that this is all completely blockchain-driven optimization, but the b-word is so dirty now that we've gotta go back to using TradFi for the rep.    reply            SEJeff  1 day ago    | root | parent | next  [–]      It’s an optimization in hashing algorithms that is around twice as fast as the ones Amazon is posting in thus article for the same eliptic curves. If the Amazon improvements are hacker news worthy (they are) this seems reasonable contextually. Also, I worked for Jump for almost 12 years :)    reply            webXL  1 day ago    | root | parent | prev | next  [–]      What makes the “b-word” dirty?    reply            SEJeff  1 day ago    | root | parent | next  [–]      I didn’t use it because I didn’t find it relevant. They’re using hashing and EC algorithms and they’re improving them.    reply            jandrese  1 day ago    | root | parent | prev | next  [–]      It's hard to separate from the sea of grifters, con men, cranks, and scammers that infest the domain.  Just using the word is a yellow flag that you might be some kind of whacko, even if all you really want to talk about is the math. People have to forever be on guard that you might at any point pivot to all taxation is theft or how you have formed your own micro nation that consists entirely of yourself and thus have diplomatic immunity from all prosecution.  Because it happens.  Or maybe you have a once in a lifetime deal to buy this receipt like object for some hideous art that is guaranteed to appreciate in value millions of percent.  It's just the crowd that has aggregated around crypto currencies includes a lot of untrustworthy people.    reply            webXL  1 day ago    | root | parent | next  [–]      Why do people need to be on guard for those beliefs? People should be critical thinkers and not thought police. Granted, there are all kinds of whackos in crypto, but we should only be concerned about the immoral ones trying to scam us out of our money: SBF, Do-Kwon, and the like.    reply            sweeter  22 hours ago    | root | parent | next  [–]      people are legitimately buying farming land in the US and currently suing farmers for \"anti-trust\" for refusing to sell them their land so that they can quite literally create a crypto based sovereign micro-nation of wealthy tech VC's. [1] and I think that is a selfish, vile and delusional thing to do. It has nothing to do with \"thought police\" its as simple as looking at the impact of their actions and beliefs and making the decision to reject that way of thinking and way of life. 1: https://www.youtube.com/watch?v=PHlcAx-I0oY    reply            ShroudedNight  1 day ago    | root | parent | prev | next  [–]      The trough of disillusionment carved out by grifters burning the peat of enthusiasm unsustainably.    reply            nly  1 day ago    | parent | prev | next  [–]      A lot of slowness comes typically comes from wanting to avoid methods that enable side-channel timing attacks    reply            inopinatus  1 day ago    | parent | prev | next  [–]      I see they learned clang’s dirty little secret over intrinsics viz. that in producing the IR it deviates (sometimes dramatically when AVX-512 is concerned) from the documented opcodes and the results are inevitably detrimental.    reply            astrange  1 day ago    | root | parent | next  [–]      This is why ffmpeg uses assembly, and people get extremely mad when you say it's done for a reason, because they always want to come up with a fancier abstraction (usually cross-platform) which then defeats the purpose because it doesn't actually work. nb those abstractions do make sense when you can only afford to write a single implementation of the algorithm; then you're just talking about a high level programming language. But they frequently fail to achieve their goal when you're writing a second implementation for the sole purpose of being faster.    reply            electricshampo1  1 day ago    | parent | prev | next  [–]      Completely agree re: firedancer codebase. There is a level of thought and discipline wrt performance that I have never seen anywhere else.    reply            dhx  1 day ago    | root | parent | next  [–]      It's much more than just performance they've thought about. Here are some of the secure programming practices that have been implemented:  /* All the functions in this file are considered \"secure\", specifically:\n     - Constant time in the input, i.e. the input can be a secret[2]\n     - Small and auditable code base, incl. simple types\n     - Either, no local variables = no need to clear them before exit (most functions)\n     - Or, only static allocation + clear local variable before exit (fd_ed25519_scalar_mul_base_const_time)\n     - Clear registers via FD_FN_SENSITIVE[3]\n     - C safety\n  */ libsodium[4] implements similar mechanisms, and Linux kernel encryption code does too (example: use of kfree_sensitive)[5]. However, firedancer appears to better avoid moving secrets outside of CPU registers, and [3] explains that libraries such as libsodium have inadequate zeroisation, something which firedancer claims to improve upon. [1] https://github.com/firedancer-io/firedancer/blob/main/src/ba... [2] https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplic... [3] https://eprint.iacr.org/2023/1713 [4] https://libsodium.gitbook.io/doc/internals#security-first [5] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/lin...    reply            tptacek  1 day ago    | root | parent | next  [–]      These are table stakes for core cryptographic code, and SOT crypto code --- like the Amazon implementation this story is about --- tend at this point all to be derived from formal methods.    reply            dhx  1 day ago    | root | parent | next  [–]      As an example, the Amazon implementation doesn't refer to gcc's[1] and clang's[2] \"zero_call_used_regs\" to zeroise CPU registers upon return or exception of functions working on crypto secrets. OpenSSL doesn't either.[3] firedancer _does_ use \"zero_call_used_regs\" to allow gcc/clang to zeroise used CPU registers.[9] As another example, the Amazon implementation also doesn't refer to gcc's \"strub\" attribute which zeroises the function's stack upon return or exception of functions working on crypto secrets.[4][5] OpenSSL doesn't either.[3] firedancer _does_ use the \"strub\" attribute to allow gcc to zeroise the function's stack.[9] Is there a performance impact? [6] has the overhead at 0% for X25519 for implementing CPU register and stack zeroisation. Compiling the Linux kernel with \"CONFIG_ZERO_CALL_USED_REGS=1\" for x64_64 (impacting all kernel functions) was found to result in a 1-1.5% performance penalty.[7][8] [1] https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attribute... [2] https://clang.llvm.org/docs/AttributeReference.html#zero-cal... [3] https://github.com/openssl/openssl/discussions/24321 [4] https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Common-Type-At... [5] https://gcc.gnu.org/onlinedocs/gcc/Stack-Scrubbing.html [6] https://eprint.iacr.org/2023/1713.pdf [7] https://www.phoronix.com/review/zero-used-regs/5 [8] https://lore.kernel.org/lkml/20210505191804.4015873-1-keesco... [9] FD_FN_UNSANITIZED: https://github.com/firedancer-io/firedancer/blob/master/src/...    reply            jandrese  1 day ago    | root | parent | next  [–]      Zeroizing a register seems pretty straightforward.  Zeroizing any cache that it may have touched seems a lot more complex.  I guess that's why they work so hard to keep everything in registers.  Lucky for them we aren't in the x86 era anymore and there are a useful number of registers.  I'll need to read up on how they avoid context switches while their registers are loaded.    reply            SEJeff  1 day ago    | root | parent | prev | next  [–]      That team is full of world experts in high performance computing.    reply            pantalaimon  1 day ago    | parent | prev | next  [–]      That looks really neat, but I still don't understand what firedancer actually is - what is a validator client for Solana and why does it need it's own crypto library?    reply            SEJeff  1 day ago    | root | parent | next  [–]      It’s a new from scratch implementation of a validator for Solana the fastest blockchain by several orders of magnitude. The slowest part is signature verification so they sped up hashing to improve performance of the entire system. They follow a first principles approach (the lead has a few physics degrees) and opted to speed up the cryptography. The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. It’s a win in cryptography, much like this Amazon post is, except it’s slower than the firedancer implementation.    reply            scrlk  1 day ago    | root | parent | next  [–]      Off topic - is Firedancer going to survive Jump winding down its crypto arm? Kanav left, they liquidated a huge staked ETH position a few months ago (+ a bunch of other coins), and the SEC/CFTC is all over them for the Terra Luna fiasco.    reply            SEJeff  1 day ago    | root | parent | next  [–]      Rumors of Jump’s demise are greatly exaggerated. Check the torrent of firedancer talks at Solana Breakpoint literally next week and decide yourself. Folks have said jump is gonna die for 20+ years. They’ve been around 30ish…    reply            sangnoir  1 day ago    | root | parent | next  [–]      Parent asked a specific question about the survival of Firedancer and winding down of the crypto arm though. No demise of Jump mentioned.    reply            SEJeff  1 day ago    | root | parent | next  [–]      You will see a half dozen or so talks about firedancer and probably 35-40 or so of us total (I’m at the company that does security for firedancer, Asymmetric Research. We were founded by former jumpers). You can make the determination on your own, but there will be an obvious large showing of firedancer folks and some exciting updates for the project.    reply            caned  1 day ago    | root | parent | prev | next  [–]      > The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. For users that have AVX-512, which isn't widely available (AMD Zen 4 / Zen 5, Sapphire Rapids)...    reply            SEJeff  1 day ago    | root | parent | next  [–]      Sure, and cpus supporting it will proliferate. Shockingly to no one reading hacker news... Both software and hardware continue to improve with time generally speaking. This was a huge software improvement on hardware that supports that functionality. It is a huge win for anyone wanting to use these algorithms where they can afford hardware that supports it. We should celebrate Amazon's improvements and we should celebrate these improvements. Both are great for the future of technology, regardless of why they were initially developed. Improving tech and keeping it open source is good for all.    reply            4gotunameagain  1 day ago    | parent | prev | next  [–]      So many manhours spent on finding better ways to shovel around money and pocket what falls from the cracks. What a wasteful and unproductive enterprise, considering the vast majority of the devised improvements never see the public eye. Still, impressive work. Imagine if those brilliant minds behind this were focused somewhere else.    reply            posnet  1 day ago    | root | parent | next  [–]      The greatest minds of our generation spend their time thinking about how to: - make people click on ads - make trading algos faster - replace human artists - build more efficient killing machines - destroy any remaining concept of privacy    reply            geodel  23 hours ago    | root | parent | next  [–]      Greatest mind of previous generation made nuclear bombs and other deadly things.    reply            astrange  1 day ago    | root | parent | prev | next  [–]      Aren't the greatest mind(s) of our generation writing Terry Tao's blog posts?    reply            vladms  1 day ago    | root | parent | prev | next  [–]      This directly implies that all the people that did useful stuff (improving cancer survivability, new vaccines, renewable energy, and others) are all \"below\" the \"greatest minds of our generation\". Not to mention it also suggests there is a way to \"compare\" minds. I would not choose myself to do somethings, but that does not mean I despise automatically people choosing to.    reply            geodel  23 hours ago    | root | parent | next  [–]      I think they meant greatest minds have to be greatest money earners also. Else they are not greatest minds.    reply            4gotunameagain  1 day ago    | root | parent | prev | next  [–]      Hey, at least we had one of them working on TempleOS.    reply            toast0  1 day ago    | root | parent | prev | next  [–]      It doesn't seem wasteful and unproductive, given that the result of the HFT industry is smaller bid/ask spreads (lowering costs for all trades) and payment for order flow which is the mechanism that eliminated retail commissions and provides price improvement on many retail trades. And even so, HFT firms are making money. It might not seem like real work, but making money by reducing costs of market participants sounds like a good thing. I admit though, block trades might be harder now than before the rise of HFT. If you could do warehousing/distributing/coordinating fresh foods in a way that reduced the difference in price between the farmer and the consumer and make money doing it, that would clearly be good work.    reply            appendix-rock  1 day ago    | root | parent | prev | next  [–]      What do you work on?    reply            almostgotcaught  1 day ago    | root | parent | prev | next  [–]      I'll never be able to figure out what people get from repeating the same thing over and over. I've seen this same exact comment 1000 times on hn and I'm 100% sure you have too (indeed I believe the reason you repeat is because you've seen it and agree with it).    reply            XorNot  1 day ago    | root | parent | next  [–]      It's virtue signalling.    reply            slt2021  1 day ago    | parent | prev | next  [–]      wow amazing, nobody is gonna edit that code ever again...    reply            notfed  1 day ago    | prev | next  [–]      > The x25519 algorithm also plays a role in post-quantum safe cryptographic solutions, having been included as the classical algorithm in the TLS 1.3 and SSH hybrid scheme specifications for post-quantum key agreement. Really though? This mostly-untrue statement is the line that warrants adding hashtag #post-quantum-cryptography to the blogpost?    reply            westurner  1 day ago    | parent | next  [–]      Actually, e.g. rustls added X25519Kyber768Draft00 support this year: https://news.ycombinator.com/item?id=41534500 /?q X25519Kyber768Draft00: https://www.google.com/search?q=X25519Kyber768Draft00    reply            notfed  1 day ago    | root | parent | next  [–]      Kyber768 is the post-quantum algorithm in that example, not x25519.    reply            westurner  1 day ago    | root | parent | next  [–]      From \"OpenSSL 3.4 Alpha 1 Released with New Features\" (8 days ago) https://news.ycombinator.com/item?id=41456447#41456774 : > Someday there will probably be a TLS1.4/2.0 with PQ, and also FIPS-140 -4? > Are there additional ways to implement NIST PQ finalist algos with openssl? - open-quantum-safe/oqs-provider [implements mlkem512 through mlkem1024 and x25519_mlkem768]    reply            notfed  7 hours ago    | root | parent | next  [–]      Not sure what you're trying to say here . x25519 is objectively not PQC and never claimed to be, and this isn't debatable.    reply            westurner  6 hours ago    | root | parent | next  [–]      In this case, hybrid means \"not entirely PQ\".    reply            nanolith  1 day ago    | prev | next  [–]      The formal methods nerd in me is happy to see HOL Light being used to formally verify this implementation. I'm curious to see how closely their abstract machine models follow specific machine implementations. OOO, speculation, and deep pipelining have non-trivial impacts on potential side channels, and these vary quite a bit by stepping and architecture.    reply            holowoodman  1 day ago    | parent | next  [–]      Even worse: Each new CPU generation will need a new machine model and a reevaluation. Because OOO, speculation and all the timing behaviour are non-functional properties that frequently change due to new optimizations, different internal structuring, etc.    reply            aseipp  1 day ago    | prev | next  [–]      I was aware of s2n-bignum which is a very cool project, but apparently there is a larger sister project, aws-lc, that aims for broader set of APIs including OpenSSL compatibility, while retaining the general approach and vibe (lots of formal verification + performance work): https://github.com/aws/aws-lc That's pretty sweet. I'm currently using BoringSSL in a project as a supplement to OpenSSL (mostly because it is much easier to build for Windows users than requiring them to fiddle with msys2/vcpkg etc; the alternative is to rely on the Windows CNG API, but it lacks features like ed25519 support.) I wonder how much effort it would take to use aws-lc instead... Not that I'm that interested, BSSL is pretty good, but free performance and heavy automated verification is always nice :) Related: one of the authors of this post, John Harrison, wrote a really good book about automated theorm proving about 15 years ago while working on floating point verification at Intel -- there's still no other book quite like this one, I think https://www.cl.cam.ac.uk/~jrh13/    reply            newman314  1 day ago    | parent | next  [–]      Upon hearing about AWS-LC, I immediately thought about tying it to nginx to see if it will work. Turns out someone else has already tried: https://github.com/aws/aws-lc/issues/1827    reply            saghm  1 day ago    | prev | next  [–]      My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. At times I've run into places that require me to use RSA keys though (ironically, I seem to remember first experiencing this with AWS years back, although I honestly can't recall if this is still the case or not). If this further improvement becomes widely used, it would be interesting to see if it's enough to tip the scales towards ed25519 being more of the de facto \"default\" ssh key algorithm. My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that.    reply            scrapheap  1 day ago    | parent | next  [–]      > My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that. I wouldn't be surprised if a lot of people still use RSA for SSH keys for one or more of the following reasons: 1. A lot of tutorials about generating SSH Keys were written before ed25519, so if they follow an old tutorial they'll probably be generating an RSA key. 2. Older versions of OpenSSH, that you'd find on CentOS 7 and below, would default to RSA if you didn't specify a key type when running ssh-keygen. 3. There are some systems out there that don't support ed25519, though they are becoming rarer.  If you have to deal with those systems then you're forced to use RSA (at least for that system). 4. Some of us have been using SSH keys from way before OpenSSH add support for ed25519 keys in 2014, so any long lived SSH keys won't be ed25519 keys (wow, ed25519 has now been about in OpenSSH for over 10 years).    reply            miki123211  1 day ago    | root | parent | next  [–]      5. a lot of people (especially older people I suspect) think \"RSA\" when they hear \"public key cryptography\". I'm in my twenties and still have that reaction. I know elliptic curves exist, I even sort-of-kind-of have an awareness of how they work, but if I was asked to name one cryptosystem that used public and private keys, I'd definitely say RSA first and not elliptic curves.    reply            vitus  1 day ago    | root | parent | next  [–]      This is likely in no small part due to CS education only really teaching the mechanics of RSA (modular arithmetic, Fermat's little theorem, etc), or at least, that still seems to be the case at Berkeley. I'd guess because elliptic curve crypto requires more advanced math to reason about (more advanced group theory, at least) and doesn't map as cleanly to existing concepts that non-math-major undergrads have. cryptopals.com also doesn't cover any elliptive curve crypto until you get into the last set.    reply            tptacek  1 day ago    | root | parent | next  [–]      We didn't even cover RSA until the original last set. It's a build-up. :)    reply            throw0101b  1 day ago    | root | parent | prev | next  [–]      I would think that the (non-EC) Diffie-Hellman would also be easy enough to teach as well: exponentials and discrete log problem aren't any/much complicated than explaining factorization.    reply            pantalaimon  1 day ago    | root | parent | prev | next  [–]      > 3. There are some systems out there that don't support ed25519, though they are becoming rarer. If you have to deal with those systems then you're forced to use RSA (at least for that system). Azure Devops is a big one.    reply            Spooky23  1 day ago    | root | parent | prev | next  [–]      If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519.    reply            vitus  1 day ago    | root | parent | next  [–]      > If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519. Not even when FIPS 140-3 was (finally) finalized in 2019, and testing began in 2020? https://csrc.nist.gov/projects/cryptographic-module-validati... includes mentions of EdDSA, and Curve25519 is listed among the \"Recommended Curves for U.S. Federal Government Use\" on page 15 of https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.S... . (I guess the problem is that various crypto implementations need to get recertified under the new standard...) edit: it looks like AWS-LC [0] and boringcrypto [1] have both been validated under FIPS 140-3. Azure's OpenSSL crypto [2] has only been validated under FIPS 140-2 as far as I can tell. [0] https://csrc.nist.gov/projects/cryptographic-module-validati... [1] https://csrc.nist.gov/projects/cryptographic-module-validati... [2] https://csrc.nist.gov/projects/cryptographic-module-validati...    reply            devman0  1 day ago    | root | parent | prev | next  [–]      ed25519 is in FIPS 186-5 which meets criteria (a) for Approved Security Functions in FIPS 140-2.    reply            loudmax  1 day ago    | root | parent | prev | next  [–]      When I run `ssh-keygen`, I can remember the options `-t rsa` or `-t dsa`.  I simply cannot remember the flag `-t ed25519`.  I have to look it up every time. I just remember the flag as being vaguely similar the name of the monster robot from RoboCop.    reply            homebrewer  1 day ago    | root | parent | next  [–]      Use shell autocomplete. Even `bash-completion` suggests arguments for the key type these days:  $ ssh-keygen -t <TAB>\n  dsa   ecdsa   ecdsa-sk   ed25519   ed25519-sk  rsa `-sk` is short for \"security key\" if memory serves me right, and is used with FIDO2 hardware tokens.    reply            throw0101b  1 day ago    | root | parent | prev | next  [–]      > When I run `ssh-keygen` As of OpenSSH 9.5 the default has changed, so you don't have to specify anything:  * ssh-keygen(1): generate Ed25519 keys by default. Ed25519 public keys\n     are very convenient due to their small size. Ed25519 keys are\n     specified in RFC 8709 and OpenSSH has supported them since version 6.5\n     (January 2014). * https://www.openssh.com/txt/release-9.5    reply            saghm  1 day ago    | root | parent | next  [–]      Oh wow, I didn't know that one! I still manually type `-t ed25519` from muscle memory, I guess I don't have to now    reply            toast0  1 day ago    | parent | prev | next  [–]      > My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though.    reply            saghm  1 day ago    | root | parent | next  [–]      > My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though. Interesting! I wonder if this new algorithm is intended to help with that. I'm super curious if the smaller payload does indeed make a difference (with the current algorithm) like you mention; I know that with databases and filesystems, compression is commonly used to shift the balance from I/O to CPU due to disk writes being slow (with reduced storage size being a side benefit but not usually the main motivation), but I also know that cryptographic verification being too slow can be an anti-feature if it makes brute forcing feasible, so the amount of CPU work needed might be pretty high still.    reply            toast0  23 hours ago    | root | parent | next  [–]      On my ancient box, only including a few lines of output:  $ openssl speed rsa ecdsa\n\n                     sign    verify    sign/s verify/s\n   rsa 1024 bits 0.000117s 0.000008s   8518.7 132449.2\n   rsa 2048 bits 0.000884s 0.000025s   1130.6  39499.3\n\n                                 sign    verify    sign/s verify/s\n    256 bits ecdsa (nistp256)   0.0000s   0.0001s  33210.9  11483.0\n    384 bits ecdsa (nistp384)   0.0009s   0.0008s   1070.6   1268.9 It's 11 k verify/s for ecda vs 39k verify/s for rsa-2048. A TLS handshake needs at least one sign and verify from the server cert, plus some verifies for the signature on the cert chain (but those signatures are used over and over).    reply            stouset  1 day ago    | parent | prev | next  [–]      > anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519 That’s not really anecdotal. Generating an ed25519 key is barely more than generating a random 256-bit value. Generating an RSA key is significantly more work.    reply            saghm  1 day ago    | root | parent | next  [–]      I did say my understanding was probably naive; I didn't know the details to be able to assert anything beyond my own observation!    reply            stouset  1 day ago    | root | parent | next  [–]      Yep, not faulting you at all! I too was surprised when I found out that it’s a straight 256-bit random value with a few bits masked.    reply            saghm  1 day ago    | root | parent | next  [–]      I pretty quickly realized in college when learning about this stuff that the math was well over my head, and I shifted my focus more to understanding how to properly use cryptography rather than implement it (which turned out to be more important as a software engineer anyhow). In retrospect, I really appreciate how the professor I had in a security-focused course explicitly told us it was okay if we didn't understand the math and wouldn't be tested on it when going over how it worked.    reply            tptacek  1 day ago    | root | parent | next  [–]      Counterpoint: it's not OK to skip the math with cryptography. You may not need to power through all of Silverman's curve book (though: I don't know for sure that's true, which is why I don't call myself a cryptography engineer), but you have to get as deep into the math as you can in order to safely use cryptographic algorithms. If you're math-avoidant, stick with high-level abstractions like NaCL and TLS. There's nothing wrong with that! A professor talking about and demonstrating cryptography at the level of individual algorithms is doing their class a disservice if they say \"none of the math will be on the test\". The algorithms are enough to put something together that seems like it works; the math is what you need to find out if your resulting system actually does work. It's where many of the fun bug classes live.    reply            saghm  1 day ago    | root | parent | next  [–]      I'm not sure if you're reading more into what I said than I intended, but I'm not convinced by this argument. You might have missed that this course was on security in general, not cryptography; not everything in the course was cryptographic related. That said, I'd argue that for the vast majority of software engineers the type of stuff they're dealing with can be dealt with without needing to know the math. For example, you don't need to understand the math to behind the algorithms to know that bcrypt is a reasonable password hashing algorithm and that sha1 and md5 are not, or that salts are used to mitigate issues when users reuse passwords. These are principles that you can understand at a high level without fully understanding the underlying details. If anything, I think that overemphasis on requiring people to learn and understand the math has the effect of over-focusing on simpler algorithms that aren't actually what people want to be using in practice due to the fact that they're easier to teach and often foundational in conveying concepts that would need to be learned to understand the more complicated algorithms. If using cryptographic algorithms directly requires knowing the math, then I'd agree that most people shouldn't be using them directly, but I'd go further and say that a lack of libraries that are safe for people to use for software engineering without understanding the implementation is a failing of the ecosystem; as much as \"regular\" software engineering people (like myself!) can struggle with the math behind cryptography, I think that a lot of people developing cryptographic libraries struggle with building reasonable abstractions and making user-friendly APIs (which is a skill I think in general is not emphasized enough for most software engineers, to the detriment of everyone).    reply            tptacek  1 day ago    | root | parent | next  [–]      Sure. It's a failing of the ecosystem. That observation, a cup of coffee, and 1-3 years will get you a Kenny Paterson paper stunt-breaking your system. I feel where you're coming from, but, respectfully: it does not matter. My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry.    reply            saghm  1 day ago    | root | parent | next  [–]      > My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry. I'm not sure I understand what you mean here by \"something else in our industry\". Are you arguing that I'm not qualified to be a software engineer due to not understanding the math behind elliptic curves, or did you miss my repeated use of phrases like \"the vast majority of software engineers\" rather than some specialty where cryptography implementation details details are more important? If the latter, I can reassure you that I don't work in cryptography, work on any cryptographic libraries, or have any specific responsibilities related to security beyond the general idea that all software being written should be secure. If the former, I'll have to respectfully disagree, and suggest that maybe even if you aren't willing to consider that you're wrong about the math being a hard requirement for someone being qualified as a software engineer, it's worth considering that you almost certainly don't have enough information to conclude whether a stranger on the internet is qualified based on reading some of their comments.    reply            tptacek  3 hours ago    | root | parent | next  [–]      I'm certainly not saying you're not qualified to be a software engineer.    reply            syncsynchalt  1 day ago    | root | parent | prev | next  [–]      Learning X25519 isn't too hard!  See https://curves.xargs.org for the basics and https://x25519.xargs.org for some refining details.    reply            upofadown  1 day ago    | parent | prev | next  [–]      Another article from the same blog about optimizing RSA: * https://www.amazon.science/blog/formal-verification-makes-rs... RSA signature verification is already very fast and TLS doesn't use RSA for encryption anymore so the problem reduces to optimizing signing operations.    reply            fefe23  1 day ago    | prev | next  [–]      Holy shit these claims are wild!\nIt's not just a percent more performance here and there, the graphs look more like 50% more throughput on the same hardware (depending on the cpu architecture). My immediate fear was that they optimized away the security features like absence of timing side channels, but they say they still have those. They also claim to have formal proof of correctness, which is even more amazing, because they are not doing it on a symbolic level but on a machine instruction level. Apparently they tought their reasoning system the semantics of all the CPU instructions used in the assembler implementation. I'll still wait what djb has to say about this, but it looks freaking amazing to me.    reply            jonmon6691  1 day ago    | prev | next  [–]      I'm assuming when they say that this improves user experience, that it implies the use case is primarily TLS. In which case store-now-decrypt-later attacks are already considered an urgent threat with regard to post quantum crypto. With FIPS 203 being released and Chrome is already using an implementation based on the draft standard, this seems like this algo (at least for TLS) should be on its way out.    reply            dlgeek  1 day ago    | parent | next  [–]      The industry is moving to a hybrid that mixes classic crypto (including ECC) with post-quantum crypto. AWS has even turned this on in some places - https://aws.amazon.com/about-aws/whats-new/2022/03/aws-kms-a... from 2022 and https://docs.aws.amazon.com/kms/latest/developerguide/pqtls.... for some details.    reply            jonmon6691  1 day ago    | root | parent | next  [–]      Thanks I forgot about that. So if understand it right, the idea is to provide some insurance in the case that these relatively young algorithms are broken as they get exposed to more and more cryptanalysis    reply            adgjlsfhk1  1 day ago    | parent | prev | next  [–]      No one other than NIST is recommending phasing out pre-quantum crypto. Everyone else is using a combination of pre-quantum and post-quantum because trust in the security and robustness of the post-quantum ecosystem is fairly low.    reply            webXL  1 day ago    | prev | next  [–]      Why don't they just focus on making a Gravitron variant with those algorithms in the circuitry?    reply            londons_explore  1 day ago    | prev  [–]      Does 25519 suffer from key/data-dependant execution time? Is this implementation resistant to that? If it isn't, it's kinda a footgun which shouldn't be published for general use.    reply            syncsynchalt  1 day ago    | parent | next  [–]      Curve25519 is designed to be resistant to timing attacks, such as clamping the 254th bit in x25519 keys to 1 so that implementors can not optimize away a multiplication round. That doesn't mean that this implementation doesn't have timing attacks, but the implementors claim they chose mechanisms which should be constant-time.    reply            vitus  1 day ago    | parent | prev  [–]      > Does 25519 suffer from key/data-dependant execution time? I mean, when implemented naively, yes, but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. From the article: > We also do our best to execute the algorithms in constant time, to thwart side-channel attacks that infer secret information from the durations of computations. https://github.com/awslabs/s2n-bignum (where most of the heavy lifting is done, per the article) further explicitly states that \"Each function is moreover written in a constant-time style to avoid timing side-channels.\"    reply            justinwsmith  1 day ago    | root | parent | next  [–]      The next paragraph makes a slightly stronger statement about its constant-time'ness: > Our implementations of x/Ed25519 are designed with constant time in mind. They perform exactly the same sequence of basic CPU instructions regardless of the input values, and they avoid any CPU instructions that might have data-dependent timing.    reply            deathanatos  1 day ago    | root | parent | prev  [–]      > but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. When I see CVE-fests like — https://people.redhat.com/~hkario/marvin/ — … I just do not come away with that impression. [Widely used] Cryptographic Rust crates offering \"constant time\" operations in \"pure Rust\" — but Rust has no primitives for doing constant time operations , so it's only through hopes and prayers that it might actually work, and with no guarantee anywhere that it actually should . (Other, less timing attack related stuff, but e.g., major companies still not supporting anything beyond RSA.)    reply              Guidelines | FAQ | Lists | API | Security | Legal | Apply to YC | Contact    Search:      Hacker News  new | past | comments | ask | show | jobs | submit   login          Better-performing “25519” elliptic-curve cryptography ( amazon.science )   212 points by lemaudit  1 day ago   | hide | past | favorite | 87 comments                         SEJeff  1 day ago    | next  [–]      The firedancer team at one of the better HFT firms wrote an AVX512 optimized implementation of ed25519 and X25519 that’s significantly faster than OpenSSL. https://github.com/firedancer-io/firedancer/pull/716 Ditto for sha256: https://github.com/firedancer-io/firedancer/pull/778 And sha512: https://github.com/firedancer-io/firedancer/pull/760 If you’re an optimization nerd, this codebase is wild.    reply            syzygyhack  1 day ago    | parent | next  [–]      I laughed a little at calling Firedancer contributors \"a team at a HFT firm\". Not that you are technically wrong, not at all, that's where Jump came from. It's just that this is all completely blockchain-driven optimization, but the b-word is so dirty now that we've gotta go back to using TradFi for the rep.    reply            SEJeff  1 day ago    | root | parent | next  [–]      It’s an optimization in hashing algorithms that is around twice as fast as the ones Amazon is posting in thus article for the same eliptic curves. If the Amazon improvements are hacker news worthy (they are) this seems reasonable contextually. Also, I worked for Jump for almost 12 years :)    reply            webXL  1 day ago    | root | parent | prev | next  [–]      What makes the “b-word” dirty?    reply            SEJeff  1 day ago    | root | parent | next  [–]      I didn’t use it because I didn’t find it relevant. They’re using hashing and EC algorithms and they’re improving them.    reply            jandrese  1 day ago    | root | parent | prev | next  [–]      It's hard to separate from the sea of grifters, con men, cranks, and scammers that infest the domain.  Just using the word is a yellow flag that you might be some kind of whacko, even if all you really want to talk about is the math. People have to forever be on guard that you might at any point pivot to all taxation is theft or how you have formed your own micro nation that consists entirely of yourself and thus have diplomatic immunity from all prosecution.  Because it happens.  Or maybe you have a once in a lifetime deal to buy this receipt like object for some hideous art that is guaranteed to appreciate in value millions of percent.  It's just the crowd that has aggregated around crypto currencies includes a lot of untrustworthy people.    reply            webXL  1 day ago    | root | parent | next  [–]      Why do people need to be on guard for those beliefs? People should be critical thinkers and not thought police. Granted, there are all kinds of whackos in crypto, but we should only be concerned about the immoral ones trying to scam us out of our money: SBF, Do-Kwon, and the like.    reply            sweeter  22 hours ago    | root | parent | next  [–]      people are legitimately buying farming land in the US and currently suing farmers for \"anti-trust\" for refusing to sell them their land so that they can quite literally create a crypto based sovereign micro-nation of wealthy tech VC's. [1] and I think that is a selfish, vile and delusional thing to do. It has nothing to do with \"thought police\" its as simple as looking at the impact of their actions and beliefs and making the decision to reject that way of thinking and way of life. 1: https://www.youtube.com/watch?v=PHlcAx-I0oY    reply            ShroudedNight  1 day ago    | root | parent | prev | next  [–]      The trough of disillusionment carved out by grifters burning the peat of enthusiasm unsustainably.    reply            nly  1 day ago    | parent | prev | next  [–]      A lot of slowness comes typically comes from wanting to avoid methods that enable side-channel timing attacks    reply            inopinatus  1 day ago    | parent | prev | next  [–]      I see they learned clang’s dirty little secret over intrinsics viz. that in producing the IR it deviates (sometimes dramatically when AVX-512 is concerned) from the documented opcodes and the results are inevitably detrimental.    reply            astrange  1 day ago    | root | parent | next  [–]      This is why ffmpeg uses assembly, and people get extremely mad when you say it's done for a reason, because they always want to come up with a fancier abstraction (usually cross-platform) which then defeats the purpose because it doesn't actually work. nb those abstractions do make sense when you can only afford to write a single implementation of the algorithm; then you're just talking about a high level programming language. But they frequently fail to achieve their goal when you're writing a second implementation for the sole purpose of being faster.    reply            electricshampo1  1 day ago    | parent | prev | next  [–]      Completely agree re: firedancer codebase. There is a level of thought and discipline wrt performance that I have never seen anywhere else.    reply            dhx  1 day ago    | root | parent | next  [–]      It's much more than just performance they've thought about. Here are some of the secure programming practices that have been implemented:  /* All the functions in this file are considered \"secure\", specifically:\n     - Constant time in the input, i.e. the input can be a secret[2]\n     - Small and auditable code base, incl. simple types\n     - Either, no local variables = no need to clear them before exit (most functions)\n     - Or, only static allocation + clear local variable before exit (fd_ed25519_scalar_mul_base_const_time)\n     - Clear registers via FD_FN_SENSITIVE[3]\n     - C safety\n  */ libsodium[4] implements similar mechanisms, and Linux kernel encryption code does too (example: use of kfree_sensitive)[5]. However, firedancer appears to better avoid moving secrets outside of CPU registers, and [3] explains that libraries such as libsodium have inadequate zeroisation, something which firedancer claims to improve upon. [1] https://github.com/firedancer-io/firedancer/blob/main/src/ba... [2] https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplic... [3] https://eprint.iacr.org/2023/1713 [4] https://libsodium.gitbook.io/doc/internals#security-first [5] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/lin...    reply            tptacek  1 day ago    | root | parent | next  [–]      These are table stakes for core cryptographic code, and SOT crypto code --- like the Amazon implementation this story is about --- tend at this point all to be derived from formal methods.    reply            dhx  1 day ago    | root | parent | next  [–]      As an example, the Amazon implementation doesn't refer to gcc's[1] and clang's[2] \"zero_call_used_regs\" to zeroise CPU registers upon return or exception of functions working on crypto secrets. OpenSSL doesn't either.[3] firedancer _does_ use \"zero_call_used_regs\" to allow gcc/clang to zeroise used CPU registers.[9] As another example, the Amazon implementation also doesn't refer to gcc's \"strub\" attribute which zeroises the function's stack upon return or exception of functions working on crypto secrets.[4][5] OpenSSL doesn't either.[3] firedancer _does_ use the \"strub\" attribute to allow gcc to zeroise the function's stack.[9] Is there a performance impact? [6] has the overhead at 0% for X25519 for implementing CPU register and stack zeroisation. Compiling the Linux kernel with \"CONFIG_ZERO_CALL_USED_REGS=1\" for x64_64 (impacting all kernel functions) was found to result in a 1-1.5% performance penalty.[7][8] [1] https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attribute... [2] https://clang.llvm.org/docs/AttributeReference.html#zero-cal... [3] https://github.com/openssl/openssl/discussions/24321 [4] https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Common-Type-At... [5] https://gcc.gnu.org/onlinedocs/gcc/Stack-Scrubbing.html [6] https://eprint.iacr.org/2023/1713.pdf [7] https://www.phoronix.com/review/zero-used-regs/5 [8] https://lore.kernel.org/lkml/20210505191804.4015873-1-keesco... [9] FD_FN_UNSANITIZED: https://github.com/firedancer-io/firedancer/blob/master/src/...    reply            jandrese  1 day ago    | root | parent | next  [–]      Zeroizing a register seems pretty straightforward.  Zeroizing any cache that it may have touched seems a lot more complex.  I guess that's why they work so hard to keep everything in registers.  Lucky for them we aren't in the x86 era anymore and there are a useful number of registers.  I'll need to read up on how they avoid context switches while their registers are loaded.    reply            SEJeff  1 day ago    | root | parent | prev | next  [–]      That team is full of world experts in high performance computing.    reply            pantalaimon  1 day ago    | parent | prev | next  [–]      That looks really neat, but I still don't understand what firedancer actually is - what is a validator client for Solana and why does it need it's own crypto library?    reply            SEJeff  1 day ago    | root | parent | next  [–]      It’s a new from scratch implementation of a validator for Solana the fastest blockchain by several orders of magnitude. The slowest part is signature verification so they sped up hashing to improve performance of the entire system. They follow a first principles approach (the lead has a few physics degrees) and opted to speed up the cryptography. The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. It’s a win in cryptography, much like this Amazon post is, except it’s slower than the firedancer implementation.    reply            scrlk  1 day ago    | root | parent | next  [–]      Off topic - is Firedancer going to survive Jump winding down its crypto arm? Kanav left, they liquidated a huge staked ETH position a few months ago (+ a bunch of other coins), and the SEC/CFTC is all over them for the Terra Luna fiasco.    reply            SEJeff  1 day ago    | root | parent | next  [–]      Rumors of Jump’s demise are greatly exaggerated. Check the torrent of firedancer talks at Solana Breakpoint literally next week and decide yourself. Folks have said jump is gonna die for 20+ years. They’ve been around 30ish…    reply            sangnoir  1 day ago    | root | parent | next  [–]      Parent asked a specific question about the survival of Firedancer and winding down of the crypto arm though. No demise of Jump mentioned.    reply            SEJeff  1 day ago    | root | parent | next  [–]      You will see a half dozen or so talks about firedancer and probably 35-40 or so of us total (I’m at the company that does security for firedancer, Asymmetric Research. We were founded by former jumpers). You can make the determination on your own, but there will be an obvious large showing of firedancer folks and some exciting updates for the project.    reply            caned  1 day ago    | root | parent | prev | next  [–]      > The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. For users that have AVX-512, which isn't widely available (AMD Zen 4 / Zen 5, Sapphire Rapids)...    reply            SEJeff  1 day ago    | root | parent | next  [–]      Sure, and cpus supporting it will proliferate. Shockingly to no one reading hacker news... Both software and hardware continue to improve with time generally speaking. This was a huge software improvement on hardware that supports that functionality. It is a huge win for anyone wanting to use these algorithms where they can afford hardware that supports it. We should celebrate Amazon's improvements and we should celebrate these improvements. Both are great for the future of technology, regardless of why they were initially developed. Improving tech and keeping it open source is good for all.    reply            4gotunameagain  1 day ago    | parent | prev | next  [–]      So many manhours spent on finding better ways to shovel around money and pocket what falls from the cracks. What a wasteful and unproductive enterprise, considering the vast majority of the devised improvements never see the public eye. Still, impressive work. Imagine if those brilliant minds behind this were focused somewhere else.    reply            posnet  1 day ago    | root | parent | next  [–]      The greatest minds of our generation spend their time thinking about how to: - make people click on ads - make trading algos faster - replace human artists - build more efficient killing machines - destroy any remaining concept of privacy    reply            geodel  23 hours ago    | root | parent | next  [–]      Greatest mind of previous generation made nuclear bombs and other deadly things.    reply            astrange  1 day ago    | root | parent | prev | next  [–]      Aren't the greatest mind(s) of our generation writing Terry Tao's blog posts?    reply            vladms  1 day ago    | root | parent | prev | next  [–]      This directly implies that all the people that did useful stuff (improving cancer survivability, new vaccines, renewable energy, and others) are all \"below\" the \"greatest minds of our generation\". Not to mention it also suggests there is a way to \"compare\" minds. I would not choose myself to do somethings, but that does not mean I despise automatically people choosing to.    reply            geodel  23 hours ago    | root | parent | next  [–]      I think they meant greatest minds have to be greatest money earners also. Else they are not greatest minds.    reply            4gotunameagain  1 day ago    | root | parent | prev | next  [–]      Hey, at least we had one of them working on TempleOS.    reply            toast0  1 day ago    | root | parent | prev | next  [–]      It doesn't seem wasteful and unproductive, given that the result of the HFT industry is smaller bid/ask spreads (lowering costs for all trades) and payment for order flow which is the mechanism that eliminated retail commissions and provides price improvement on many retail trades. And even so, HFT firms are making money. It might not seem like real work, but making money by reducing costs of market participants sounds like a good thing. I admit though, block trades might be harder now than before the rise of HFT. If you could do warehousing/distributing/coordinating fresh foods in a way that reduced the difference in price between the farmer and the consumer and make money doing it, that would clearly be good work.    reply            appendix-rock  1 day ago    | root | parent | prev | next  [–]      What do you work on?    reply            almostgotcaught  1 day ago    | root | parent | prev | next  [–]      I'll never be able to figure out what people get from repeating the same thing over and over. I've seen this same exact comment 1000 times on hn and I'm 100% sure you have too (indeed I believe the reason you repeat is because you've seen it and agree with it).    reply            XorNot  1 day ago    | root | parent | next  [–]      It's virtue signalling.    reply            slt2021  1 day ago    | parent | prev | next  [–]      wow amazing, nobody is gonna edit that code ever again...    reply            notfed  1 day ago    | prev | next  [–]      > The x25519 algorithm also plays a role in post-quantum safe cryptographic solutions, having been included as the classical algorithm in the TLS 1.3 and SSH hybrid scheme specifications for post-quantum key agreement. Really though? This mostly-untrue statement is the line that warrants adding hashtag #post-quantum-cryptography to the blogpost?    reply            westurner  1 day ago    | parent | next  [–]      Actually, e.g. rustls added X25519Kyber768Draft00 support this year: https://news.ycombinator.com/item?id=41534500 /?q X25519Kyber768Draft00: https://www.google.com/search?q=X25519Kyber768Draft00    reply            notfed  1 day ago    | root | parent | next  [–]      Kyber768 is the post-quantum algorithm in that example, not x25519.    reply            westurner  1 day ago    | root | parent | next  [–]      From \"OpenSSL 3.4 Alpha 1 Released with New Features\" (8 days ago) https://news.ycombinator.com/item?id=41456447#41456774 : > Someday there will probably be a TLS1.4/2.0 with PQ, and also FIPS-140 -4? > Are there additional ways to implement NIST PQ finalist algos with openssl? - open-quantum-safe/oqs-provider [implements mlkem512 through mlkem1024 and x25519_mlkem768]    reply            notfed  7 hours ago    | root | parent | next  [–]      Not sure what you're trying to say here . x25519 is objectively not PQC and never claimed to be, and this isn't debatable.    reply            westurner  6 hours ago    | root | parent | next  [–]      In this case, hybrid means \"not entirely PQ\".    reply            nanolith  1 day ago    | prev | next  [–]      The formal methods nerd in me is happy to see HOL Light being used to formally verify this implementation. I'm curious to see how closely their abstract machine models follow specific machine implementations. OOO, speculation, and deep pipelining have non-trivial impacts on potential side channels, and these vary quite a bit by stepping and architecture.    reply            holowoodman  1 day ago    | parent | next  [–]      Even worse: Each new CPU generation will need a new machine model and a reevaluation. Because OOO, speculation and all the timing behaviour are non-functional properties that frequently change due to new optimizations, different internal structuring, etc.    reply            aseipp  1 day ago    | prev | next  [–]      I was aware of s2n-bignum which is a very cool project, but apparently there is a larger sister project, aws-lc, that aims for broader set of APIs including OpenSSL compatibility, while retaining the general approach and vibe (lots of formal verification + performance work): https://github.com/aws/aws-lc That's pretty sweet. I'm currently using BoringSSL in a project as a supplement to OpenSSL (mostly because it is much easier to build for Windows users than requiring them to fiddle with msys2/vcpkg etc; the alternative is to rely on the Windows CNG API, but it lacks features like ed25519 support.) I wonder how much effort it would take to use aws-lc instead... Not that I'm that interested, BSSL is pretty good, but free performance and heavy automated verification is always nice :) Related: one of the authors of this post, John Harrison, wrote a really good book about automated theorm proving about 15 years ago while working on floating point verification at Intel -- there's still no other book quite like this one, I think https://www.cl.cam.ac.uk/~jrh13/    reply            newman314  1 day ago    | parent | next  [–]      Upon hearing about AWS-LC, I immediately thought about tying it to nginx to see if it will work. Turns out someone else has already tried: https://github.com/aws/aws-lc/issues/1827    reply            saghm  1 day ago    | prev | next  [–]      My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. At times I've run into places that require me to use RSA keys though (ironically, I seem to remember first experiencing this with AWS years back, although I honestly can't recall if this is still the case or not). If this further improvement becomes widely used, it would be interesting to see if it's enough to tip the scales towards ed25519 being more of the de facto \"default\" ssh key algorithm. My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that.    reply            scrapheap  1 day ago    | parent | next  [–]      > My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that. I wouldn't be surprised if a lot of people still use RSA for SSH keys for one or more of the following reasons: 1. A lot of tutorials about generating SSH Keys were written before ed25519, so if they follow an old tutorial they'll probably be generating an RSA key. 2. Older versions of OpenSSH, that you'd find on CentOS 7 and below, would default to RSA if you didn't specify a key type when running ssh-keygen. 3. There are some systems out there that don't support ed25519, though they are becoming rarer.  If you have to deal with those systems then you're forced to use RSA (at least for that system). 4. Some of us have been using SSH keys from way before OpenSSH add support for ed25519 keys in 2014, so any long lived SSH keys won't be ed25519 keys (wow, ed25519 has now been about in OpenSSH for over 10 years).    reply            miki123211  1 day ago    | root | parent | next  [–]      5. a lot of people (especially older people I suspect) think \"RSA\" when they hear \"public key cryptography\". I'm in my twenties and still have that reaction. I know elliptic curves exist, I even sort-of-kind-of have an awareness of how they work, but if I was asked to name one cryptosystem that used public and private keys, I'd definitely say RSA first and not elliptic curves.    reply            vitus  1 day ago    | root | parent | next  [–]      This is likely in no small part due to CS education only really teaching the mechanics of RSA (modular arithmetic, Fermat's little theorem, etc), or at least, that still seems to be the case at Berkeley. I'd guess because elliptic curve crypto requires more advanced math to reason about (more advanced group theory, at least) and doesn't map as cleanly to existing concepts that non-math-major undergrads have. cryptopals.com also doesn't cover any elliptive curve crypto until you get into the last set.    reply            tptacek  1 day ago    | root | parent | next  [–]      We didn't even cover RSA until the original last set. It's a build-up. :)    reply            throw0101b  1 day ago    | root | parent | prev | next  [–]      I would think that the (non-EC) Diffie-Hellman would also be easy enough to teach as well: exponentials and discrete log problem aren't any/much complicated than explaining factorization.    reply            pantalaimon  1 day ago    | root | parent | prev | next  [–]      > 3. There are some systems out there that don't support ed25519, though they are becoming rarer. If you have to deal with those systems then you're forced to use RSA (at least for that system). Azure Devops is a big one.    reply            Spooky23  1 day ago    | root | parent | prev | next  [–]      If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519.    reply            vitus  1 day ago    | root | parent | next  [–]      > If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519. Not even when FIPS 140-3 was (finally) finalized in 2019, and testing began in 2020? https://csrc.nist.gov/projects/cryptographic-module-validati... includes mentions of EdDSA, and Curve25519 is listed among the \"Recommended Curves for U.S. Federal Government Use\" on page 15 of https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.S... . (I guess the problem is that various crypto implementations need to get recertified under the new standard...) edit: it looks like AWS-LC [0] and boringcrypto [1] have both been validated under FIPS 140-3. Azure's OpenSSL crypto [2] has only been validated under FIPS 140-2 as far as I can tell. [0] https://csrc.nist.gov/projects/cryptographic-module-validati... [1] https://csrc.nist.gov/projects/cryptographic-module-validati... [2] https://csrc.nist.gov/projects/cryptographic-module-validati...    reply            devman0  1 day ago    | root | parent | prev | next  [–]      ed25519 is in FIPS 186-5 which meets criteria (a) for Approved Security Functions in FIPS 140-2.    reply            loudmax  1 day ago    | root | parent | prev | next  [–]      When I run `ssh-keygen`, I can remember the options `-t rsa` or `-t dsa`.  I simply cannot remember the flag `-t ed25519`.  I have to look it up every time. I just remember the flag as being vaguely similar the name of the monster robot from RoboCop.    reply            homebrewer  1 day ago    | root | parent | next  [–]      Use shell autocomplete. Even `bash-completion` suggests arguments for the key type these days:  $ ssh-keygen -t <TAB>\n  dsa   ecdsa   ecdsa-sk   ed25519   ed25519-sk  rsa `-sk` is short for \"security key\" if memory serves me right, and is used with FIDO2 hardware tokens.    reply            throw0101b  1 day ago    | root | parent | prev | next  [–]      > When I run `ssh-keygen` As of OpenSSH 9.5 the default has changed, so you don't have to specify anything:  * ssh-keygen(1): generate Ed25519 keys by default. Ed25519 public keys\n     are very convenient due to their small size. Ed25519 keys are\n     specified in RFC 8709 and OpenSSH has supported them since version 6.5\n     (January 2014). * https://www.openssh.com/txt/release-9.5    reply            saghm  1 day ago    | root | parent | next  [–]      Oh wow, I didn't know that one! I still manually type `-t ed25519` from muscle memory, I guess I don't have to now    reply            toast0  1 day ago    | parent | prev | next  [–]      > My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though.    reply            saghm  1 day ago    | root | parent | next  [–]      > My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though. Interesting! I wonder if this new algorithm is intended to help with that. I'm super curious if the smaller payload does indeed make a difference (with the current algorithm) like you mention; I know that with databases and filesystems, compression is commonly used to shift the balance from I/O to CPU due to disk writes being slow (with reduced storage size being a side benefit but not usually the main motivation), but I also know that cryptographic verification being too slow can be an anti-feature if it makes brute forcing feasible, so the amount of CPU work needed might be pretty high still.    reply            toast0  23 hours ago    | root | parent | next  [–]      On my ancient box, only including a few lines of output:  $ openssl speed rsa ecdsa\n\n                     sign    verify    sign/s verify/s\n   rsa 1024 bits 0.000117s 0.000008s   8518.7 132449.2\n   rsa 2048 bits 0.000884s 0.000025s   1130.6  39499.3\n\n                                 sign    verify    sign/s verify/s\n    256 bits ecdsa (nistp256)   0.0000s   0.0001s  33210.9  11483.0\n    384 bits ecdsa (nistp384)   0.0009s   0.0008s   1070.6   1268.9 It's 11 k verify/s for ecda vs 39k verify/s for rsa-2048. A TLS handshake needs at least one sign and verify from the server cert, plus some verifies for the signature on the cert chain (but those signatures are used over and over).    reply            stouset  1 day ago    | parent | prev | next  [–]      > anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519 That’s not really anecdotal. Generating an ed25519 key is barely more than generating a random 256-bit value. Generating an RSA key is significantly more work.    reply            saghm  1 day ago    | root | parent | next  [–]      I did say my understanding was probably naive; I didn't know the details to be able to assert anything beyond my own observation!    reply            stouset  1 day ago    | root | parent | next  [–]      Yep, not faulting you at all! I too was surprised when I found out that it’s a straight 256-bit random value with a few bits masked.    reply            saghm  1 day ago    | root | parent | next  [–]      I pretty quickly realized in college when learning about this stuff that the math was well over my head, and I shifted my focus more to understanding how to properly use cryptography rather than implement it (which turned out to be more important as a software engineer anyhow). In retrospect, I really appreciate how the professor I had in a security-focused course explicitly told us it was okay if we didn't understand the math and wouldn't be tested on it when going over how it worked.    reply            tptacek  1 day ago    | root | parent | next  [–]      Counterpoint: it's not OK to skip the math with cryptography. You may not need to power through all of Silverman's curve book (though: I don't know for sure that's true, which is why I don't call myself a cryptography engineer), but you have to get as deep into the math as you can in order to safely use cryptographic algorithms. If you're math-avoidant, stick with high-level abstractions like NaCL and TLS. There's nothing wrong with that! A professor talking about and demonstrating cryptography at the level of individual algorithms is doing their class a disservice if they say \"none of the math will be on the test\". The algorithms are enough to put something together that seems like it works; the math is what you need to find out if your resulting system actually does work. It's where many of the fun bug classes live.    reply            saghm  1 day ago    | root | parent | next  [–]      I'm not sure if you're reading more into what I said than I intended, but I'm not convinced by this argument. You might have missed that this course was on security in general, not cryptography; not everything in the course was cryptographic related. That said, I'd argue that for the vast majority of software engineers the type of stuff they're dealing with can be dealt with without needing to know the math. For example, you don't need to understand the math to behind the algorithms to know that bcrypt is a reasonable password hashing algorithm and that sha1 and md5 are not, or that salts are used to mitigate issues when users reuse passwords. These are principles that you can understand at a high level without fully understanding the underlying details. If anything, I think that overemphasis on requiring people to learn and understand the math has the effect of over-focusing on simpler algorithms that aren't actually what people want to be using in practice due to the fact that they're easier to teach and often foundational in conveying concepts that would need to be learned to understand the more complicated algorithms. If using cryptographic algorithms directly requires knowing the math, then I'd agree that most people shouldn't be using them directly, but I'd go further and say that a lack of libraries that are safe for people to use for software engineering without understanding the implementation is a failing of the ecosystem; as much as \"regular\" software engineering people (like myself!) can struggle with the math behind cryptography, I think that a lot of people developing cryptographic libraries struggle with building reasonable abstractions and making user-friendly APIs (which is a skill I think in general is not emphasized enough for most software engineers, to the detriment of everyone).    reply            tptacek  1 day ago    | root | parent | next  [–]      Sure. It's a failing of the ecosystem. That observation, a cup of coffee, and 1-3 years will get you a Kenny Paterson paper stunt-breaking your system. I feel where you're coming from, but, respectfully: it does not matter. My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry.    reply            saghm  1 day ago    | root | parent | next  [–]      > My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry. I'm not sure I understand what you mean here by \"something else in our industry\". Are you arguing that I'm not qualified to be a software engineer due to not understanding the math behind elliptic curves, or did you miss my repeated use of phrases like \"the vast majority of software engineers\" rather than some specialty where cryptography implementation details details are more important? If the latter, I can reassure you that I don't work in cryptography, work on any cryptographic libraries, or have any specific responsibilities related to security beyond the general idea that all software being written should be secure. If the former, I'll have to respectfully disagree, and suggest that maybe even if you aren't willing to consider that you're wrong about the math being a hard requirement for someone being qualified as a software engineer, it's worth considering that you almost certainly don't have enough information to conclude whether a stranger on the internet is qualified based on reading some of their comments.    reply            tptacek  3 hours ago    | root | parent | next  [–]      I'm certainly not saying you're not qualified to be a software engineer.    reply            syncsynchalt  1 day ago    | root | parent | prev | next  [–]      Learning X25519 isn't too hard!  See https://curves.xargs.org for the basics and https://x25519.xargs.org for some refining details.    reply            upofadown  1 day ago    | parent | prev | next  [–]      Another article from the same blog about optimizing RSA: * https://www.amazon.science/blog/formal-verification-makes-rs... RSA signature verification is already very fast and TLS doesn't use RSA for encryption anymore so the problem reduces to optimizing signing operations.    reply            fefe23  1 day ago    | prev | next  [–]      Holy shit these claims are wild!\nIt's not just a percent more performance here and there, the graphs look more like 50% more throughput on the same hardware (depending on the cpu architecture). My immediate fear was that they optimized away the security features like absence of timing side channels, but they say they still have those. They also claim to have formal proof of correctness, which is even more amazing, because they are not doing it on a symbolic level but on a machine instruction level. Apparently they tought their reasoning system the semantics of all the CPU instructions used in the assembler implementation. I'll still wait what djb has to say about this, but it looks freaking amazing to me.    reply            jonmon6691  1 day ago    | prev | next  [–]      I'm assuming when they say that this improves user experience, that it implies the use case is primarily TLS. In which case store-now-decrypt-later attacks are already considered an urgent threat with regard to post quantum crypto. With FIPS 203 being released and Chrome is already using an implementation based on the draft standard, this seems like this algo (at least for TLS) should be on its way out.    reply            dlgeek  1 day ago    | parent | next  [–]      The industry is moving to a hybrid that mixes classic crypto (including ECC) with post-quantum crypto. AWS has even turned this on in some places - https://aws.amazon.com/about-aws/whats-new/2022/03/aws-kms-a... from 2022 and https://docs.aws.amazon.com/kms/latest/developerguide/pqtls.... for some details.    reply            jonmon6691  1 day ago    | root | parent | next  [–]      Thanks I forgot about that. So if understand it right, the idea is to provide some insurance in the case that these relatively young algorithms are broken as they get exposed to more and more cryptanalysis    reply            adgjlsfhk1  1 day ago    | parent | prev | next  [–]      No one other than NIST is recommending phasing out pre-quantum crypto. Everyone else is using a combination of pre-quantum and post-quantum because trust in the security and robustness of the post-quantum ecosystem is fairly low.    reply            webXL  1 day ago    | prev | next  [–]      Why don't they just focus on making a Gravitron variant with those algorithms in the circuitry?    reply            londons_explore  1 day ago    | prev  [–]      Does 25519 suffer from key/data-dependant execution time? Is this implementation resistant to that? If it isn't, it's kinda a footgun which shouldn't be published for general use.    reply            syncsynchalt  1 day ago    | parent | next  [–]      Curve25519 is designed to be resistant to timing attacks, such as clamping the 254th bit in x25519 keys to 1 so that implementors can not optimize away a multiplication round. That doesn't mean that this implementation doesn't have timing attacks, but the implementors claim they chose mechanisms which should be constant-time.    reply            vitus  1 day ago    | parent | prev  [–]      > Does 25519 suffer from key/data-dependant execution time? I mean, when implemented naively, yes, but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. From the article: > We also do our best to execute the algorithms in constant time, to thwart side-channel attacks that infer secret information from the durations of computations. https://github.com/awslabs/s2n-bignum (where most of the heavy lifting is done, per the article) further explicitly states that \"Each function is moreover written in a constant-time style to avoid timing side-channels.\"    reply            justinwsmith  1 day ago    | root | parent | next  [–]      The next paragraph makes a slightly stronger statement about its constant-time'ness: > Our implementations of x/Ed25519 are designed with constant time in mind. They perform exactly the same sequence of basic CPU instructions regardless of the input values, and they avoid any CPU instructions that might have data-dependent timing.    reply            deathanatos  1 day ago    | root | parent | prev  [–]      > but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. When I see CVE-fests like — https://people.redhat.com/~hkario/marvin/ — … I just do not come away with that impression. [Widely used] Cryptographic Rust crates offering \"constant time\" operations in \"pure Rust\" — but Rust has no primitives for doing constant time operations , so it's only through hopes and prayers that it might actually work, and with no guarantee anywhere that it actually should . (Other, less timing attack related stuff, but e.g., major companies still not supporting anything beyond RSA.)    reply              Guidelines | FAQ | Lists | API | Security | Legal | Apply to YC | Contact    Search:     Hacker News  new | past | comments | ask | show | jobs | submit   login          Better-performing “25519” elliptic-curve cryptography ( amazon.science )   212 points by lemaudit  1 day ago   | hide | past | favorite | 87 comments                         SEJeff  1 day ago    | next  [–]      The firedancer team at one of the better HFT firms wrote an AVX512 optimized implementation of ed25519 and X25519 that’s significantly faster than OpenSSL. https://github.com/firedancer-io/firedancer/pull/716 Ditto for sha256: https://github.com/firedancer-io/firedancer/pull/778 And sha512: https://github.com/firedancer-io/firedancer/pull/760 If you’re an optimization nerd, this codebase is wild.    reply            syzygyhack  1 day ago    | parent | next  [–]      I laughed a little at calling Firedancer contributors \"a team at a HFT firm\". Not that you are technically wrong, not at all, that's where Jump came from. It's just that this is all completely blockchain-driven optimization, but the b-word is so dirty now that we've gotta go back to using TradFi for the rep.    reply            SEJeff  1 day ago    | root | parent | next  [–]      It’s an optimization in hashing algorithms that is around twice as fast as the ones Amazon is posting in thus article for the same eliptic curves. If the Amazon improvements are hacker news worthy (they are) this seems reasonable contextually. Also, I worked for Jump for almost 12 years :)    reply            webXL  1 day ago    | root | parent | prev | next  [–]      What makes the “b-word” dirty?    reply            SEJeff  1 day ago    | root | parent | next  [–]      I didn’t use it because I didn’t find it relevant. They’re using hashing and EC algorithms and they’re improving them.    reply            jandrese  1 day ago    | root | parent | prev | next  [–]      It's hard to separate from the sea of grifters, con men, cranks, and scammers that infest the domain.  Just using the word is a yellow flag that you might be some kind of whacko, even if all you really want to talk about is the math. People have to forever be on guard that you might at any point pivot to all taxation is theft or how you have formed your own micro nation that consists entirely of yourself and thus have diplomatic immunity from all prosecution.  Because it happens.  Or maybe you have a once in a lifetime deal to buy this receipt like object for some hideous art that is guaranteed to appreciate in value millions of percent.  It's just the crowd that has aggregated around crypto currencies includes a lot of untrustworthy people.    reply            webXL  1 day ago    | root | parent | next  [–]      Why do people need to be on guard for those beliefs? People should be critical thinkers and not thought police. Granted, there are all kinds of whackos in crypto, but we should only be concerned about the immoral ones trying to scam us out of our money: SBF, Do-Kwon, and the like.    reply            sweeter  22 hours ago    | root | parent | next  [–]      people are legitimately buying farming land in the US and currently suing farmers for \"anti-trust\" for refusing to sell them their land so that they can quite literally create a crypto based sovereign micro-nation of wealthy tech VC's. [1] and I think that is a selfish, vile and delusional thing to do. It has nothing to do with \"thought police\" its as simple as looking at the impact of their actions and beliefs and making the decision to reject that way of thinking and way of life. 1: https://www.youtube.com/watch?v=PHlcAx-I0oY    reply            ShroudedNight  1 day ago    | root | parent | prev | next  [–]      The trough of disillusionment carved out by grifters burning the peat of enthusiasm unsustainably.    reply            nly  1 day ago    | parent | prev | next  [–]      A lot of slowness comes typically comes from wanting to avoid methods that enable side-channel timing attacks    reply            inopinatus  1 day ago    | parent | prev | next  [–]      I see they learned clang’s dirty little secret over intrinsics viz. that in producing the IR it deviates (sometimes dramatically when AVX-512 is concerned) from the documented opcodes and the results are inevitably detrimental.    reply            astrange  1 day ago    | root | parent | next  [–]      This is why ffmpeg uses assembly, and people get extremely mad when you say it's done for a reason, because they always want to come up with a fancier abstraction (usually cross-platform) which then defeats the purpose because it doesn't actually work. nb those abstractions do make sense when you can only afford to write a single implementation of the algorithm; then you're just talking about a high level programming language. But they frequently fail to achieve their goal when you're writing a second implementation for the sole purpose of being faster.    reply            electricshampo1  1 day ago    | parent | prev | next  [–]      Completely agree re: firedancer codebase. There is a level of thought and discipline wrt performance that I have never seen anywhere else.    reply            dhx  1 day ago    | root | parent | next  [–]      It's much more than just performance they've thought about. Here are some of the secure programming practices that have been implemented:  /* All the functions in this file are considered \"secure\", specifically:\n     - Constant time in the input, i.e. the input can be a secret[2]\n     - Small and auditable code base, incl. simple types\n     - Either, no local variables = no need to clear them before exit (most functions)\n     - Or, only static allocation + clear local variable before exit (fd_ed25519_scalar_mul_base_const_time)\n     - Clear registers via FD_FN_SENSITIVE[3]\n     - C safety\n  */ libsodium[4] implements similar mechanisms, and Linux kernel encryption code does too (example: use of kfree_sensitive)[5]. However, firedancer appears to better avoid moving secrets outside of CPU registers, and [3] explains that libraries such as libsodium have inadequate zeroisation, something which firedancer claims to improve upon. [1] https://github.com/firedancer-io/firedancer/blob/main/src/ba... [2] https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplic... [3] https://eprint.iacr.org/2023/1713 [4] https://libsodium.gitbook.io/doc/internals#security-first [5] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/lin...    reply            tptacek  1 day ago    | root | parent | next  [–]      These are table stakes for core cryptographic code, and SOT crypto code --- like the Amazon implementation this story is about --- tend at this point all to be derived from formal methods.    reply            dhx  1 day ago    | root | parent | next  [–]      As an example, the Amazon implementation doesn't refer to gcc's[1] and clang's[2] \"zero_call_used_regs\" to zeroise CPU registers upon return or exception of functions working on crypto secrets. OpenSSL doesn't either.[3] firedancer _does_ use \"zero_call_used_regs\" to allow gcc/clang to zeroise used CPU registers.[9] As another example, the Amazon implementation also doesn't refer to gcc's \"strub\" attribute which zeroises the function's stack upon return or exception of functions working on crypto secrets.[4][5] OpenSSL doesn't either.[3] firedancer _does_ use the \"strub\" attribute to allow gcc to zeroise the function's stack.[9] Is there a performance impact? [6] has the overhead at 0% for X25519 for implementing CPU register and stack zeroisation. Compiling the Linux kernel with \"CONFIG_ZERO_CALL_USED_REGS=1\" for x64_64 (impacting all kernel functions) was found to result in a 1-1.5% performance penalty.[7][8] [1] https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attribute... [2] https://clang.llvm.org/docs/AttributeReference.html#zero-cal... [3] https://github.com/openssl/openssl/discussions/24321 [4] https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Common-Type-At... [5] https://gcc.gnu.org/onlinedocs/gcc/Stack-Scrubbing.html [6] https://eprint.iacr.org/2023/1713.pdf [7] https://www.phoronix.com/review/zero-used-regs/5 [8] https://lore.kernel.org/lkml/20210505191804.4015873-1-keesco... [9] FD_FN_UNSANITIZED: https://github.com/firedancer-io/firedancer/blob/master/src/...    reply            jandrese  1 day ago    | root | parent | next  [–]      Zeroizing a register seems pretty straightforward.  Zeroizing any cache that it may have touched seems a lot more complex.  I guess that's why they work so hard to keep everything in registers.  Lucky for them we aren't in the x86 era anymore and there are a useful number of registers.  I'll need to read up on how they avoid context switches while their registers are loaded.    reply            SEJeff  1 day ago    | root | parent | prev | next  [–]      That team is full of world experts in high performance computing.    reply            pantalaimon  1 day ago    | parent | prev | next  [–]      That looks really neat, but I still don't understand what firedancer actually is - what is a validator client for Solana and why does it need it's own crypto library?    reply            SEJeff  1 day ago    | root | parent | next  [–]      It’s a new from scratch implementation of a validator for Solana the fastest blockchain by several orders of magnitude. The slowest part is signature verification so they sped up hashing to improve performance of the entire system. They follow a first principles approach (the lead has a few physics degrees) and opted to speed up the cryptography. The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. It’s a win in cryptography, much like this Amazon post is, except it’s slower than the firedancer implementation.    reply            scrlk  1 day ago    | root | parent | next  [–]      Off topic - is Firedancer going to survive Jump winding down its crypto arm? Kanav left, they liquidated a huge staked ETH position a few months ago (+ a bunch of other coins), and the SEC/CFTC is all over them for the Terra Luna fiasco.    reply            SEJeff  1 day ago    | root | parent | next  [–]      Rumors of Jump’s demise are greatly exaggerated. Check the torrent of firedancer talks at Solana Breakpoint literally next week and decide yourself. Folks have said jump is gonna die for 20+ years. They’ve been around 30ish…    reply            sangnoir  1 day ago    | root | parent | next  [–]      Parent asked a specific question about the survival of Firedancer and winding down of the crypto arm though. No demise of Jump mentioned.    reply            SEJeff  1 day ago    | root | parent | next  [–]      You will see a half dozen or so talks about firedancer and probably 35-40 or so of us total (I’m at the company that does security for firedancer, Asymmetric Research. We were founded by former jumpers). You can make the determination on your own, but there will be an obvious large showing of firedancer folks and some exciting updates for the project.    reply            caned  1 day ago    | root | parent | prev | next  [–]      > The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. For users that have AVX-512, which isn't widely available (AMD Zen 4 / Zen 5, Sapphire Rapids)...    reply            SEJeff  1 day ago    | root | parent | next  [–]      Sure, and cpus supporting it will proliferate. Shockingly to no one reading hacker news... Both software and hardware continue to improve with time generally speaking. This was a huge software improvement on hardware that supports that functionality. It is a huge win for anyone wanting to use these algorithms where they can afford hardware that supports it. We should celebrate Amazon's improvements and we should celebrate these improvements. Both are great for the future of technology, regardless of why they were initially developed. Improving tech and keeping it open source is good for all.    reply            4gotunameagain  1 day ago    | parent | prev | next  [–]      So many manhours spent on finding better ways to shovel around money and pocket what falls from the cracks. What a wasteful and unproductive enterprise, considering the vast majority of the devised improvements never see the public eye. Still, impressive work. Imagine if those brilliant minds behind this were focused somewhere else.    reply            posnet  1 day ago    | root | parent | next  [–]      The greatest minds of our generation spend their time thinking about how to: - make people click on ads - make trading algos faster - replace human artists - build more efficient killing machines - destroy any remaining concept of privacy    reply            geodel  23 hours ago    | root | parent | next  [–]      Greatest mind of previous generation made nuclear bombs and other deadly things.    reply            astrange  1 day ago    | root | parent | prev | next  [–]      Aren't the greatest mind(s) of our generation writing Terry Tao's blog posts?    reply            vladms  1 day ago    | root | parent | prev | next  [–]      This directly implies that all the people that did useful stuff (improving cancer survivability, new vaccines, renewable energy, and others) are all \"below\" the \"greatest minds of our generation\". Not to mention it also suggests there is a way to \"compare\" minds. I would not choose myself to do somethings, but that does not mean I despise automatically people choosing to.    reply            geodel  23 hours ago    | root | parent | next  [–]      I think they meant greatest minds have to be greatest money earners also. Else they are not greatest minds.    reply            4gotunameagain  1 day ago    | root | parent | prev | next  [–]      Hey, at least we had one of them working on TempleOS.    reply            toast0  1 day ago    | root | parent | prev | next  [–]      It doesn't seem wasteful and unproductive, given that the result of the HFT industry is smaller bid/ask spreads (lowering costs for all trades) and payment for order flow which is the mechanism that eliminated retail commissions and provides price improvement on many retail trades. And even so, HFT firms are making money. It might not seem like real work, but making money by reducing costs of market participants sounds like a good thing. I admit though, block trades might be harder now than before the rise of HFT. If you could do warehousing/distributing/coordinating fresh foods in a way that reduced the difference in price between the farmer and the consumer and make money doing it, that would clearly be good work.    reply            appendix-rock  1 day ago    | root | parent | prev | next  [–]      What do you work on?    reply            almostgotcaught  1 day ago    | root | parent | prev | next  [–]      I'll never be able to figure out what people get from repeating the same thing over and over. I've seen this same exact comment 1000 times on hn and I'm 100% sure you have too (indeed I believe the reason you repeat is because you've seen it and agree with it).    reply            XorNot  1 day ago    | root | parent | next  [–]      It's virtue signalling.    reply            slt2021  1 day ago    | parent | prev | next  [–]      wow amazing, nobody is gonna edit that code ever again...    reply            notfed  1 day ago    | prev | next  [–]      > The x25519 algorithm also plays a role in post-quantum safe cryptographic solutions, having been included as the classical algorithm in the TLS 1.3 and SSH hybrid scheme specifications for post-quantum key agreement. Really though? This mostly-untrue statement is the line that warrants adding hashtag #post-quantum-cryptography to the blogpost?    reply            westurner  1 day ago    | parent | next  [–]      Actually, e.g. rustls added X25519Kyber768Draft00 support this year: https://news.ycombinator.com/item?id=41534500 /?q X25519Kyber768Draft00: https://www.google.com/search?q=X25519Kyber768Draft00    reply            notfed  1 day ago    | root | parent | next  [–]      Kyber768 is the post-quantum algorithm in that example, not x25519.    reply            westurner  1 day ago    | root | parent | next  [–]      From \"OpenSSL 3.4 Alpha 1 Released with New Features\" (8 days ago) https://news.ycombinator.com/item?id=41456447#41456774 : > Someday there will probably be a TLS1.4/2.0 with PQ, and also FIPS-140 -4? > Are there additional ways to implement NIST PQ finalist algos with openssl? - open-quantum-safe/oqs-provider [implements mlkem512 through mlkem1024 and x25519_mlkem768]    reply            notfed  7 hours ago    | root | parent | next  [–]      Not sure what you're trying to say here . x25519 is objectively not PQC and never claimed to be, and this isn't debatable.    reply            westurner  6 hours ago    | root | parent | next  [–]      In this case, hybrid means \"not entirely PQ\".    reply            nanolith  1 day ago    | prev | next  [–]      The formal methods nerd in me is happy to see HOL Light being used to formally verify this implementation. I'm curious to see how closely their abstract machine models follow specific machine implementations. OOO, speculation, and deep pipelining have non-trivial impacts on potential side channels, and these vary quite a bit by stepping and architecture.    reply            holowoodman  1 day ago    | parent | next  [–]      Even worse: Each new CPU generation will need a new machine model and a reevaluation. Because OOO, speculation and all the timing behaviour are non-functional properties that frequently change due to new optimizations, different internal structuring, etc.    reply            aseipp  1 day ago    | prev | next  [–]      I was aware of s2n-bignum which is a very cool project, but apparently there is a larger sister project, aws-lc, that aims for broader set of APIs including OpenSSL compatibility, while retaining the general approach and vibe (lots of formal verification + performance work): https://github.com/aws/aws-lc That's pretty sweet. I'm currently using BoringSSL in a project as a supplement to OpenSSL (mostly because it is much easier to build for Windows users than requiring them to fiddle with msys2/vcpkg etc; the alternative is to rely on the Windows CNG API, but it lacks features like ed25519 support.) I wonder how much effort it would take to use aws-lc instead... Not that I'm that interested, BSSL is pretty good, but free performance and heavy automated verification is always nice :) Related: one of the authors of this post, John Harrison, wrote a really good book about automated theorm proving about 15 years ago while working on floating point verification at Intel -- there's still no other book quite like this one, I think https://www.cl.cam.ac.uk/~jrh13/    reply            newman314  1 day ago    | parent | next  [–]      Upon hearing about AWS-LC, I immediately thought about tying it to nginx to see if it will work. Turns out someone else has already tried: https://github.com/aws/aws-lc/issues/1827    reply            saghm  1 day ago    | prev | next  [–]      My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. At times I've run into places that require me to use RSA keys though (ironically, I seem to remember first experiencing this with AWS years back, although I honestly can't recall if this is still the case or not). If this further improvement becomes widely used, it would be interesting to see if it's enough to tip the scales towards ed25519 being more of the de facto \"default\" ssh key algorithm. My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that.    reply            scrapheap  1 day ago    | parent | next  [–]      > My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that. I wouldn't be surprised if a lot of people still use RSA for SSH keys for one or more of the following reasons: 1. A lot of tutorials about generating SSH Keys were written before ed25519, so if they follow an old tutorial they'll probably be generating an RSA key. 2. Older versions of OpenSSH, that you'd find on CentOS 7 and below, would default to RSA if you didn't specify a key type when running ssh-keygen. 3. There are some systems out there that don't support ed25519, though they are becoming rarer.  If you have to deal with those systems then you're forced to use RSA (at least for that system). 4. Some of us have been using SSH keys from way before OpenSSH add support for ed25519 keys in 2014, so any long lived SSH keys won't be ed25519 keys (wow, ed25519 has now been about in OpenSSH for over 10 years).    reply            miki123211  1 day ago    | root | parent | next  [–]      5. a lot of people (especially older people I suspect) think \"RSA\" when they hear \"public key cryptography\". I'm in my twenties and still have that reaction. I know elliptic curves exist, I even sort-of-kind-of have an awareness of how they work, but if I was asked to name one cryptosystem that used public and private keys, I'd definitely say RSA first and not elliptic curves.    reply            vitus  1 day ago    | root | parent | next  [–]      This is likely in no small part due to CS education only really teaching the mechanics of RSA (modular arithmetic, Fermat's little theorem, etc), or at least, that still seems to be the case at Berkeley. I'd guess because elliptic curve crypto requires more advanced math to reason about (more advanced group theory, at least) and doesn't map as cleanly to existing concepts that non-math-major undergrads have. cryptopals.com also doesn't cover any elliptive curve crypto until you get into the last set.    reply            tptacek  1 day ago    | root | parent | next  [–]      We didn't even cover RSA until the original last set. It's a build-up. :)    reply            throw0101b  1 day ago    | root | parent | prev | next  [–]      I would think that the (non-EC) Diffie-Hellman would also be easy enough to teach as well: exponentials and discrete log problem aren't any/much complicated than explaining factorization.    reply            pantalaimon  1 day ago    | root | parent | prev | next  [–]      > 3. There are some systems out there that don't support ed25519, though they are becoming rarer. If you have to deal with those systems then you're forced to use RSA (at least for that system). Azure Devops is a big one.    reply            Spooky23  1 day ago    | root | parent | prev | next  [–]      If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519.    reply            vitus  1 day ago    | root | parent | next  [–]      > If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519. Not even when FIPS 140-3 was (finally) finalized in 2019, and testing began in 2020? https://csrc.nist.gov/projects/cryptographic-module-validati... includes mentions of EdDSA, and Curve25519 is listed among the \"Recommended Curves for U.S. Federal Government Use\" on page 15 of https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.S... . (I guess the problem is that various crypto implementations need to get recertified under the new standard...) edit: it looks like AWS-LC [0] and boringcrypto [1] have both been validated under FIPS 140-3. Azure's OpenSSL crypto [2] has only been validated under FIPS 140-2 as far as I can tell. [0] https://csrc.nist.gov/projects/cryptographic-module-validati... [1] https://csrc.nist.gov/projects/cryptographic-module-validati... [2] https://csrc.nist.gov/projects/cryptographic-module-validati...    reply            devman0  1 day ago    | root | parent | prev | next  [–]      ed25519 is in FIPS 186-5 which meets criteria (a) for Approved Security Functions in FIPS 140-2.    reply            loudmax  1 day ago    | root | parent | prev | next  [–]      When I run `ssh-keygen`, I can remember the options `-t rsa` or `-t dsa`.  I simply cannot remember the flag `-t ed25519`.  I have to look it up every time. I just remember the flag as being vaguely similar the name of the monster robot from RoboCop.    reply            homebrewer  1 day ago    | root | parent | next  [–]      Use shell autocomplete. Even `bash-completion` suggests arguments for the key type these days:  $ ssh-keygen -t <TAB>\n  dsa   ecdsa   ecdsa-sk   ed25519   ed25519-sk  rsa `-sk` is short for \"security key\" if memory serves me right, and is used with FIDO2 hardware tokens.    reply            throw0101b  1 day ago    | root | parent | prev | next  [–]      > When I run `ssh-keygen` As of OpenSSH 9.5 the default has changed, so you don't have to specify anything:  * ssh-keygen(1): generate Ed25519 keys by default. Ed25519 public keys\n     are very convenient due to their small size. Ed25519 keys are\n     specified in RFC 8709 and OpenSSH has supported them since version 6.5\n     (January 2014). * https://www.openssh.com/txt/release-9.5    reply            saghm  1 day ago    | root | parent | next  [–]      Oh wow, I didn't know that one! I still manually type `-t ed25519` from muscle memory, I guess I don't have to now    reply            toast0  1 day ago    | parent | prev | next  [–]      > My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though.    reply            saghm  1 day ago    | root | parent | next  [–]      > My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though. Interesting! I wonder if this new algorithm is intended to help with that. I'm super curious if the smaller payload does indeed make a difference (with the current algorithm) like you mention; I know that with databases and filesystems, compression is commonly used to shift the balance from I/O to CPU due to disk writes being slow (with reduced storage size being a side benefit but not usually the main motivation), but I also know that cryptographic verification being too slow can be an anti-feature if it makes brute forcing feasible, so the amount of CPU work needed might be pretty high still.    reply            toast0  23 hours ago    | root | parent | next  [–]      On my ancient box, only including a few lines of output:  $ openssl speed rsa ecdsa\n\n                     sign    verify    sign/s verify/s\n   rsa 1024 bits 0.000117s 0.000008s   8518.7 132449.2\n   rsa 2048 bits 0.000884s 0.000025s   1130.6  39499.3\n\n                                 sign    verify    sign/s verify/s\n    256 bits ecdsa (nistp256)   0.0000s   0.0001s  33210.9  11483.0\n    384 bits ecdsa (nistp384)   0.0009s   0.0008s   1070.6   1268.9 It's 11 k verify/s for ecda vs 39k verify/s for rsa-2048. A TLS handshake needs at least one sign and verify from the server cert, plus some verifies for the signature on the cert chain (but those signatures are used over and over).    reply            stouset  1 day ago    | parent | prev | next  [–]      > anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519 That’s not really anecdotal. Generating an ed25519 key is barely more than generating a random 256-bit value. Generating an RSA key is significantly more work.    reply            saghm  1 day ago    | root | parent | next  [–]      I did say my understanding was probably naive; I didn't know the details to be able to assert anything beyond my own observation!    reply            stouset  1 day ago    | root | parent | next  [–]      Yep, not faulting you at all! I too was surprised when I found out that it’s a straight 256-bit random value with a few bits masked.    reply            saghm  1 day ago    | root | parent | next  [–]      I pretty quickly realized in college when learning about this stuff that the math was well over my head, and I shifted my focus more to understanding how to properly use cryptography rather than implement it (which turned out to be more important as a software engineer anyhow). In retrospect, I really appreciate how the professor I had in a security-focused course explicitly told us it was okay if we didn't understand the math and wouldn't be tested on it when going over how it worked.    reply            tptacek  1 day ago    | root | parent | next  [–]      Counterpoint: it's not OK to skip the math with cryptography. You may not need to power through all of Silverman's curve book (though: I don't know for sure that's true, which is why I don't call myself a cryptography engineer), but you have to get as deep into the math as you can in order to safely use cryptographic algorithms. If you're math-avoidant, stick with high-level abstractions like NaCL and TLS. There's nothing wrong with that! A professor talking about and demonstrating cryptography at the level of individual algorithms is doing their class a disservice if they say \"none of the math will be on the test\". The algorithms are enough to put something together that seems like it works; the math is what you need to find out if your resulting system actually does work. It's where many of the fun bug classes live.    reply            saghm  1 day ago    | root | parent | next  [–]      I'm not sure if you're reading more into what I said than I intended, but I'm not convinced by this argument. You might have missed that this course was on security in general, not cryptography; not everything in the course was cryptographic related. That said, I'd argue that for the vast majority of software engineers the type of stuff they're dealing with can be dealt with without needing to know the math. For example, you don't need to understand the math to behind the algorithms to know that bcrypt is a reasonable password hashing algorithm and that sha1 and md5 are not, or that salts are used to mitigate issues when users reuse passwords. These are principles that you can understand at a high level without fully understanding the underlying details. If anything, I think that overemphasis on requiring people to learn and understand the math has the effect of over-focusing on simpler algorithms that aren't actually what people want to be using in practice due to the fact that they're easier to teach and often foundational in conveying concepts that would need to be learned to understand the more complicated algorithms. If using cryptographic algorithms directly requires knowing the math, then I'd agree that most people shouldn't be using them directly, but I'd go further and say that a lack of libraries that are safe for people to use for software engineering without understanding the implementation is a failing of the ecosystem; as much as \"regular\" software engineering people (like myself!) can struggle with the math behind cryptography, I think that a lot of people developing cryptographic libraries struggle with building reasonable abstractions and making user-friendly APIs (which is a skill I think in general is not emphasized enough for most software engineers, to the detriment of everyone).    reply            tptacek  1 day ago    | root | parent | next  [–]      Sure. It's a failing of the ecosystem. That observation, a cup of coffee, and 1-3 years will get you a Kenny Paterson paper stunt-breaking your system. I feel where you're coming from, but, respectfully: it does not matter. My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry.    reply            saghm  1 day ago    | root | parent | next  [–]      > My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry. I'm not sure I understand what you mean here by \"something else in our industry\". Are you arguing that I'm not qualified to be a software engineer due to not understanding the math behind elliptic curves, or did you miss my repeated use of phrases like \"the vast majority of software engineers\" rather than some specialty where cryptography implementation details details are more important? If the latter, I can reassure you that I don't work in cryptography, work on any cryptographic libraries, or have any specific responsibilities related to security beyond the general idea that all software being written should be secure. If the former, I'll have to respectfully disagree, and suggest that maybe even if you aren't willing to consider that you're wrong about the math being a hard requirement for someone being qualified as a software engineer, it's worth considering that you almost certainly don't have enough information to conclude whether a stranger on the internet is qualified based on reading some of their comments.    reply            tptacek  3 hours ago    | root | parent | next  [–]      I'm certainly not saying you're not qualified to be a software engineer.    reply            syncsynchalt  1 day ago    | root | parent | prev | next  [–]      Learning X25519 isn't too hard!  See https://curves.xargs.org for the basics and https://x25519.xargs.org for some refining details.    reply            upofadown  1 day ago    | parent | prev | next  [–]      Another article from the same blog about optimizing RSA: * https://www.amazon.science/blog/formal-verification-makes-rs... RSA signature verification is already very fast and TLS doesn't use RSA for encryption anymore so the problem reduces to optimizing signing operations.    reply            fefe23  1 day ago    | prev | next  [–]      Holy shit these claims are wild!\nIt's not just a percent more performance here and there, the graphs look more like 50% more throughput on the same hardware (depending on the cpu architecture). My immediate fear was that they optimized away the security features like absence of timing side channels, but they say they still have those. They also claim to have formal proof of correctness, which is even more amazing, because they are not doing it on a symbolic level but on a machine instruction level. Apparently they tought their reasoning system the semantics of all the CPU instructions used in the assembler implementation. I'll still wait what djb has to say about this, but it looks freaking amazing to me.    reply            jonmon6691  1 day ago    | prev | next  [–]      I'm assuming when they say that this improves user experience, that it implies the use case is primarily TLS. In which case store-now-decrypt-later attacks are already considered an urgent threat with regard to post quantum crypto. With FIPS 203 being released and Chrome is already using an implementation based on the draft standard, this seems like this algo (at least for TLS) should be on its way out.    reply            dlgeek  1 day ago    | parent | next  [–]      The industry is moving to a hybrid that mixes classic crypto (including ECC) with post-quantum crypto. AWS has even turned this on in some places - https://aws.amazon.com/about-aws/whats-new/2022/03/aws-kms-a... from 2022 and https://docs.aws.amazon.com/kms/latest/developerguide/pqtls.... for some details.    reply            jonmon6691  1 day ago    | root | parent | next  [–]      Thanks I forgot about that. So if understand it right, the idea is to provide some insurance in the case that these relatively young algorithms are broken as they get exposed to more and more cryptanalysis    reply            adgjlsfhk1  1 day ago    | parent | prev | next  [–]      No one other than NIST is recommending phasing out pre-quantum crypto. Everyone else is using a combination of pre-quantum and post-quantum because trust in the security and robustness of the post-quantum ecosystem is fairly low.    reply            webXL  1 day ago    | prev | next  [–]      Why don't they just focus on making a Gravitron variant with those algorithms in the circuitry?    reply            londons_explore  1 day ago    | prev  [–]      Does 25519 suffer from key/data-dependant execution time? Is this implementation resistant to that? If it isn't, it's kinda a footgun which shouldn't be published for general use.    reply            syncsynchalt  1 day ago    | parent | next  [–]      Curve25519 is designed to be resistant to timing attacks, such as clamping the 254th bit in x25519 keys to 1 so that implementors can not optimize away a multiplication round. That doesn't mean that this implementation doesn't have timing attacks, but the implementors claim they chose mechanisms which should be constant-time.    reply            vitus  1 day ago    | parent | prev  [–]      > Does 25519 suffer from key/data-dependant execution time? I mean, when implemented naively, yes, but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. From the article: > We also do our best to execute the algorithms in constant time, to thwart side-channel attacks that infer secret information from the durations of computations. https://github.com/awslabs/s2n-bignum (where most of the heavy lifting is done, per the article) further explicitly states that \"Each function is moreover written in a constant-time style to avoid timing side-channels.\"    reply            justinwsmith  1 day ago    | root | parent | next  [–]      The next paragraph makes a slightly stronger statement about its constant-time'ness: > Our implementations of x/Ed25519 are designed with constant time in mind. They perform exactly the same sequence of basic CPU instructions regardless of the input values, and they avoid any CPU instructions that might have data-dependent timing.    reply            deathanatos  1 day ago    | root | parent | prev  [–]      > but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. When I see CVE-fests like — https://people.redhat.com/~hkario/marvin/ — … I just do not come away with that impression. [Widely used] Cryptographic Rust crates offering \"constant time\" operations in \"pure Rust\" — but Rust has no primitives for doing constant time operations , so it's only through hopes and prayers that it might actually work, and with no guarantee anywhere that it actually should . (Other, less timing attack related stuff, but e.g., major companies still not supporting anything beyond RSA.)    reply              Guidelines | FAQ | Lists | API | Security | Legal | Apply to YC | Contact    Search:     Hacker News  new | past | comments | ask | show | jobs | submit   login     Hacker News  new | past | comments | ask | show | jobs | submit   login     Hacker News  new | past | comments | ask | show | jobs | submit   login     Hacker News  new | past | comments | ask | show | jobs | submit   login     Hacker News  new | past | comments | ask | show | jobs | submit   login     Hacker News  new | past | comments | ask | show | jobs | submit  Hacker News  new | past | comments | ask | show | jobs | submit  Hacker News Hacker News new past comments ask show jobs submit  login   login  login      Better-performing “25519” elliptic-curve cryptography ( amazon.science )   212 points by lemaudit  1 day ago   | hide | past | favorite | 87 comments                         SEJeff  1 day ago    | next  [–]      The firedancer team at one of the better HFT firms wrote an AVX512 optimized implementation of ed25519 and X25519 that’s significantly faster than OpenSSL. https://github.com/firedancer-io/firedancer/pull/716 Ditto for sha256: https://github.com/firedancer-io/firedancer/pull/778 And sha512: https://github.com/firedancer-io/firedancer/pull/760 If you’re an optimization nerd, this codebase is wild.    reply            syzygyhack  1 day ago    | parent | next  [–]      I laughed a little at calling Firedancer contributors \"a team at a HFT firm\". Not that you are technically wrong, not at all, that's where Jump came from. It's just that this is all completely blockchain-driven optimization, but the b-word is so dirty now that we've gotta go back to using TradFi for the rep.    reply            SEJeff  1 day ago    | root | parent | next  [–]      It’s an optimization in hashing algorithms that is around twice as fast as the ones Amazon is posting in thus article for the same eliptic curves. If the Amazon improvements are hacker news worthy (they are) this seems reasonable contextually. Also, I worked for Jump for almost 12 years :)    reply            webXL  1 day ago    | root | parent | prev | next  [–]      What makes the “b-word” dirty?    reply            SEJeff  1 day ago    | root | parent | next  [–]      I didn’t use it because I didn’t find it relevant. They’re using hashing and EC algorithms and they’re improving them.    reply            jandrese  1 day ago    | root | parent | prev | next  [–]      It's hard to separate from the sea of grifters, con men, cranks, and scammers that infest the domain.  Just using the word is a yellow flag that you might be some kind of whacko, even if all you really want to talk about is the math. People have to forever be on guard that you might at any point pivot to all taxation is theft or how you have formed your own micro nation that consists entirely of yourself and thus have diplomatic immunity from all prosecution.  Because it happens.  Or maybe you have a once in a lifetime deal to buy this receipt like object for some hideous art that is guaranteed to appreciate in value millions of percent.  It's just the crowd that has aggregated around crypto currencies includes a lot of untrustworthy people.    reply            webXL  1 day ago    | root | parent | next  [–]      Why do people need to be on guard for those beliefs? People should be critical thinkers and not thought police. Granted, there are all kinds of whackos in crypto, but we should only be concerned about the immoral ones trying to scam us out of our money: SBF, Do-Kwon, and the like.    reply            sweeter  22 hours ago    | root | parent | next  [–]      people are legitimately buying farming land in the US and currently suing farmers for \"anti-trust\" for refusing to sell them their land so that they can quite literally create a crypto based sovereign micro-nation of wealthy tech VC's. [1] and I think that is a selfish, vile and delusional thing to do. It has nothing to do with \"thought police\" its as simple as looking at the impact of their actions and beliefs and making the decision to reject that way of thinking and way of life. 1: https://www.youtube.com/watch?v=PHlcAx-I0oY    reply            ShroudedNight  1 day ago    | root | parent | prev | next  [–]      The trough of disillusionment carved out by grifters burning the peat of enthusiasm unsustainably.    reply            nly  1 day ago    | parent | prev | next  [–]      A lot of slowness comes typically comes from wanting to avoid methods that enable side-channel timing attacks    reply            inopinatus  1 day ago    | parent | prev | next  [–]      I see they learned clang’s dirty little secret over intrinsics viz. that in producing the IR it deviates (sometimes dramatically when AVX-512 is concerned) from the documented opcodes and the results are inevitably detrimental.    reply            astrange  1 day ago    | root | parent | next  [–]      This is why ffmpeg uses assembly, and people get extremely mad when you say it's done for a reason, because they always want to come up with a fancier abstraction (usually cross-platform) which then defeats the purpose because it doesn't actually work. nb those abstractions do make sense when you can only afford to write a single implementation of the algorithm; then you're just talking about a high level programming language. But they frequently fail to achieve their goal when you're writing a second implementation for the sole purpose of being faster.    reply            electricshampo1  1 day ago    | parent | prev | next  [–]      Completely agree re: firedancer codebase. There is a level of thought and discipline wrt performance that I have never seen anywhere else.    reply            dhx  1 day ago    | root | parent | next  [–]      It's much more than just performance they've thought about. Here are some of the secure programming practices that have been implemented:  /* All the functions in this file are considered \"secure\", specifically:\n     - Constant time in the input, i.e. the input can be a secret[2]\n     - Small and auditable code base, incl. simple types\n     - Either, no local variables = no need to clear them before exit (most functions)\n     - Or, only static allocation + clear local variable before exit (fd_ed25519_scalar_mul_base_const_time)\n     - Clear registers via FD_FN_SENSITIVE[3]\n     - C safety\n  */ libsodium[4] implements similar mechanisms, and Linux kernel encryption code does too (example: use of kfree_sensitive)[5]. However, firedancer appears to better avoid moving secrets outside of CPU registers, and [3] explains that libraries such as libsodium have inadequate zeroisation, something which firedancer claims to improve upon. [1] https://github.com/firedancer-io/firedancer/blob/main/src/ba... [2] https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplic... [3] https://eprint.iacr.org/2023/1713 [4] https://libsodium.gitbook.io/doc/internals#security-first [5] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/lin...    reply            tptacek  1 day ago    | root | parent | next  [–]      These are table stakes for core cryptographic code, and SOT crypto code --- like the Amazon implementation this story is about --- tend at this point all to be derived from formal methods.    reply            dhx  1 day ago    | root | parent | next  [–]      As an example, the Amazon implementation doesn't refer to gcc's[1] and clang's[2] \"zero_call_used_regs\" to zeroise CPU registers upon return or exception of functions working on crypto secrets. OpenSSL doesn't either.[3] firedancer _does_ use \"zero_call_used_regs\" to allow gcc/clang to zeroise used CPU registers.[9] As another example, the Amazon implementation also doesn't refer to gcc's \"strub\" attribute which zeroises the function's stack upon return or exception of functions working on crypto secrets.[4][5] OpenSSL doesn't either.[3] firedancer _does_ use the \"strub\" attribute to allow gcc to zeroise the function's stack.[9] Is there a performance impact? [6] has the overhead at 0% for X25519 for implementing CPU register and stack zeroisation. Compiling the Linux kernel with \"CONFIG_ZERO_CALL_USED_REGS=1\" for x64_64 (impacting all kernel functions) was found to result in a 1-1.5% performance penalty.[7][8] [1] https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attribute... [2] https://clang.llvm.org/docs/AttributeReference.html#zero-cal... [3] https://github.com/openssl/openssl/discussions/24321 [4] https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Common-Type-At... [5] https://gcc.gnu.org/onlinedocs/gcc/Stack-Scrubbing.html [6] https://eprint.iacr.org/2023/1713.pdf [7] https://www.phoronix.com/review/zero-used-regs/5 [8] https://lore.kernel.org/lkml/20210505191804.4015873-1-keesco... [9] FD_FN_UNSANITIZED: https://github.com/firedancer-io/firedancer/blob/master/src/...    reply            jandrese  1 day ago    | root | parent | next  [–]      Zeroizing a register seems pretty straightforward.  Zeroizing any cache that it may have touched seems a lot more complex.  I guess that's why they work so hard to keep everything in registers.  Lucky for them we aren't in the x86 era anymore and there are a useful number of registers.  I'll need to read up on how they avoid context switches while their registers are loaded.    reply            SEJeff  1 day ago    | root | parent | prev | next  [–]      That team is full of world experts in high performance computing.    reply            pantalaimon  1 day ago    | parent | prev | next  [–]      That looks really neat, but I still don't understand what firedancer actually is - what is a validator client for Solana and why does it need it's own crypto library?    reply            SEJeff  1 day ago    | root | parent | next  [–]      It’s a new from scratch implementation of a validator for Solana the fastest blockchain by several orders of magnitude. The slowest part is signature verification so they sped up hashing to improve performance of the entire system. They follow a first principles approach (the lead has a few physics degrees) and opted to speed up the cryptography. The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. It’s a win in cryptography, much like this Amazon post is, except it’s slower than the firedancer implementation.    reply            scrlk  1 day ago    | root | parent | next  [–]      Off topic - is Firedancer going to survive Jump winding down its crypto arm? Kanav left, they liquidated a huge staked ETH position a few months ago (+ a bunch of other coins), and the SEC/CFTC is all over them for the Terra Luna fiasco.    reply            SEJeff  1 day ago    | root | parent | next  [–]      Rumors of Jump’s demise are greatly exaggerated. Check the torrent of firedancer talks at Solana Breakpoint literally next week and decide yourself. Folks have said jump is gonna die for 20+ years. They’ve been around 30ish…    reply            sangnoir  1 day ago    | root | parent | next  [–]      Parent asked a specific question about the survival of Firedancer and winding down of the crypto arm though. No demise of Jump mentioned.    reply            SEJeff  1 day ago    | root | parent | next  [–]      You will see a half dozen or so talks about firedancer and probably 35-40 or so of us total (I’m at the company that does security for firedancer, Asymmetric Research. We were founded by former jumpers). You can make the determination on your own, but there will be an obvious large showing of firedancer folks and some exciting updates for the project.    reply            caned  1 day ago    | root | parent | prev | next  [–]      > The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. For users that have AVX-512, which isn't widely available (AMD Zen 4 / Zen 5, Sapphire Rapids)...    reply            SEJeff  1 day ago    | root | parent | next  [–]      Sure, and cpus supporting it will proliferate. Shockingly to no one reading hacker news... Both software and hardware continue to improve with time generally speaking. This was a huge software improvement on hardware that supports that functionality. It is a huge win for anyone wanting to use these algorithms where they can afford hardware that supports it. We should celebrate Amazon's improvements and we should celebrate these improvements. Both are great for the future of technology, regardless of why they were initially developed. Improving tech and keeping it open source is good for all.    reply            4gotunameagain  1 day ago    | parent | prev | next  [–]      So many manhours spent on finding better ways to shovel around money and pocket what falls from the cracks. What a wasteful and unproductive enterprise, considering the vast majority of the devised improvements never see the public eye. Still, impressive work. Imagine if those brilliant minds behind this were focused somewhere else.    reply            posnet  1 day ago    | root | parent | next  [–]      The greatest minds of our generation spend their time thinking about how to: - make people click on ads - make trading algos faster - replace human artists - build more efficient killing machines - destroy any remaining concept of privacy    reply            geodel  23 hours ago    | root | parent | next  [–]      Greatest mind of previous generation made nuclear bombs and other deadly things.    reply            astrange  1 day ago    | root | parent | prev | next  [–]      Aren't the greatest mind(s) of our generation writing Terry Tao's blog posts?    reply            vladms  1 day ago    | root | parent | prev | next  [–]      This directly implies that all the people that did useful stuff (improving cancer survivability, new vaccines, renewable energy, and others) are all \"below\" the \"greatest minds of our generation\". Not to mention it also suggests there is a way to \"compare\" minds. I would not choose myself to do somethings, but that does not mean I despise automatically people choosing to.    reply            geodel  23 hours ago    | root | parent | next  [–]      I think they meant greatest minds have to be greatest money earners also. Else they are not greatest minds.    reply            4gotunameagain  1 day ago    | root | parent | prev | next  [–]      Hey, at least we had one of them working on TempleOS.    reply            toast0  1 day ago    | root | parent | prev | next  [–]      It doesn't seem wasteful and unproductive, given that the result of the HFT industry is smaller bid/ask spreads (lowering costs for all trades) and payment for order flow which is the mechanism that eliminated retail commissions and provides price improvement on many retail trades. And even so, HFT firms are making money. It might not seem like real work, but making money by reducing costs of market participants sounds like a good thing. I admit though, block trades might be harder now than before the rise of HFT. If you could do warehousing/distributing/coordinating fresh foods in a way that reduced the difference in price between the farmer and the consumer and make money doing it, that would clearly be good work.    reply            appendix-rock  1 day ago    | root | parent | prev | next  [–]      What do you work on?    reply            almostgotcaught  1 day ago    | root | parent | prev | next  [–]      I'll never be able to figure out what people get from repeating the same thing over and over. I've seen this same exact comment 1000 times on hn and I'm 100% sure you have too (indeed I believe the reason you repeat is because you've seen it and agree with it).    reply            XorNot  1 day ago    | root | parent | next  [–]      It's virtue signalling.    reply            slt2021  1 day ago    | parent | prev | next  [–]      wow amazing, nobody is gonna edit that code ever again...    reply            notfed  1 day ago    | prev | next  [–]      > The x25519 algorithm also plays a role in post-quantum safe cryptographic solutions, having been included as the classical algorithm in the TLS 1.3 and SSH hybrid scheme specifications for post-quantum key agreement. Really though? This mostly-untrue statement is the line that warrants adding hashtag #post-quantum-cryptography to the blogpost?    reply            westurner  1 day ago    | parent | next  [–]      Actually, e.g. rustls added X25519Kyber768Draft00 support this year: https://news.ycombinator.com/item?id=41534500 /?q X25519Kyber768Draft00: https://www.google.com/search?q=X25519Kyber768Draft00    reply            notfed  1 day ago    | root | parent | next  [–]      Kyber768 is the post-quantum algorithm in that example, not x25519.    reply            westurner  1 day ago    | root | parent | next  [–]      From \"OpenSSL 3.4 Alpha 1 Released with New Features\" (8 days ago) https://news.ycombinator.com/item?id=41456447#41456774 : > Someday there will probably be a TLS1.4/2.0 with PQ, and also FIPS-140 -4? > Are there additional ways to implement NIST PQ finalist algos with openssl? - open-quantum-safe/oqs-provider [implements mlkem512 through mlkem1024 and x25519_mlkem768]    reply            notfed  7 hours ago    | root | parent | next  [–]      Not sure what you're trying to say here . x25519 is objectively not PQC and never claimed to be, and this isn't debatable.    reply            westurner  6 hours ago    | root | parent | next  [–]      In this case, hybrid means \"not entirely PQ\".    reply            nanolith  1 day ago    | prev | next  [–]      The formal methods nerd in me is happy to see HOL Light being used to formally verify this implementation. I'm curious to see how closely their abstract machine models follow specific machine implementations. OOO, speculation, and deep pipelining have non-trivial impacts on potential side channels, and these vary quite a bit by stepping and architecture.    reply            holowoodman  1 day ago    | parent | next  [–]      Even worse: Each new CPU generation will need a new machine model and a reevaluation. Because OOO, speculation and all the timing behaviour are non-functional properties that frequently change due to new optimizations, different internal structuring, etc.    reply            aseipp  1 day ago    | prev | next  [–]      I was aware of s2n-bignum which is a very cool project, but apparently there is a larger sister project, aws-lc, that aims for broader set of APIs including OpenSSL compatibility, while retaining the general approach and vibe (lots of formal verification + performance work): https://github.com/aws/aws-lc That's pretty sweet. I'm currently using BoringSSL in a project as a supplement to OpenSSL (mostly because it is much easier to build for Windows users than requiring them to fiddle with msys2/vcpkg etc; the alternative is to rely on the Windows CNG API, but it lacks features like ed25519 support.) I wonder how much effort it would take to use aws-lc instead... Not that I'm that interested, BSSL is pretty good, but free performance and heavy automated verification is always nice :) Related: one of the authors of this post, John Harrison, wrote a really good book about automated theorm proving about 15 years ago while working on floating point verification at Intel -- there's still no other book quite like this one, I think https://www.cl.cam.ac.uk/~jrh13/    reply            newman314  1 day ago    | parent | next  [–]      Upon hearing about AWS-LC, I immediately thought about tying it to nginx to see if it will work. Turns out someone else has already tried: https://github.com/aws/aws-lc/issues/1827    reply            saghm  1 day ago    | prev | next  [–]      My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. At times I've run into places that require me to use RSA keys though (ironically, I seem to remember first experiencing this with AWS years back, although I honestly can't recall if this is still the case or not). If this further improvement becomes widely used, it would be interesting to see if it's enough to tip the scales towards ed25519 being more of the de facto \"default\" ssh key algorithm. My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that.    reply            scrapheap  1 day ago    | parent | next  [–]      > My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that. I wouldn't be surprised if a lot of people still use RSA for SSH keys for one or more of the following reasons: 1. A lot of tutorials about generating SSH Keys were written before ed25519, so if they follow an old tutorial they'll probably be generating an RSA key. 2. Older versions of OpenSSH, that you'd find on CentOS 7 and below, would default to RSA if you didn't specify a key type when running ssh-keygen. 3. There are some systems out there that don't support ed25519, though they are becoming rarer.  If you have to deal with those systems then you're forced to use RSA (at least for that system). 4. Some of us have been using SSH keys from way before OpenSSH add support for ed25519 keys in 2014, so any long lived SSH keys won't be ed25519 keys (wow, ed25519 has now been about in OpenSSH for over 10 years).    reply            miki123211  1 day ago    | root | parent | next  [–]      5. a lot of people (especially older people I suspect) think \"RSA\" when they hear \"public key cryptography\". I'm in my twenties and still have that reaction. I know elliptic curves exist, I even sort-of-kind-of have an awareness of how they work, but if I was asked to name one cryptosystem that used public and private keys, I'd definitely say RSA first and not elliptic curves.    reply            vitus  1 day ago    | root | parent | next  [–]      This is likely in no small part due to CS education only really teaching the mechanics of RSA (modular arithmetic, Fermat's little theorem, etc), or at least, that still seems to be the case at Berkeley. I'd guess because elliptic curve crypto requires more advanced math to reason about (more advanced group theory, at least) and doesn't map as cleanly to existing concepts that non-math-major undergrads have. cryptopals.com also doesn't cover any elliptive curve crypto until you get into the last set.    reply            tptacek  1 day ago    | root | parent | next  [–]      We didn't even cover RSA until the original last set. It's a build-up. :)    reply            throw0101b  1 day ago    | root | parent | prev | next  [–]      I would think that the (non-EC) Diffie-Hellman would also be easy enough to teach as well: exponentials and discrete log problem aren't any/much complicated than explaining factorization.    reply            pantalaimon  1 day ago    | root | parent | prev | next  [–]      > 3. There are some systems out there that don't support ed25519, though they are becoming rarer. If you have to deal with those systems then you're forced to use RSA (at least for that system). Azure Devops is a big one.    reply            Spooky23  1 day ago    | root | parent | prev | next  [–]      If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519.    reply            vitus  1 day ago    | root | parent | next  [–]      > If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519. Not even when FIPS 140-3 was (finally) finalized in 2019, and testing began in 2020? https://csrc.nist.gov/projects/cryptographic-module-validati... includes mentions of EdDSA, and Curve25519 is listed among the \"Recommended Curves for U.S. Federal Government Use\" on page 15 of https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.S... . (I guess the problem is that various crypto implementations need to get recertified under the new standard...) edit: it looks like AWS-LC [0] and boringcrypto [1] have both been validated under FIPS 140-3. Azure's OpenSSL crypto [2] has only been validated under FIPS 140-2 as far as I can tell. [0] https://csrc.nist.gov/projects/cryptographic-module-validati... [1] https://csrc.nist.gov/projects/cryptographic-module-validati... [2] https://csrc.nist.gov/projects/cryptographic-module-validati...    reply            devman0  1 day ago    | root | parent | prev | next  [–]      ed25519 is in FIPS 186-5 which meets criteria (a) for Approved Security Functions in FIPS 140-2.    reply            loudmax  1 day ago    | root | parent | prev | next  [–]      When I run `ssh-keygen`, I can remember the options `-t rsa` or `-t dsa`.  I simply cannot remember the flag `-t ed25519`.  I have to look it up every time. I just remember the flag as being vaguely similar the name of the monster robot from RoboCop.    reply            homebrewer  1 day ago    | root | parent | next  [–]      Use shell autocomplete. Even `bash-completion` suggests arguments for the key type these days:  $ ssh-keygen -t <TAB>\n  dsa   ecdsa   ecdsa-sk   ed25519   ed25519-sk  rsa `-sk` is short for \"security key\" if memory serves me right, and is used with FIDO2 hardware tokens.    reply            throw0101b  1 day ago    | root | parent | prev | next  [–]      > When I run `ssh-keygen` As of OpenSSH 9.5 the default has changed, so you don't have to specify anything:  * ssh-keygen(1): generate Ed25519 keys by default. Ed25519 public keys\n     are very convenient due to their small size. Ed25519 keys are\n     specified in RFC 8709 and OpenSSH has supported them since version 6.5\n     (January 2014). * https://www.openssh.com/txt/release-9.5    reply            saghm  1 day ago    | root | parent | next  [–]      Oh wow, I didn't know that one! I still manually type `-t ed25519` from muscle memory, I guess I don't have to now    reply            toast0  1 day ago    | parent | prev | next  [–]      > My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though.    reply            saghm  1 day ago    | root | parent | next  [–]      > My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though. Interesting! I wonder if this new algorithm is intended to help with that. I'm super curious if the smaller payload does indeed make a difference (with the current algorithm) like you mention; I know that with databases and filesystems, compression is commonly used to shift the balance from I/O to CPU due to disk writes being slow (with reduced storage size being a side benefit but not usually the main motivation), but I also know that cryptographic verification being too slow can be an anti-feature if it makes brute forcing feasible, so the amount of CPU work needed might be pretty high still.    reply            toast0  23 hours ago    | root | parent | next  [–]      On my ancient box, only including a few lines of output:  $ openssl speed rsa ecdsa\n\n                     sign    verify    sign/s verify/s\n   rsa 1024 bits 0.000117s 0.000008s   8518.7 132449.2\n   rsa 2048 bits 0.000884s 0.000025s   1130.6  39499.3\n\n                                 sign    verify    sign/s verify/s\n    256 bits ecdsa (nistp256)   0.0000s   0.0001s  33210.9  11483.0\n    384 bits ecdsa (nistp384)   0.0009s   0.0008s   1070.6   1268.9 It's 11 k verify/s for ecda vs 39k verify/s for rsa-2048. A TLS handshake needs at least one sign and verify from the server cert, plus some verifies for the signature on the cert chain (but those signatures are used over and over).    reply            stouset  1 day ago    | parent | prev | next  [–]      > anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519 That’s not really anecdotal. Generating an ed25519 key is barely more than generating a random 256-bit value. Generating an RSA key is significantly more work.    reply            saghm  1 day ago    | root | parent | next  [–]      I did say my understanding was probably naive; I didn't know the details to be able to assert anything beyond my own observation!    reply            stouset  1 day ago    | root | parent | next  [–]      Yep, not faulting you at all! I too was surprised when I found out that it’s a straight 256-bit random value with a few bits masked.    reply            saghm  1 day ago    | root | parent | next  [–]      I pretty quickly realized in college when learning about this stuff that the math was well over my head, and I shifted my focus more to understanding how to properly use cryptography rather than implement it (which turned out to be more important as a software engineer anyhow). In retrospect, I really appreciate how the professor I had in a security-focused course explicitly told us it was okay if we didn't understand the math and wouldn't be tested on it when going over how it worked.    reply            tptacek  1 day ago    | root | parent | next  [–]      Counterpoint: it's not OK to skip the math with cryptography. You may not need to power through all of Silverman's curve book (though: I don't know for sure that's true, which is why I don't call myself a cryptography engineer), but you have to get as deep into the math as you can in order to safely use cryptographic algorithms. If you're math-avoidant, stick with high-level abstractions like NaCL and TLS. There's nothing wrong with that! A professor talking about and demonstrating cryptography at the level of individual algorithms is doing their class a disservice if they say \"none of the math will be on the test\". The algorithms are enough to put something together that seems like it works; the math is what you need to find out if your resulting system actually does work. It's where many of the fun bug classes live.    reply            saghm  1 day ago    | root | parent | next  [–]      I'm not sure if you're reading more into what I said than I intended, but I'm not convinced by this argument. You might have missed that this course was on security in general, not cryptography; not everything in the course was cryptographic related. That said, I'd argue that for the vast majority of software engineers the type of stuff they're dealing with can be dealt with without needing to know the math. For example, you don't need to understand the math to behind the algorithms to know that bcrypt is a reasonable password hashing algorithm and that sha1 and md5 are not, or that salts are used to mitigate issues when users reuse passwords. These are principles that you can understand at a high level without fully understanding the underlying details. If anything, I think that overemphasis on requiring people to learn and understand the math has the effect of over-focusing on simpler algorithms that aren't actually what people want to be using in practice due to the fact that they're easier to teach and often foundational in conveying concepts that would need to be learned to understand the more complicated algorithms. If using cryptographic algorithms directly requires knowing the math, then I'd agree that most people shouldn't be using them directly, but I'd go further and say that a lack of libraries that are safe for people to use for software engineering without understanding the implementation is a failing of the ecosystem; as much as \"regular\" software engineering people (like myself!) can struggle with the math behind cryptography, I think that a lot of people developing cryptographic libraries struggle with building reasonable abstractions and making user-friendly APIs (which is a skill I think in general is not emphasized enough for most software engineers, to the detriment of everyone).    reply            tptacek  1 day ago    | root | parent | next  [–]      Sure. It's a failing of the ecosystem. That observation, a cup of coffee, and 1-3 years will get you a Kenny Paterson paper stunt-breaking your system. I feel where you're coming from, but, respectfully: it does not matter. My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry.    reply            saghm  1 day ago    | root | parent | next  [–]      > My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry. I'm not sure I understand what you mean here by \"something else in our industry\". Are you arguing that I'm not qualified to be a software engineer due to not understanding the math behind elliptic curves, or did you miss my repeated use of phrases like \"the vast majority of software engineers\" rather than some specialty where cryptography implementation details details are more important? If the latter, I can reassure you that I don't work in cryptography, work on any cryptographic libraries, or have any specific responsibilities related to security beyond the general idea that all software being written should be secure. If the former, I'll have to respectfully disagree, and suggest that maybe even if you aren't willing to consider that you're wrong about the math being a hard requirement for someone being qualified as a software engineer, it's worth considering that you almost certainly don't have enough information to conclude whether a stranger on the internet is qualified based on reading some of their comments.    reply            tptacek  3 hours ago    | root | parent | next  [–]      I'm certainly not saying you're not qualified to be a software engineer.    reply            syncsynchalt  1 day ago    | root | parent | prev | next  [–]      Learning X25519 isn't too hard!  See https://curves.xargs.org for the basics and https://x25519.xargs.org for some refining details.    reply            upofadown  1 day ago    | parent | prev | next  [–]      Another article from the same blog about optimizing RSA: * https://www.amazon.science/blog/formal-verification-makes-rs... RSA signature verification is already very fast and TLS doesn't use RSA for encryption anymore so the problem reduces to optimizing signing operations.    reply            fefe23  1 day ago    | prev | next  [–]      Holy shit these claims are wild!\nIt's not just a percent more performance here and there, the graphs look more like 50% more throughput on the same hardware (depending on the cpu architecture). My immediate fear was that they optimized away the security features like absence of timing side channels, but they say they still have those. They also claim to have formal proof of correctness, which is even more amazing, because they are not doing it on a symbolic level but on a machine instruction level. Apparently they tought their reasoning system the semantics of all the CPU instructions used in the assembler implementation. I'll still wait what djb has to say about this, but it looks freaking amazing to me.    reply            jonmon6691  1 day ago    | prev | next  [–]      I'm assuming when they say that this improves user experience, that it implies the use case is primarily TLS. In which case store-now-decrypt-later attacks are already considered an urgent threat with regard to post quantum crypto. With FIPS 203 being released and Chrome is already using an implementation based on the draft standard, this seems like this algo (at least for TLS) should be on its way out.    reply            dlgeek  1 day ago    | parent | next  [–]      The industry is moving to a hybrid that mixes classic crypto (including ECC) with post-quantum crypto. AWS has even turned this on in some places - https://aws.amazon.com/about-aws/whats-new/2022/03/aws-kms-a... from 2022 and https://docs.aws.amazon.com/kms/latest/developerguide/pqtls.... for some details.    reply            jonmon6691  1 day ago    | root | parent | next  [–]      Thanks I forgot about that. So if understand it right, the idea is to provide some insurance in the case that these relatively young algorithms are broken as they get exposed to more and more cryptanalysis    reply            adgjlsfhk1  1 day ago    | parent | prev | next  [–]      No one other than NIST is recommending phasing out pre-quantum crypto. Everyone else is using a combination of pre-quantum and post-quantum because trust in the security and robustness of the post-quantum ecosystem is fairly low.    reply            webXL  1 day ago    | prev | next  [–]      Why don't they just focus on making a Gravitron variant with those algorithms in the circuitry?    reply            londons_explore  1 day ago    | prev  [–]      Does 25519 suffer from key/data-dependant execution time? Is this implementation resistant to that? If it isn't, it's kinda a footgun which shouldn't be published for general use.    reply            syncsynchalt  1 day ago    | parent | next  [–]      Curve25519 is designed to be resistant to timing attacks, such as clamping the 254th bit in x25519 keys to 1 so that implementors can not optimize away a multiplication round. That doesn't mean that this implementation doesn't have timing attacks, but the implementors claim they chose mechanisms which should be constant-time.    reply            vitus  1 day ago    | parent | prev  [–]      > Does 25519 suffer from key/data-dependant execution time? I mean, when implemented naively, yes, but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. From the article: > We also do our best to execute the algorithms in constant time, to thwart side-channel attacks that infer secret information from the durations of computations. https://github.com/awslabs/s2n-bignum (where most of the heavy lifting is done, per the article) further explicitly states that \"Each function is moreover written in a constant-time style to avoid timing side-channels.\"    reply            justinwsmith  1 day ago    | root | parent | next  [–]      The next paragraph makes a slightly stronger statement about its constant-time'ness: > Our implementations of x/Ed25519 are designed with constant time in mind. They perform exactly the same sequence of basic CPU instructions regardless of the input values, and they avoid any CPU instructions that might have data-dependent timing.    reply            deathanatos  1 day ago    | root | parent | prev  [–]      > but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. When I see CVE-fests like — https://people.redhat.com/~hkario/marvin/ — … I just do not come away with that impression. [Widely used] Cryptographic Rust crates offering \"constant time\" operations in \"pure Rust\" — but Rust has no primitives for doing constant time operations , so it's only through hopes and prayers that it might actually work, and with no guarantee anywhere that it actually should . (Other, less timing attack related stuff, but e.g., major companies still not supporting anything beyond RSA.)    reply              Better-performing “25519” elliptic-curve cryptography ( amazon.science )   212 points by lemaudit  1 day ago   | hide | past | favorite | 87 comments                         SEJeff  1 day ago    | next  [–]      The firedancer team at one of the better HFT firms wrote an AVX512 optimized implementation of ed25519 and X25519 that’s significantly faster than OpenSSL. https://github.com/firedancer-io/firedancer/pull/716 Ditto for sha256: https://github.com/firedancer-io/firedancer/pull/778 And sha512: https://github.com/firedancer-io/firedancer/pull/760 If you’re an optimization nerd, this codebase is wild.    reply            syzygyhack  1 day ago    | parent | next  [–]      I laughed a little at calling Firedancer contributors \"a team at a HFT firm\". Not that you are technically wrong, not at all, that's where Jump came from. It's just that this is all completely blockchain-driven optimization, but the b-word is so dirty now that we've gotta go back to using TradFi for the rep.    reply            SEJeff  1 day ago    | root | parent | next  [–]      It’s an optimization in hashing algorithms that is around twice as fast as the ones Amazon is posting in thus article for the same eliptic curves. If the Amazon improvements are hacker news worthy (they are) this seems reasonable contextually. Also, I worked for Jump for almost 12 years :)    reply            webXL  1 day ago    | root | parent | prev | next  [–]      What makes the “b-word” dirty?    reply            SEJeff  1 day ago    | root | parent | next  [–]      I didn’t use it because I didn’t find it relevant. They’re using hashing and EC algorithms and they’re improving them.    reply            jandrese  1 day ago    | root | parent | prev | next  [–]      It's hard to separate from the sea of grifters, con men, cranks, and scammers that infest the domain.  Just using the word is a yellow flag that you might be some kind of whacko, even if all you really want to talk about is the math. People have to forever be on guard that you might at any point pivot to all taxation is theft or how you have formed your own micro nation that consists entirely of yourself and thus have diplomatic immunity from all prosecution.  Because it happens.  Or maybe you have a once in a lifetime deal to buy this receipt like object for some hideous art that is guaranteed to appreciate in value millions of percent.  It's just the crowd that has aggregated around crypto currencies includes a lot of untrustworthy people.    reply            webXL  1 day ago    | root | parent | next  [–]      Why do people need to be on guard for those beliefs? People should be critical thinkers and not thought police. Granted, there are all kinds of whackos in crypto, but we should only be concerned about the immoral ones trying to scam us out of our money: SBF, Do-Kwon, and the like.    reply            sweeter  22 hours ago    | root | parent | next  [–]      people are legitimately buying farming land in the US and currently suing farmers for \"anti-trust\" for refusing to sell them their land so that they can quite literally create a crypto based sovereign micro-nation of wealthy tech VC's. [1] and I think that is a selfish, vile and delusional thing to do. It has nothing to do with \"thought police\" its as simple as looking at the impact of their actions and beliefs and making the decision to reject that way of thinking and way of life. 1: https://www.youtube.com/watch?v=PHlcAx-I0oY    reply            ShroudedNight  1 day ago    | root | parent | prev | next  [–]      The trough of disillusionment carved out by grifters burning the peat of enthusiasm unsustainably.    reply            nly  1 day ago    | parent | prev | next  [–]      A lot of slowness comes typically comes from wanting to avoid methods that enable side-channel timing attacks    reply            inopinatus  1 day ago    | parent | prev | next  [–]      I see they learned clang’s dirty little secret over intrinsics viz. that in producing the IR it deviates (sometimes dramatically when AVX-512 is concerned) from the documented opcodes and the results are inevitably detrimental.    reply            astrange  1 day ago    | root | parent | next  [–]      This is why ffmpeg uses assembly, and people get extremely mad when you say it's done for a reason, because they always want to come up with a fancier abstraction (usually cross-platform) which then defeats the purpose because it doesn't actually work. nb those abstractions do make sense when you can only afford to write a single implementation of the algorithm; then you're just talking about a high level programming language. But they frequently fail to achieve their goal when you're writing a second implementation for the sole purpose of being faster.    reply            electricshampo1  1 day ago    | parent | prev | next  [–]      Completely agree re: firedancer codebase. There is a level of thought and discipline wrt performance that I have never seen anywhere else.    reply            dhx  1 day ago    | root | parent | next  [–]      It's much more than just performance they've thought about. Here are some of the secure programming practices that have been implemented:  /* All the functions in this file are considered \"secure\", specifically:\n     - Constant time in the input, i.e. the input can be a secret[2]\n     - Small and auditable code base, incl. simple types\n     - Either, no local variables = no need to clear them before exit (most functions)\n     - Or, only static allocation + clear local variable before exit (fd_ed25519_scalar_mul_base_const_time)\n     - Clear registers via FD_FN_SENSITIVE[3]\n     - C safety\n  */ libsodium[4] implements similar mechanisms, and Linux kernel encryption code does too (example: use of kfree_sensitive)[5]. However, firedancer appears to better avoid moving secrets outside of CPU registers, and [3] explains that libraries such as libsodium have inadequate zeroisation, something which firedancer claims to improve upon. [1] https://github.com/firedancer-io/firedancer/blob/main/src/ba... [2] https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplic... [3] https://eprint.iacr.org/2023/1713 [4] https://libsodium.gitbook.io/doc/internals#security-first [5] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/lin...    reply            tptacek  1 day ago    | root | parent | next  [–]      These are table stakes for core cryptographic code, and SOT crypto code --- like the Amazon implementation this story is about --- tend at this point all to be derived from formal methods.    reply            dhx  1 day ago    | root | parent | next  [–]      As an example, the Amazon implementation doesn't refer to gcc's[1] and clang's[2] \"zero_call_used_regs\" to zeroise CPU registers upon return or exception of functions working on crypto secrets. OpenSSL doesn't either.[3] firedancer _does_ use \"zero_call_used_regs\" to allow gcc/clang to zeroise used CPU registers.[9] As another example, the Amazon implementation also doesn't refer to gcc's \"strub\" attribute which zeroises the function's stack upon return or exception of functions working on crypto secrets.[4][5] OpenSSL doesn't either.[3] firedancer _does_ use the \"strub\" attribute to allow gcc to zeroise the function's stack.[9] Is there a performance impact? [6] has the overhead at 0% for X25519 for implementing CPU register and stack zeroisation. Compiling the Linux kernel with \"CONFIG_ZERO_CALL_USED_REGS=1\" for x64_64 (impacting all kernel functions) was found to result in a 1-1.5% performance penalty.[7][8] [1] https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attribute... [2] https://clang.llvm.org/docs/AttributeReference.html#zero-cal... [3] https://github.com/openssl/openssl/discussions/24321 [4] https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Common-Type-At... [5] https://gcc.gnu.org/onlinedocs/gcc/Stack-Scrubbing.html [6] https://eprint.iacr.org/2023/1713.pdf [7] https://www.phoronix.com/review/zero-used-regs/5 [8] https://lore.kernel.org/lkml/20210505191804.4015873-1-keesco... [9] FD_FN_UNSANITIZED: https://github.com/firedancer-io/firedancer/blob/master/src/...    reply            jandrese  1 day ago    | root | parent | next  [–]      Zeroizing a register seems pretty straightforward.  Zeroizing any cache that it may have touched seems a lot more complex.  I guess that's why they work so hard to keep everything in registers.  Lucky for them we aren't in the x86 era anymore and there are a useful number of registers.  I'll need to read up on how they avoid context switches while their registers are loaded.    reply            SEJeff  1 day ago    | root | parent | prev | next  [–]      That team is full of world experts in high performance computing.    reply            pantalaimon  1 day ago    | parent | prev | next  [–]      That looks really neat, but I still don't understand what firedancer actually is - what is a validator client for Solana and why does it need it's own crypto library?    reply            SEJeff  1 day ago    | root | parent | next  [–]      It’s a new from scratch implementation of a validator for Solana the fastest blockchain by several orders of magnitude. The slowest part is signature verification so they sped up hashing to improve performance of the entire system. They follow a first principles approach (the lead has a few physics degrees) and opted to speed up the cryptography. The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. It’s a win in cryptography, much like this Amazon post is, except it’s slower than the firedancer implementation.    reply            scrlk  1 day ago    | root | parent | next  [–]      Off topic - is Firedancer going to survive Jump winding down its crypto arm? Kanav left, they liquidated a huge staked ETH position a few months ago (+ a bunch of other coins), and the SEC/CFTC is all over them for the Terra Luna fiasco.    reply            SEJeff  1 day ago    | root | parent | next  [–]      Rumors of Jump’s demise are greatly exaggerated. Check the torrent of firedancer talks at Solana Breakpoint literally next week and decide yourself. Folks have said jump is gonna die for 20+ years. They’ve been around 30ish…    reply            sangnoir  1 day ago    | root | parent | next  [–]      Parent asked a specific question about the survival of Firedancer and winding down of the crypto arm though. No demise of Jump mentioned.    reply            SEJeff  1 day ago    | root | parent | next  [–]      You will see a half dozen or so talks about firedancer and probably 35-40 or so of us total (I’m at the company that does security for firedancer, Asymmetric Research. We were founded by former jumpers). You can make the determination on your own, but there will be an obvious large showing of firedancer folks and some exciting updates for the project.    reply            caned  1 day ago    | root | parent | prev | next  [–]      > The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. For users that have AVX-512, which isn't widely available (AMD Zen 4 / Zen 5, Sapphire Rapids)...    reply            SEJeff  1 day ago    | root | parent | next  [–]      Sure, and cpus supporting it will proliferate. Shockingly to no one reading hacker news... Both software and hardware continue to improve with time generally speaking. This was a huge software improvement on hardware that supports that functionality. It is a huge win for anyone wanting to use these algorithms where they can afford hardware that supports it. We should celebrate Amazon's improvements and we should celebrate these improvements. Both are great for the future of technology, regardless of why they were initially developed. Improving tech and keeping it open source is good for all.    reply            4gotunameagain  1 day ago    | parent | prev | next  [–]      So many manhours spent on finding better ways to shovel around money and pocket what falls from the cracks. What a wasteful and unproductive enterprise, considering the vast majority of the devised improvements never see the public eye. Still, impressive work. Imagine if those brilliant minds behind this were focused somewhere else.    reply            posnet  1 day ago    | root | parent | next  [–]      The greatest minds of our generation spend their time thinking about how to: - make people click on ads - make trading algos faster - replace human artists - build more efficient killing machines - destroy any remaining concept of privacy    reply            geodel  23 hours ago    | root | parent | next  [–]      Greatest mind of previous generation made nuclear bombs and other deadly things.    reply            astrange  1 day ago    | root | parent | prev | next  [–]      Aren't the greatest mind(s) of our generation writing Terry Tao's blog posts?    reply            vladms  1 day ago    | root | parent | prev | next  [–]      This directly implies that all the people that did useful stuff (improving cancer survivability, new vaccines, renewable energy, and others) are all \"below\" the \"greatest minds of our generation\". Not to mention it also suggests there is a way to \"compare\" minds. I would not choose myself to do somethings, but that does not mean I despise automatically people choosing to.    reply            geodel  23 hours ago    | root | parent | next  [–]      I think they meant greatest minds have to be greatest money earners also. Else they are not greatest minds.    reply            4gotunameagain  1 day ago    | root | parent | prev | next  [–]      Hey, at least we had one of them working on TempleOS.    reply            toast0  1 day ago    | root | parent | prev | next  [–]      It doesn't seem wasteful and unproductive, given that the result of the HFT industry is smaller bid/ask spreads (lowering costs for all trades) and payment for order flow which is the mechanism that eliminated retail commissions and provides price improvement on many retail trades. And even so, HFT firms are making money. It might not seem like real work, but making money by reducing costs of market participants sounds like a good thing. I admit though, block trades might be harder now than before the rise of HFT. If you could do warehousing/distributing/coordinating fresh foods in a way that reduced the difference in price between the farmer and the consumer and make money doing it, that would clearly be good work.    reply            appendix-rock  1 day ago    | root | parent | prev | next  [–]      What do you work on?    reply            almostgotcaught  1 day ago    | root | parent | prev | next  [–]      I'll never be able to figure out what people get from repeating the same thing over and over. I've seen this same exact comment 1000 times on hn and I'm 100% sure you have too (indeed I believe the reason you repeat is because you've seen it and agree with it).    reply            XorNot  1 day ago    | root | parent | next  [–]      It's virtue signalling.    reply            slt2021  1 day ago    | parent | prev | next  [–]      wow amazing, nobody is gonna edit that code ever again...    reply            notfed  1 day ago    | prev | next  [–]      > The x25519 algorithm also plays a role in post-quantum safe cryptographic solutions, having been included as the classical algorithm in the TLS 1.3 and SSH hybrid scheme specifications for post-quantum key agreement. Really though? This mostly-untrue statement is the line that warrants adding hashtag #post-quantum-cryptography to the blogpost?    reply            westurner  1 day ago    | parent | next  [–]      Actually, e.g. rustls added X25519Kyber768Draft00 support this year: https://news.ycombinator.com/item?id=41534500 /?q X25519Kyber768Draft00: https://www.google.com/search?q=X25519Kyber768Draft00    reply            notfed  1 day ago    | root | parent | next  [–]      Kyber768 is the post-quantum algorithm in that example, not x25519.    reply            westurner  1 day ago    | root | parent | next  [–]      From \"OpenSSL 3.4 Alpha 1 Released with New Features\" (8 days ago) https://news.ycombinator.com/item?id=41456447#41456774 : > Someday there will probably be a TLS1.4/2.0 with PQ, and also FIPS-140 -4? > Are there additional ways to implement NIST PQ finalist algos with openssl? - open-quantum-safe/oqs-provider [implements mlkem512 through mlkem1024 and x25519_mlkem768]    reply            notfed  7 hours ago    | root | parent | next  [–]      Not sure what you're trying to say here . x25519 is objectively not PQC and never claimed to be, and this isn't debatable.    reply            westurner  6 hours ago    | root | parent | next  [–]      In this case, hybrid means \"not entirely PQ\".    reply            nanolith  1 day ago    | prev | next  [–]      The formal methods nerd in me is happy to see HOL Light being used to formally verify this implementation. I'm curious to see how closely their abstract machine models follow specific machine implementations. OOO, speculation, and deep pipelining have non-trivial impacts on potential side channels, and these vary quite a bit by stepping and architecture.    reply            holowoodman  1 day ago    | parent | next  [–]      Even worse: Each new CPU generation will need a new machine model and a reevaluation. Because OOO, speculation and all the timing behaviour are non-functional properties that frequently change due to new optimizations, different internal structuring, etc.    reply            aseipp  1 day ago    | prev | next  [–]      I was aware of s2n-bignum which is a very cool project, but apparently there is a larger sister project, aws-lc, that aims for broader set of APIs including OpenSSL compatibility, while retaining the general approach and vibe (lots of formal verification + performance work): https://github.com/aws/aws-lc That's pretty sweet. I'm currently using BoringSSL in a project as a supplement to OpenSSL (mostly because it is much easier to build for Windows users than requiring them to fiddle with msys2/vcpkg etc; the alternative is to rely on the Windows CNG API, but it lacks features like ed25519 support.) I wonder how much effort it would take to use aws-lc instead... Not that I'm that interested, BSSL is pretty good, but free performance and heavy automated verification is always nice :) Related: one of the authors of this post, John Harrison, wrote a really good book about automated theorm proving about 15 years ago while working on floating point verification at Intel -- there's still no other book quite like this one, I think https://www.cl.cam.ac.uk/~jrh13/    reply            newman314  1 day ago    | parent | next  [–]      Upon hearing about AWS-LC, I immediately thought about tying it to nginx to see if it will work. Turns out someone else has already tried: https://github.com/aws/aws-lc/issues/1827    reply            saghm  1 day ago    | prev | next  [–]      My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. At times I've run into places that require me to use RSA keys though (ironically, I seem to remember first experiencing this with AWS years back, although I honestly can't recall if this is still the case or not). If this further improvement becomes widely used, it would be interesting to see if it's enough to tip the scales towards ed25519 being more of the de facto \"default\" ssh key algorithm. My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that.    reply            scrapheap  1 day ago    | parent | next  [–]      > My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that. I wouldn't be surprised if a lot of people still use RSA for SSH keys for one or more of the following reasons: 1. A lot of tutorials about generating SSH Keys were written before ed25519, so if they follow an old tutorial they'll probably be generating an RSA key. 2. Older versions of OpenSSH, that you'd find on CentOS 7 and below, would default to RSA if you didn't specify a key type when running ssh-keygen. 3. There are some systems out there that don't support ed25519, though they are becoming rarer.  If you have to deal with those systems then you're forced to use RSA (at least for that system). 4. Some of us have been using SSH keys from way before OpenSSH add support for ed25519 keys in 2014, so any long lived SSH keys won't be ed25519 keys (wow, ed25519 has now been about in OpenSSH for over 10 years).    reply            miki123211  1 day ago    | root | parent | next  [–]      5. a lot of people (especially older people I suspect) think \"RSA\" when they hear \"public key cryptography\". I'm in my twenties and still have that reaction. I know elliptic curves exist, I even sort-of-kind-of have an awareness of how they work, but if I was asked to name one cryptosystem that used public and private keys, I'd definitely say RSA first and not elliptic curves.    reply            vitus  1 day ago    | root | parent | next  [–]      This is likely in no small part due to CS education only really teaching the mechanics of RSA (modular arithmetic, Fermat's little theorem, etc), or at least, that still seems to be the case at Berkeley. I'd guess because elliptic curve crypto requires more advanced math to reason about (more advanced group theory, at least) and doesn't map as cleanly to existing concepts that non-math-major undergrads have. cryptopals.com also doesn't cover any elliptive curve crypto until you get into the last set.    reply            tptacek  1 day ago    | root | parent | next  [–]      We didn't even cover RSA until the original last set. It's a build-up. :)    reply            throw0101b  1 day ago    | root | parent | prev | next  [–]      I would think that the (non-EC) Diffie-Hellman would also be easy enough to teach as well: exponentials and discrete log problem aren't any/much complicated than explaining factorization.    reply            pantalaimon  1 day ago    | root | parent | prev | next  [–]      > 3. There are some systems out there that don't support ed25519, though they are becoming rarer. If you have to deal with those systems then you're forced to use RSA (at least for that system). Azure Devops is a big one.    reply            Spooky23  1 day ago    | root | parent | prev | next  [–]      If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519.    reply            vitus  1 day ago    | root | parent | next  [–]      > If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519. Not even when FIPS 140-3 was (finally) finalized in 2019, and testing began in 2020? https://csrc.nist.gov/projects/cryptographic-module-validati... includes mentions of EdDSA, and Curve25519 is listed among the \"Recommended Curves for U.S. Federal Government Use\" on page 15 of https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.S... . (I guess the problem is that various crypto implementations need to get recertified under the new standard...) edit: it looks like AWS-LC [0] and boringcrypto [1] have both been validated under FIPS 140-3. Azure's OpenSSL crypto [2] has only been validated under FIPS 140-2 as far as I can tell. [0] https://csrc.nist.gov/projects/cryptographic-module-validati... [1] https://csrc.nist.gov/projects/cryptographic-module-validati... [2] https://csrc.nist.gov/projects/cryptographic-module-validati...    reply            devman0  1 day ago    | root | parent | prev | next  [–]      ed25519 is in FIPS 186-5 which meets criteria (a) for Approved Security Functions in FIPS 140-2.    reply            loudmax  1 day ago    | root | parent | prev | next  [–]      When I run `ssh-keygen`, I can remember the options `-t rsa` or `-t dsa`.  I simply cannot remember the flag `-t ed25519`.  I have to look it up every time. I just remember the flag as being vaguely similar the name of the monster robot from RoboCop.    reply            homebrewer  1 day ago    | root | parent | next  [–]      Use shell autocomplete. Even `bash-completion` suggests arguments for the key type these days:  $ ssh-keygen -t <TAB>\n  dsa   ecdsa   ecdsa-sk   ed25519   ed25519-sk  rsa `-sk` is short for \"security key\" if memory serves me right, and is used with FIDO2 hardware tokens.    reply            throw0101b  1 day ago    | root | parent | prev | next  [–]      > When I run `ssh-keygen` As of OpenSSH 9.5 the default has changed, so you don't have to specify anything:  * ssh-keygen(1): generate Ed25519 keys by default. Ed25519 public keys\n     are very convenient due to their small size. Ed25519 keys are\n     specified in RFC 8709 and OpenSSH has supported them since version 6.5\n     (January 2014). * https://www.openssh.com/txt/release-9.5    reply            saghm  1 day ago    | root | parent | next  [–]      Oh wow, I didn't know that one! I still manually type `-t ed25519` from muscle memory, I guess I don't have to now    reply            toast0  1 day ago    | parent | prev | next  [–]      > My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though.    reply            saghm  1 day ago    | root | parent | next  [–]      > My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though. Interesting! I wonder if this new algorithm is intended to help with that. I'm super curious if the smaller payload does indeed make a difference (with the current algorithm) like you mention; I know that with databases and filesystems, compression is commonly used to shift the balance from I/O to CPU due to disk writes being slow (with reduced storage size being a side benefit but not usually the main motivation), but I also know that cryptographic verification being too slow can be an anti-feature if it makes brute forcing feasible, so the amount of CPU work needed might be pretty high still.    reply            toast0  23 hours ago    | root | parent | next  [–]      On my ancient box, only including a few lines of output:  $ openssl speed rsa ecdsa\n\n                     sign    verify    sign/s verify/s\n   rsa 1024 bits 0.000117s 0.000008s   8518.7 132449.2\n   rsa 2048 bits 0.000884s 0.000025s   1130.6  39499.3\n\n                                 sign    verify    sign/s verify/s\n    256 bits ecdsa (nistp256)   0.0000s   0.0001s  33210.9  11483.0\n    384 bits ecdsa (nistp384)   0.0009s   0.0008s   1070.6   1268.9 It's 11 k verify/s for ecda vs 39k verify/s for rsa-2048. A TLS handshake needs at least one sign and verify from the server cert, plus some verifies for the signature on the cert chain (but those signatures are used over and over).    reply            stouset  1 day ago    | parent | prev | next  [–]      > anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519 That’s not really anecdotal. Generating an ed25519 key is barely more than generating a random 256-bit value. Generating an RSA key is significantly more work.    reply            saghm  1 day ago    | root | parent | next  [–]      I did say my understanding was probably naive; I didn't know the details to be able to assert anything beyond my own observation!    reply            stouset  1 day ago    | root | parent | next  [–]      Yep, not faulting you at all! I too was surprised when I found out that it’s a straight 256-bit random value with a few bits masked.    reply            saghm  1 day ago    | root | parent | next  [–]      I pretty quickly realized in college when learning about this stuff that the math was well over my head, and I shifted my focus more to understanding how to properly use cryptography rather than implement it (which turned out to be more important as a software engineer anyhow). In retrospect, I really appreciate how the professor I had in a security-focused course explicitly told us it was okay if we didn't understand the math and wouldn't be tested on it when going over how it worked.    reply            tptacek  1 day ago    | root | parent | next  [–]      Counterpoint: it's not OK to skip the math with cryptography. You may not need to power through all of Silverman's curve book (though: I don't know for sure that's true, which is why I don't call myself a cryptography engineer), but you have to get as deep into the math as you can in order to safely use cryptographic algorithms. If you're math-avoidant, stick with high-level abstractions like NaCL and TLS. There's nothing wrong with that! A professor talking about and demonstrating cryptography at the level of individual algorithms is doing their class a disservice if they say \"none of the math will be on the test\". The algorithms are enough to put something together that seems like it works; the math is what you need to find out if your resulting system actually does work. It's where many of the fun bug classes live.    reply            saghm  1 day ago    | root | parent | next  [–]      I'm not sure if you're reading more into what I said than I intended, but I'm not convinced by this argument. You might have missed that this course was on security in general, not cryptography; not everything in the course was cryptographic related. That said, I'd argue that for the vast majority of software engineers the type of stuff they're dealing with can be dealt with without needing to know the math. For example, you don't need to understand the math to behind the algorithms to know that bcrypt is a reasonable password hashing algorithm and that sha1 and md5 are not, or that salts are used to mitigate issues when users reuse passwords. These are principles that you can understand at a high level without fully understanding the underlying details. If anything, I think that overemphasis on requiring people to learn and understand the math has the effect of over-focusing on simpler algorithms that aren't actually what people want to be using in practice due to the fact that they're easier to teach and often foundational in conveying concepts that would need to be learned to understand the more complicated algorithms. If using cryptographic algorithms directly requires knowing the math, then I'd agree that most people shouldn't be using them directly, but I'd go further and say that a lack of libraries that are safe for people to use for software engineering without understanding the implementation is a failing of the ecosystem; as much as \"regular\" software engineering people (like myself!) can struggle with the math behind cryptography, I think that a lot of people developing cryptographic libraries struggle with building reasonable abstractions and making user-friendly APIs (which is a skill I think in general is not emphasized enough for most software engineers, to the detriment of everyone).    reply            tptacek  1 day ago    | root | parent | next  [–]      Sure. It's a failing of the ecosystem. That observation, a cup of coffee, and 1-3 years will get you a Kenny Paterson paper stunt-breaking your system. I feel where you're coming from, but, respectfully: it does not matter. My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry.    reply            saghm  1 day ago    | root | parent | next  [–]      > My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry. I'm not sure I understand what you mean here by \"something else in our industry\". Are you arguing that I'm not qualified to be a software engineer due to not understanding the math behind elliptic curves, or did you miss my repeated use of phrases like \"the vast majority of software engineers\" rather than some specialty where cryptography implementation details details are more important? If the latter, I can reassure you that I don't work in cryptography, work on any cryptographic libraries, or have any specific responsibilities related to security beyond the general idea that all software being written should be secure. If the former, I'll have to respectfully disagree, and suggest that maybe even if you aren't willing to consider that you're wrong about the math being a hard requirement for someone being qualified as a software engineer, it's worth considering that you almost certainly don't have enough information to conclude whether a stranger on the internet is qualified based on reading some of their comments.    reply            tptacek  3 hours ago    | root | parent | next  [–]      I'm certainly not saying you're not qualified to be a software engineer.    reply            syncsynchalt  1 day ago    | root | parent | prev | next  [–]      Learning X25519 isn't too hard!  See https://curves.xargs.org for the basics and https://x25519.xargs.org for some refining details.    reply            upofadown  1 day ago    | parent | prev | next  [–]      Another article from the same blog about optimizing RSA: * https://www.amazon.science/blog/formal-verification-makes-rs... RSA signature verification is already very fast and TLS doesn't use RSA for encryption anymore so the problem reduces to optimizing signing operations.    reply            fefe23  1 day ago    | prev | next  [–]      Holy shit these claims are wild!\nIt's not just a percent more performance here and there, the graphs look more like 50% more throughput on the same hardware (depending on the cpu architecture). My immediate fear was that they optimized away the security features like absence of timing side channels, but they say they still have those. They also claim to have formal proof of correctness, which is even more amazing, because they are not doing it on a symbolic level but on a machine instruction level. Apparently they tought their reasoning system the semantics of all the CPU instructions used in the assembler implementation. I'll still wait what djb has to say about this, but it looks freaking amazing to me.    reply            jonmon6691  1 day ago    | prev | next  [–]      I'm assuming when they say that this improves user experience, that it implies the use case is primarily TLS. In which case store-now-decrypt-later attacks are already considered an urgent threat with regard to post quantum crypto. With FIPS 203 being released and Chrome is already using an implementation based on the draft standard, this seems like this algo (at least for TLS) should be on its way out.    reply            dlgeek  1 day ago    | parent | next  [–]      The industry is moving to a hybrid that mixes classic crypto (including ECC) with post-quantum crypto. AWS has even turned this on in some places - https://aws.amazon.com/about-aws/whats-new/2022/03/aws-kms-a... from 2022 and https://docs.aws.amazon.com/kms/latest/developerguide/pqtls.... for some details.    reply            jonmon6691  1 day ago    | root | parent | next  [–]      Thanks I forgot about that. So if understand it right, the idea is to provide some insurance in the case that these relatively young algorithms are broken as they get exposed to more and more cryptanalysis    reply            adgjlsfhk1  1 day ago    | parent | prev | next  [–]      No one other than NIST is recommending phasing out pre-quantum crypto. Everyone else is using a combination of pre-quantum and post-quantum because trust in the security and robustness of the post-quantum ecosystem is fairly low.    reply            webXL  1 day ago    | prev | next  [–]      Why don't they just focus on making a Gravitron variant with those algorithms in the circuitry?    reply            londons_explore  1 day ago    | prev  [–]      Does 25519 suffer from key/data-dependant execution time? Is this implementation resistant to that? If it isn't, it's kinda a footgun which shouldn't be published for general use.    reply            syncsynchalt  1 day ago    | parent | next  [–]      Curve25519 is designed to be resistant to timing attacks, such as clamping the 254th bit in x25519 keys to 1 so that implementors can not optimize away a multiplication round. That doesn't mean that this implementation doesn't have timing attacks, but the implementors claim they chose mechanisms which should be constant-time.    reply            vitus  1 day ago    | parent | prev  [–]      > Does 25519 suffer from key/data-dependant execution time? I mean, when implemented naively, yes, but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. From the article: > We also do our best to execute the algorithms in constant time, to thwart side-channel attacks that infer secret information from the durations of computations. https://github.com/awslabs/s2n-bignum (where most of the heavy lifting is done, per the article) further explicitly states that \"Each function is moreover written in a constant-time style to avoid timing side-channels.\"    reply            justinwsmith  1 day ago    | root | parent | next  [–]      The next paragraph makes a slightly stronger statement about its constant-time'ness: > Our implementations of x/Ed25519 are designed with constant time in mind. They perform exactly the same sequence of basic CPU instructions regardless of the input values, and they avoid any CPU instructions that might have data-dependent timing.    reply            deathanatos  1 day ago    | root | parent | prev  [–]      > but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. When I see CVE-fests like — https://people.redhat.com/~hkario/marvin/ — … I just do not come away with that impression. [Widely used] Cryptographic Rust crates offering \"constant time\" operations in \"pure Rust\" — but Rust has no primitives for doing constant time operations , so it's only through hopes and prayers that it might actually work, and with no guarantee anywhere that it actually should . (Other, less timing attack related stuff, but e.g., major companies still not supporting anything beyond RSA.)    reply              Better-performing “25519” elliptic-curve cryptography ( amazon.science )   212 points by lemaudit  1 day ago   | hide | past | favorite | 87 comments                   Better-performing “25519” elliptic-curve cryptography ( amazon.science )   212 points by lemaudit  1 day ago   | hide | past | favorite | 87 comments                   Better-performing “25519” elliptic-curve cryptography ( amazon.science )     Better-performing “25519” elliptic-curve cryptography ( amazon.science ) Better-performing “25519” elliptic-curve cryptography ( amazon.science ) Better-performing “25519” elliptic-curve cryptography ( amazon.science ) amazon.science amazon.science   212 points by lemaudit  1 day ago   | hide | past | favorite | 87 comments    212 points by lemaudit  1 day ago   | hide | past | favorite | 87 comments    212 points by lemaudit  1 day ago   | hide | past | favorite | 87 comments  212 points lemaudit 1 day ago 1 day ago hide past favorite 87 comments                                   SEJeff  1 day ago    | next  [–]      The firedancer team at one of the better HFT firms wrote an AVX512 optimized implementation of ed25519 and X25519 that’s significantly faster than OpenSSL. https://github.com/firedancer-io/firedancer/pull/716 Ditto for sha256: https://github.com/firedancer-io/firedancer/pull/778 And sha512: https://github.com/firedancer-io/firedancer/pull/760 If you’re an optimization nerd, this codebase is wild.    reply            syzygyhack  1 day ago    | parent | next  [–]      I laughed a little at calling Firedancer contributors \"a team at a HFT firm\". Not that you are technically wrong, not at all, that's where Jump came from. It's just that this is all completely blockchain-driven optimization, but the b-word is so dirty now that we've gotta go back to using TradFi for the rep.    reply            SEJeff  1 day ago    | root | parent | next  [–]      It’s an optimization in hashing algorithms that is around twice as fast as the ones Amazon is posting in thus article for the same eliptic curves. If the Amazon improvements are hacker news worthy (they are) this seems reasonable contextually. Also, I worked for Jump for almost 12 years :)    reply            webXL  1 day ago    | root | parent | prev | next  [–]      What makes the “b-word” dirty?    reply            SEJeff  1 day ago    | root | parent | next  [–]      I didn’t use it because I didn’t find it relevant. They’re using hashing and EC algorithms and they’re improving them.    reply            jandrese  1 day ago    | root | parent | prev | next  [–]      It's hard to separate from the sea of grifters, con men, cranks, and scammers that infest the domain.  Just using the word is a yellow flag that you might be some kind of whacko, even if all you really want to talk about is the math. People have to forever be on guard that you might at any point pivot to all taxation is theft or how you have formed your own micro nation that consists entirely of yourself and thus have diplomatic immunity from all prosecution.  Because it happens.  Or maybe you have a once in a lifetime deal to buy this receipt like object for some hideous art that is guaranteed to appreciate in value millions of percent.  It's just the crowd that has aggregated around crypto currencies includes a lot of untrustworthy people.    reply            webXL  1 day ago    | root | parent | next  [–]      Why do people need to be on guard for those beliefs? People should be critical thinkers and not thought police. Granted, there are all kinds of whackos in crypto, but we should only be concerned about the immoral ones trying to scam us out of our money: SBF, Do-Kwon, and the like.    reply            sweeter  22 hours ago    | root | parent | next  [–]      people are legitimately buying farming land in the US and currently suing farmers for \"anti-trust\" for refusing to sell them their land so that they can quite literally create a crypto based sovereign micro-nation of wealthy tech VC's. [1] and I think that is a selfish, vile and delusional thing to do. It has nothing to do with \"thought police\" its as simple as looking at the impact of their actions and beliefs and making the decision to reject that way of thinking and way of life. 1: https://www.youtube.com/watch?v=PHlcAx-I0oY    reply            ShroudedNight  1 day ago    | root | parent | prev | next  [–]      The trough of disillusionment carved out by grifters burning the peat of enthusiasm unsustainably.    reply            nly  1 day ago    | parent | prev | next  [–]      A lot of slowness comes typically comes from wanting to avoid methods that enable side-channel timing attacks    reply            inopinatus  1 day ago    | parent | prev | next  [–]      I see they learned clang’s dirty little secret over intrinsics viz. that in producing the IR it deviates (sometimes dramatically when AVX-512 is concerned) from the documented opcodes and the results are inevitably detrimental.    reply            astrange  1 day ago    | root | parent | next  [–]      This is why ffmpeg uses assembly, and people get extremely mad when you say it's done for a reason, because they always want to come up with a fancier abstraction (usually cross-platform) which then defeats the purpose because it doesn't actually work. nb those abstractions do make sense when you can only afford to write a single implementation of the algorithm; then you're just talking about a high level programming language. But they frequently fail to achieve their goal when you're writing a second implementation for the sole purpose of being faster.    reply            electricshampo1  1 day ago    | parent | prev | next  [–]      Completely agree re: firedancer codebase. There is a level of thought and discipline wrt performance that I have never seen anywhere else.    reply            dhx  1 day ago    | root | parent | next  [–]      It's much more than just performance they've thought about. Here are some of the secure programming practices that have been implemented:  /* All the functions in this file are considered \"secure\", specifically:\n     - Constant time in the input, i.e. the input can be a secret[2]\n     - Small and auditable code base, incl. simple types\n     - Either, no local variables = no need to clear them before exit (most functions)\n     - Or, only static allocation + clear local variable before exit (fd_ed25519_scalar_mul_base_const_time)\n     - Clear registers via FD_FN_SENSITIVE[3]\n     - C safety\n  */ libsodium[4] implements similar mechanisms, and Linux kernel encryption code does too (example: use of kfree_sensitive)[5]. However, firedancer appears to better avoid moving secrets outside of CPU registers, and [3] explains that libraries such as libsodium have inadequate zeroisation, something which firedancer claims to improve upon. [1] https://github.com/firedancer-io/firedancer/blob/main/src/ba... [2] https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplic... [3] https://eprint.iacr.org/2023/1713 [4] https://libsodium.gitbook.io/doc/internals#security-first [5] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/lin...    reply            tptacek  1 day ago    | root | parent | next  [–]      These are table stakes for core cryptographic code, and SOT crypto code --- like the Amazon implementation this story is about --- tend at this point all to be derived from formal methods.    reply            dhx  1 day ago    | root | parent | next  [–]      As an example, the Amazon implementation doesn't refer to gcc's[1] and clang's[2] \"zero_call_used_regs\" to zeroise CPU registers upon return or exception of functions working on crypto secrets. OpenSSL doesn't either.[3] firedancer _does_ use \"zero_call_used_regs\" to allow gcc/clang to zeroise used CPU registers.[9] As another example, the Amazon implementation also doesn't refer to gcc's \"strub\" attribute which zeroises the function's stack upon return or exception of functions working on crypto secrets.[4][5] OpenSSL doesn't either.[3] firedancer _does_ use the \"strub\" attribute to allow gcc to zeroise the function's stack.[9] Is there a performance impact? [6] has the overhead at 0% for X25519 for implementing CPU register and stack zeroisation. Compiling the Linux kernel with \"CONFIG_ZERO_CALL_USED_REGS=1\" for x64_64 (impacting all kernel functions) was found to result in a 1-1.5% performance penalty.[7][8] [1] https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attribute... [2] https://clang.llvm.org/docs/AttributeReference.html#zero-cal... [3] https://github.com/openssl/openssl/discussions/24321 [4] https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Common-Type-At... [5] https://gcc.gnu.org/onlinedocs/gcc/Stack-Scrubbing.html [6] https://eprint.iacr.org/2023/1713.pdf [7] https://www.phoronix.com/review/zero-used-regs/5 [8] https://lore.kernel.org/lkml/20210505191804.4015873-1-keesco... [9] FD_FN_UNSANITIZED: https://github.com/firedancer-io/firedancer/blob/master/src/...    reply            jandrese  1 day ago    | root | parent | next  [–]      Zeroizing a register seems pretty straightforward.  Zeroizing any cache that it may have touched seems a lot more complex.  I guess that's why they work so hard to keep everything in registers.  Lucky for them we aren't in the x86 era anymore and there are a useful number of registers.  I'll need to read up on how they avoid context switches while their registers are loaded.    reply            SEJeff  1 day ago    | root | parent | prev | next  [–]      That team is full of world experts in high performance computing.    reply            pantalaimon  1 day ago    | parent | prev | next  [–]      That looks really neat, but I still don't understand what firedancer actually is - what is a validator client for Solana and why does it need it's own crypto library?    reply            SEJeff  1 day ago    | root | parent | next  [–]      It’s a new from scratch implementation of a validator for Solana the fastest blockchain by several orders of magnitude. The slowest part is signature verification so they sped up hashing to improve performance of the entire system. They follow a first principles approach (the lead has a few physics degrees) and opted to speed up the cryptography. The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. It’s a win in cryptography, much like this Amazon post is, except it’s slower than the firedancer implementation.    reply            scrlk  1 day ago    | root | parent | next  [–]      Off topic - is Firedancer going to survive Jump winding down its crypto arm? Kanav left, they liquidated a huge staked ETH position a few months ago (+ a bunch of other coins), and the SEC/CFTC is all over them for the Terra Luna fiasco.    reply            SEJeff  1 day ago    | root | parent | next  [–]      Rumors of Jump’s demise are greatly exaggerated. Check the torrent of firedancer talks at Solana Breakpoint literally next week and decide yourself. Folks have said jump is gonna die for 20+ years. They’ve been around 30ish…    reply            sangnoir  1 day ago    | root | parent | next  [–]      Parent asked a specific question about the survival of Firedancer and winding down of the crypto arm though. No demise of Jump mentioned.    reply            SEJeff  1 day ago    | root | parent | next  [–]      You will see a half dozen or so talks about firedancer and probably 35-40 or so of us total (I’m at the company that does security for firedancer, Asymmetric Research. We were founded by former jumpers). You can make the determination on your own, but there will be an obvious large showing of firedancer folks and some exciting updates for the project.    reply            caned  1 day ago    | root | parent | prev | next  [–]      > The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. For users that have AVX-512, which isn't widely available (AMD Zen 4 / Zen 5, Sapphire Rapids)...    reply            SEJeff  1 day ago    | root | parent | next  [–]      Sure, and cpus supporting it will proliferate. Shockingly to no one reading hacker news... Both software and hardware continue to improve with time generally speaking. This was a huge software improvement on hardware that supports that functionality. It is a huge win for anyone wanting to use these algorithms where they can afford hardware that supports it. We should celebrate Amazon's improvements and we should celebrate these improvements. Both are great for the future of technology, regardless of why they were initially developed. Improving tech and keeping it open source is good for all.    reply            4gotunameagain  1 day ago    | parent | prev | next  [–]      So many manhours spent on finding better ways to shovel around money and pocket what falls from the cracks. What a wasteful and unproductive enterprise, considering the vast majority of the devised improvements never see the public eye. Still, impressive work. Imagine if those brilliant minds behind this were focused somewhere else.    reply            posnet  1 day ago    | root | parent | next  [–]      The greatest minds of our generation spend their time thinking about how to: - make people click on ads - make trading algos faster - replace human artists - build more efficient killing machines - destroy any remaining concept of privacy    reply            geodel  23 hours ago    | root | parent | next  [–]      Greatest mind of previous generation made nuclear bombs and other deadly things.    reply            astrange  1 day ago    | root | parent | prev | next  [–]      Aren't the greatest mind(s) of our generation writing Terry Tao's blog posts?    reply            vladms  1 day ago    | root | parent | prev | next  [–]      This directly implies that all the people that did useful stuff (improving cancer survivability, new vaccines, renewable energy, and others) are all \"below\" the \"greatest minds of our generation\". Not to mention it also suggests there is a way to \"compare\" minds. I would not choose myself to do somethings, but that does not mean I despise automatically people choosing to.    reply            geodel  23 hours ago    | root | parent | next  [–]      I think they meant greatest minds have to be greatest money earners also. Else they are not greatest minds.    reply            4gotunameagain  1 day ago    | root | parent | prev | next  [–]      Hey, at least we had one of them working on TempleOS.    reply            toast0  1 day ago    | root | parent | prev | next  [–]      It doesn't seem wasteful and unproductive, given that the result of the HFT industry is smaller bid/ask spreads (lowering costs for all trades) and payment for order flow which is the mechanism that eliminated retail commissions and provides price improvement on many retail trades. And even so, HFT firms are making money. It might not seem like real work, but making money by reducing costs of market participants sounds like a good thing. I admit though, block trades might be harder now than before the rise of HFT. If you could do warehousing/distributing/coordinating fresh foods in a way that reduced the difference in price between the farmer and the consumer and make money doing it, that would clearly be good work.    reply            appendix-rock  1 day ago    | root | parent | prev | next  [–]      What do you work on?    reply            almostgotcaught  1 day ago    | root | parent | prev | next  [–]      I'll never be able to figure out what people get from repeating the same thing over and over. I've seen this same exact comment 1000 times on hn and I'm 100% sure you have too (indeed I believe the reason you repeat is because you've seen it and agree with it).    reply            XorNot  1 day ago    | root | parent | next  [–]      It's virtue signalling.    reply            slt2021  1 day ago    | parent | prev | next  [–]      wow amazing, nobody is gonna edit that code ever again...    reply            notfed  1 day ago    | prev | next  [–]      > The x25519 algorithm also plays a role in post-quantum safe cryptographic solutions, having been included as the classical algorithm in the TLS 1.3 and SSH hybrid scheme specifications for post-quantum key agreement. Really though? This mostly-untrue statement is the line that warrants adding hashtag #post-quantum-cryptography to the blogpost?    reply            westurner  1 day ago    | parent | next  [–]      Actually, e.g. rustls added X25519Kyber768Draft00 support this year: https://news.ycombinator.com/item?id=41534500 /?q X25519Kyber768Draft00: https://www.google.com/search?q=X25519Kyber768Draft00    reply            notfed  1 day ago    | root | parent | next  [–]      Kyber768 is the post-quantum algorithm in that example, not x25519.    reply            westurner  1 day ago    | root | parent | next  [–]      From \"OpenSSL 3.4 Alpha 1 Released with New Features\" (8 days ago) https://news.ycombinator.com/item?id=41456447#41456774 : > Someday there will probably be a TLS1.4/2.0 with PQ, and also FIPS-140 -4? > Are there additional ways to implement NIST PQ finalist algos with openssl? - open-quantum-safe/oqs-provider [implements mlkem512 through mlkem1024 and x25519_mlkem768]    reply            notfed  7 hours ago    | root | parent | next  [–]      Not sure what you're trying to say here . x25519 is objectively not PQC and never claimed to be, and this isn't debatable.    reply            westurner  6 hours ago    | root | parent | next  [–]      In this case, hybrid means \"not entirely PQ\".    reply            nanolith  1 day ago    | prev | next  [–]      The formal methods nerd in me is happy to see HOL Light being used to formally verify this implementation. I'm curious to see how closely their abstract machine models follow specific machine implementations. OOO, speculation, and deep pipelining have non-trivial impacts on potential side channels, and these vary quite a bit by stepping and architecture.    reply            holowoodman  1 day ago    | parent | next  [–]      Even worse: Each new CPU generation will need a new machine model and a reevaluation. Because OOO, speculation and all the timing behaviour are non-functional properties that frequently change due to new optimizations, different internal structuring, etc.    reply            aseipp  1 day ago    | prev | next  [–]      I was aware of s2n-bignum which is a very cool project, but apparently there is a larger sister project, aws-lc, that aims for broader set of APIs including OpenSSL compatibility, while retaining the general approach and vibe (lots of formal verification + performance work): https://github.com/aws/aws-lc That's pretty sweet. I'm currently using BoringSSL in a project as a supplement to OpenSSL (mostly because it is much easier to build for Windows users than requiring them to fiddle with msys2/vcpkg etc; the alternative is to rely on the Windows CNG API, but it lacks features like ed25519 support.) I wonder how much effort it would take to use aws-lc instead... Not that I'm that interested, BSSL is pretty good, but free performance and heavy automated verification is always nice :) Related: one of the authors of this post, John Harrison, wrote a really good book about automated theorm proving about 15 years ago while working on floating point verification at Intel -- there's still no other book quite like this one, I think https://www.cl.cam.ac.uk/~jrh13/    reply            newman314  1 day ago    | parent | next  [–]      Upon hearing about AWS-LC, I immediately thought about tying it to nginx to see if it will work. Turns out someone else has already tried: https://github.com/aws/aws-lc/issues/1827    reply            saghm  1 day ago    | prev | next  [–]      My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. At times I've run into places that require me to use RSA keys though (ironically, I seem to remember first experiencing this with AWS years back, although I honestly can't recall if this is still the case or not). If this further improvement becomes widely used, it would be interesting to see if it's enough to tip the scales towards ed25519 being more of the de facto \"default\" ssh key algorithm. My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that.    reply            scrapheap  1 day ago    | parent | next  [–]      > My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that. I wouldn't be surprised if a lot of people still use RSA for SSH keys for one or more of the following reasons: 1. A lot of tutorials about generating SSH Keys were written before ed25519, so if they follow an old tutorial they'll probably be generating an RSA key. 2. Older versions of OpenSSH, that you'd find on CentOS 7 and below, would default to RSA if you didn't specify a key type when running ssh-keygen. 3. There are some systems out there that don't support ed25519, though they are becoming rarer.  If you have to deal with those systems then you're forced to use RSA (at least for that system). 4. Some of us have been using SSH keys from way before OpenSSH add support for ed25519 keys in 2014, so any long lived SSH keys won't be ed25519 keys (wow, ed25519 has now been about in OpenSSH for over 10 years).    reply            miki123211  1 day ago    | root | parent | next  [–]      5. a lot of people (especially older people I suspect) think \"RSA\" when they hear \"public key cryptography\". I'm in my twenties and still have that reaction. I know elliptic curves exist, I even sort-of-kind-of have an awareness of how they work, but if I was asked to name one cryptosystem that used public and private keys, I'd definitely say RSA first and not elliptic curves.    reply            vitus  1 day ago    | root | parent | next  [–]      This is likely in no small part due to CS education only really teaching the mechanics of RSA (modular arithmetic, Fermat's little theorem, etc), or at least, that still seems to be the case at Berkeley. I'd guess because elliptic curve crypto requires more advanced math to reason about (more advanced group theory, at least) and doesn't map as cleanly to existing concepts that non-math-major undergrads have. cryptopals.com also doesn't cover any elliptive curve crypto until you get into the last set.    reply            tptacek  1 day ago    | root | parent | next  [–]      We didn't even cover RSA until the original last set. It's a build-up. :)    reply            throw0101b  1 day ago    | root | parent | prev | next  [–]      I would think that the (non-EC) Diffie-Hellman would also be easy enough to teach as well: exponentials and discrete log problem aren't any/much complicated than explaining factorization.    reply            pantalaimon  1 day ago    | root | parent | prev | next  [–]      > 3. There are some systems out there that don't support ed25519, though they are becoming rarer. If you have to deal with those systems then you're forced to use RSA (at least for that system). Azure Devops is a big one.    reply            Spooky23  1 day ago    | root | parent | prev | next  [–]      If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519.    reply            vitus  1 day ago    | root | parent | next  [–]      > If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519. Not even when FIPS 140-3 was (finally) finalized in 2019, and testing began in 2020? https://csrc.nist.gov/projects/cryptographic-module-validati... includes mentions of EdDSA, and Curve25519 is listed among the \"Recommended Curves for U.S. Federal Government Use\" on page 15 of https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.S... . (I guess the problem is that various crypto implementations need to get recertified under the new standard...) edit: it looks like AWS-LC [0] and boringcrypto [1] have both been validated under FIPS 140-3. Azure's OpenSSL crypto [2] has only been validated under FIPS 140-2 as far as I can tell. [0] https://csrc.nist.gov/projects/cryptographic-module-validati... [1] https://csrc.nist.gov/projects/cryptographic-module-validati... [2] https://csrc.nist.gov/projects/cryptographic-module-validati...    reply            devman0  1 day ago    | root | parent | prev | next  [–]      ed25519 is in FIPS 186-5 which meets criteria (a) for Approved Security Functions in FIPS 140-2.    reply            loudmax  1 day ago    | root | parent | prev | next  [–]      When I run `ssh-keygen`, I can remember the options `-t rsa` or `-t dsa`.  I simply cannot remember the flag `-t ed25519`.  I have to look it up every time. I just remember the flag as being vaguely similar the name of the monster robot from RoboCop.    reply            homebrewer  1 day ago    | root | parent | next  [–]      Use shell autocomplete. Even `bash-completion` suggests arguments for the key type these days:  $ ssh-keygen -t <TAB>\n  dsa   ecdsa   ecdsa-sk   ed25519   ed25519-sk  rsa `-sk` is short for \"security key\" if memory serves me right, and is used with FIDO2 hardware tokens.    reply            throw0101b  1 day ago    | root | parent | prev | next  [–]      > When I run `ssh-keygen` As of OpenSSH 9.5 the default has changed, so you don't have to specify anything:  * ssh-keygen(1): generate Ed25519 keys by default. Ed25519 public keys\n     are very convenient due to their small size. Ed25519 keys are\n     specified in RFC 8709 and OpenSSH has supported them since version 6.5\n     (January 2014). * https://www.openssh.com/txt/release-9.5    reply            saghm  1 day ago    | root | parent | next  [–]      Oh wow, I didn't know that one! I still manually type `-t ed25519` from muscle memory, I guess I don't have to now    reply            toast0  1 day ago    | parent | prev | next  [–]      > My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though.    reply            saghm  1 day ago    | root | parent | next  [–]      > My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though. Interesting! I wonder if this new algorithm is intended to help with that. I'm super curious if the smaller payload does indeed make a difference (with the current algorithm) like you mention; I know that with databases and filesystems, compression is commonly used to shift the balance from I/O to CPU due to disk writes being slow (with reduced storage size being a side benefit but not usually the main motivation), but I also know that cryptographic verification being too slow can be an anti-feature if it makes brute forcing feasible, so the amount of CPU work needed might be pretty high still.    reply            toast0  23 hours ago    | root | parent | next  [–]      On my ancient box, only including a few lines of output:  $ openssl speed rsa ecdsa\n\n                     sign    verify    sign/s verify/s\n   rsa 1024 bits 0.000117s 0.000008s   8518.7 132449.2\n   rsa 2048 bits 0.000884s 0.000025s   1130.6  39499.3\n\n                                 sign    verify    sign/s verify/s\n    256 bits ecdsa (nistp256)   0.0000s   0.0001s  33210.9  11483.0\n    384 bits ecdsa (nistp384)   0.0009s   0.0008s   1070.6   1268.9 It's 11 k verify/s for ecda vs 39k verify/s for rsa-2048. A TLS handshake needs at least one sign and verify from the server cert, plus some verifies for the signature on the cert chain (but those signatures are used over and over).    reply            stouset  1 day ago    | parent | prev | next  [–]      > anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519 That’s not really anecdotal. Generating an ed25519 key is barely more than generating a random 256-bit value. Generating an RSA key is significantly more work.    reply            saghm  1 day ago    | root | parent | next  [–]      I did say my understanding was probably naive; I didn't know the details to be able to assert anything beyond my own observation!    reply            stouset  1 day ago    | root | parent | next  [–]      Yep, not faulting you at all! I too was surprised when I found out that it’s a straight 256-bit random value with a few bits masked.    reply            saghm  1 day ago    | root | parent | next  [–]      I pretty quickly realized in college when learning about this stuff that the math was well over my head, and I shifted my focus more to understanding how to properly use cryptography rather than implement it (which turned out to be more important as a software engineer anyhow). In retrospect, I really appreciate how the professor I had in a security-focused course explicitly told us it was okay if we didn't understand the math and wouldn't be tested on it when going over how it worked.    reply            tptacek  1 day ago    | root | parent | next  [–]      Counterpoint: it's not OK to skip the math with cryptography. You may not need to power through all of Silverman's curve book (though: I don't know for sure that's true, which is why I don't call myself a cryptography engineer), but you have to get as deep into the math as you can in order to safely use cryptographic algorithms. If you're math-avoidant, stick with high-level abstractions like NaCL and TLS. There's nothing wrong with that! A professor talking about and demonstrating cryptography at the level of individual algorithms is doing their class a disservice if they say \"none of the math will be on the test\". The algorithms are enough to put something together that seems like it works; the math is what you need to find out if your resulting system actually does work. It's where many of the fun bug classes live.    reply            saghm  1 day ago    | root | parent | next  [–]      I'm not sure if you're reading more into what I said than I intended, but I'm not convinced by this argument. You might have missed that this course was on security in general, not cryptography; not everything in the course was cryptographic related. That said, I'd argue that for the vast majority of software engineers the type of stuff they're dealing with can be dealt with without needing to know the math. For example, you don't need to understand the math to behind the algorithms to know that bcrypt is a reasonable password hashing algorithm and that sha1 and md5 are not, or that salts are used to mitigate issues when users reuse passwords. These are principles that you can understand at a high level without fully understanding the underlying details. If anything, I think that overemphasis on requiring people to learn and understand the math has the effect of over-focusing on simpler algorithms that aren't actually what people want to be using in practice due to the fact that they're easier to teach and often foundational in conveying concepts that would need to be learned to understand the more complicated algorithms. If using cryptographic algorithms directly requires knowing the math, then I'd agree that most people shouldn't be using them directly, but I'd go further and say that a lack of libraries that are safe for people to use for software engineering without understanding the implementation is a failing of the ecosystem; as much as \"regular\" software engineering people (like myself!) can struggle with the math behind cryptography, I think that a lot of people developing cryptographic libraries struggle with building reasonable abstractions and making user-friendly APIs (which is a skill I think in general is not emphasized enough for most software engineers, to the detriment of everyone).    reply            tptacek  1 day ago    | root | parent | next  [–]      Sure. It's a failing of the ecosystem. That observation, a cup of coffee, and 1-3 years will get you a Kenny Paterson paper stunt-breaking your system. I feel where you're coming from, but, respectfully: it does not matter. My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry.    reply            saghm  1 day ago    | root | parent | next  [–]      > My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry. I'm not sure I understand what you mean here by \"something else in our industry\". Are you arguing that I'm not qualified to be a software engineer due to not understanding the math behind elliptic curves, or did you miss my repeated use of phrases like \"the vast majority of software engineers\" rather than some specialty where cryptography implementation details details are more important? If the latter, I can reassure you that I don't work in cryptography, work on any cryptographic libraries, or have any specific responsibilities related to security beyond the general idea that all software being written should be secure. If the former, I'll have to respectfully disagree, and suggest that maybe even if you aren't willing to consider that you're wrong about the math being a hard requirement for someone being qualified as a software engineer, it's worth considering that you almost certainly don't have enough information to conclude whether a stranger on the internet is qualified based on reading some of their comments.    reply            tptacek  3 hours ago    | root | parent | next  [–]      I'm certainly not saying you're not qualified to be a software engineer.    reply            syncsynchalt  1 day ago    | root | parent | prev | next  [–]      Learning X25519 isn't too hard!  See https://curves.xargs.org for the basics and https://x25519.xargs.org for some refining details.    reply            upofadown  1 day ago    | parent | prev | next  [–]      Another article from the same blog about optimizing RSA: * https://www.amazon.science/blog/formal-verification-makes-rs... RSA signature verification is already very fast and TLS doesn't use RSA for encryption anymore so the problem reduces to optimizing signing operations.    reply            fefe23  1 day ago    | prev | next  [–]      Holy shit these claims are wild!\nIt's not just a percent more performance here and there, the graphs look more like 50% more throughput on the same hardware (depending on the cpu architecture). My immediate fear was that they optimized away the security features like absence of timing side channels, but they say they still have those. They also claim to have formal proof of correctness, which is even more amazing, because they are not doing it on a symbolic level but on a machine instruction level. Apparently they tought their reasoning system the semantics of all the CPU instructions used in the assembler implementation. I'll still wait what djb has to say about this, but it looks freaking amazing to me.    reply            jonmon6691  1 day ago    | prev | next  [–]      I'm assuming when they say that this improves user experience, that it implies the use case is primarily TLS. In which case store-now-decrypt-later attacks are already considered an urgent threat with regard to post quantum crypto. With FIPS 203 being released and Chrome is already using an implementation based on the draft standard, this seems like this algo (at least for TLS) should be on its way out.    reply            dlgeek  1 day ago    | parent | next  [–]      The industry is moving to a hybrid that mixes classic crypto (including ECC) with post-quantum crypto. AWS has even turned this on in some places - https://aws.amazon.com/about-aws/whats-new/2022/03/aws-kms-a... from 2022 and https://docs.aws.amazon.com/kms/latest/developerguide/pqtls.... for some details.    reply            jonmon6691  1 day ago    | root | parent | next  [–]      Thanks I forgot about that. So if understand it right, the idea is to provide some insurance in the case that these relatively young algorithms are broken as they get exposed to more and more cryptanalysis    reply            adgjlsfhk1  1 day ago    | parent | prev | next  [–]      No one other than NIST is recommending phasing out pre-quantum crypto. Everyone else is using a combination of pre-quantum and post-quantum because trust in the security and robustness of the post-quantum ecosystem is fairly low.    reply            webXL  1 day ago    | prev | next  [–]      Why don't they just focus on making a Gravitron variant with those algorithms in the circuitry?    reply            londons_explore  1 day ago    | prev  [–]      Does 25519 suffer from key/data-dependant execution time? Is this implementation resistant to that? If it isn't, it's kinda a footgun which shouldn't be published for general use.    reply            syncsynchalt  1 day ago    | parent | next  [–]      Curve25519 is designed to be resistant to timing attacks, such as clamping the 254th bit in x25519 keys to 1 so that implementors can not optimize away a multiplication round. That doesn't mean that this implementation doesn't have timing attacks, but the implementors claim they chose mechanisms which should be constant-time.    reply            vitus  1 day ago    | parent | prev  [–]      > Does 25519 suffer from key/data-dependant execution time? I mean, when implemented naively, yes, but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. From the article: > We also do our best to execute the algorithms in constant time, to thwart side-channel attacks that infer secret information from the durations of computations. https://github.com/awslabs/s2n-bignum (where most of the heavy lifting is done, per the article) further explicitly states that \"Each function is moreover written in a constant-time style to avoid timing side-channels.\"    reply            justinwsmith  1 day ago    | root | parent | next  [–]      The next paragraph makes a slightly stronger statement about its constant-time'ness: > Our implementations of x/Ed25519 are designed with constant time in mind. They perform exactly the same sequence of basic CPU instructions regardless of the input values, and they avoid any CPU instructions that might have data-dependent timing.    reply            deathanatos  1 day ago    | root | parent | prev  [–]      > but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. When I see CVE-fests like — https://people.redhat.com/~hkario/marvin/ — … I just do not come away with that impression. [Widely used] Cryptographic Rust crates offering \"constant time\" operations in \"pure Rust\" — but Rust has no primitives for doing constant time operations , so it's only through hopes and prayers that it might actually work, and with no guarantee anywhere that it actually should . (Other, less timing attack related stuff, but e.g., major companies still not supporting anything beyond RSA.)    reply            SEJeff  1 day ago    | next  [–]      The firedancer team at one of the better HFT firms wrote an AVX512 optimized implementation of ed25519 and X25519 that’s significantly faster than OpenSSL. https://github.com/firedancer-io/firedancer/pull/716 Ditto for sha256: https://github.com/firedancer-io/firedancer/pull/778 And sha512: https://github.com/firedancer-io/firedancer/pull/760 If you’re an optimization nerd, this codebase is wild.    reply            syzygyhack  1 day ago    | parent | next  [–]      I laughed a little at calling Firedancer contributors \"a team at a HFT firm\". Not that you are technically wrong, not at all, that's where Jump came from. It's just that this is all completely blockchain-driven optimization, but the b-word is so dirty now that we've gotta go back to using TradFi for the rep.    reply            SEJeff  1 day ago    | root | parent | next  [–]      It’s an optimization in hashing algorithms that is around twice as fast as the ones Amazon is posting in thus article for the same eliptic curves. If the Amazon improvements are hacker news worthy (they are) this seems reasonable contextually. Also, I worked for Jump for almost 12 years :)    reply            webXL  1 day ago    | root | parent | prev | next  [–]      What makes the “b-word” dirty?    reply            SEJeff  1 day ago    | root | parent | next  [–]      I didn’t use it because I didn’t find it relevant. They’re using hashing and EC algorithms and they’re improving them.    reply            jandrese  1 day ago    | root | parent | prev | next  [–]      It's hard to separate from the sea of grifters, con men, cranks, and scammers that infest the domain.  Just using the word is a yellow flag that you might be some kind of whacko, even if all you really want to talk about is the math. People have to forever be on guard that you might at any point pivot to all taxation is theft or how you have formed your own micro nation that consists entirely of yourself and thus have diplomatic immunity from all prosecution.  Because it happens.  Or maybe you have a once in a lifetime deal to buy this receipt like object for some hideous art that is guaranteed to appreciate in value millions of percent.  It's just the crowd that has aggregated around crypto currencies includes a lot of untrustworthy people.    reply            webXL  1 day ago    | root | parent | next  [–]      Why do people need to be on guard for those beliefs? People should be critical thinkers and not thought police. Granted, there are all kinds of whackos in crypto, but we should only be concerned about the immoral ones trying to scam us out of our money: SBF, Do-Kwon, and the like.    reply            sweeter  22 hours ago    | root | parent | next  [–]      people are legitimately buying farming land in the US and currently suing farmers for \"anti-trust\" for refusing to sell them their land so that they can quite literally create a crypto based sovereign micro-nation of wealthy tech VC's. [1] and I think that is a selfish, vile and delusional thing to do. It has nothing to do with \"thought police\" its as simple as looking at the impact of their actions and beliefs and making the decision to reject that way of thinking and way of life. 1: https://www.youtube.com/watch?v=PHlcAx-I0oY    reply            ShroudedNight  1 day ago    | root | parent | prev | next  [–]      The trough of disillusionment carved out by grifters burning the peat of enthusiasm unsustainably.    reply            nly  1 day ago    | parent | prev | next  [–]      A lot of slowness comes typically comes from wanting to avoid methods that enable side-channel timing attacks    reply            inopinatus  1 day ago    | parent | prev | next  [–]      I see they learned clang’s dirty little secret over intrinsics viz. that in producing the IR it deviates (sometimes dramatically when AVX-512 is concerned) from the documented opcodes and the results are inevitably detrimental.    reply            astrange  1 day ago    | root | parent | next  [–]      This is why ffmpeg uses assembly, and people get extremely mad when you say it's done for a reason, because they always want to come up with a fancier abstraction (usually cross-platform) which then defeats the purpose because it doesn't actually work. nb those abstractions do make sense when you can only afford to write a single implementation of the algorithm; then you're just talking about a high level programming language. But they frequently fail to achieve their goal when you're writing a second implementation for the sole purpose of being faster.    reply            electricshampo1  1 day ago    | parent | prev | next  [–]      Completely agree re: firedancer codebase. There is a level of thought and discipline wrt performance that I have never seen anywhere else.    reply            dhx  1 day ago    | root | parent | next  [–]      It's much more than just performance they've thought about. Here are some of the secure programming practices that have been implemented:  /* All the functions in this file are considered \"secure\", specifically:\n     - Constant time in the input, i.e. the input can be a secret[2]\n     - Small and auditable code base, incl. simple types\n     - Either, no local variables = no need to clear them before exit (most functions)\n     - Or, only static allocation + clear local variable before exit (fd_ed25519_scalar_mul_base_const_time)\n     - Clear registers via FD_FN_SENSITIVE[3]\n     - C safety\n  */ libsodium[4] implements similar mechanisms, and Linux kernel encryption code does too (example: use of kfree_sensitive)[5]. However, firedancer appears to better avoid moving secrets outside of CPU registers, and [3] explains that libraries such as libsodium have inadequate zeroisation, something which firedancer claims to improve upon. [1] https://github.com/firedancer-io/firedancer/blob/main/src/ba... [2] https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplic... [3] https://eprint.iacr.org/2023/1713 [4] https://libsodium.gitbook.io/doc/internals#security-first [5] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/lin...    reply            tptacek  1 day ago    | root | parent | next  [–]      These are table stakes for core cryptographic code, and SOT crypto code --- like the Amazon implementation this story is about --- tend at this point all to be derived from formal methods.    reply            dhx  1 day ago    | root | parent | next  [–]      As an example, the Amazon implementation doesn't refer to gcc's[1] and clang's[2] \"zero_call_used_regs\" to zeroise CPU registers upon return or exception of functions working on crypto secrets. OpenSSL doesn't either.[3] firedancer _does_ use \"zero_call_used_regs\" to allow gcc/clang to zeroise used CPU registers.[9] As another example, the Amazon implementation also doesn't refer to gcc's \"strub\" attribute which zeroises the function's stack upon return or exception of functions working on crypto secrets.[4][5] OpenSSL doesn't either.[3] firedancer _does_ use the \"strub\" attribute to allow gcc to zeroise the function's stack.[9] Is there a performance impact? [6] has the overhead at 0% for X25519 for implementing CPU register and stack zeroisation. Compiling the Linux kernel with \"CONFIG_ZERO_CALL_USED_REGS=1\" for x64_64 (impacting all kernel functions) was found to result in a 1-1.5% performance penalty.[7][8] [1] https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attribute... [2] https://clang.llvm.org/docs/AttributeReference.html#zero-cal... [3] https://github.com/openssl/openssl/discussions/24321 [4] https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Common-Type-At... [5] https://gcc.gnu.org/onlinedocs/gcc/Stack-Scrubbing.html [6] https://eprint.iacr.org/2023/1713.pdf [7] https://www.phoronix.com/review/zero-used-regs/5 [8] https://lore.kernel.org/lkml/20210505191804.4015873-1-keesco... [9] FD_FN_UNSANITIZED: https://github.com/firedancer-io/firedancer/blob/master/src/...    reply            jandrese  1 day ago    | root | parent | next  [–]      Zeroizing a register seems pretty straightforward.  Zeroizing any cache that it may have touched seems a lot more complex.  I guess that's why they work so hard to keep everything in registers.  Lucky for them we aren't in the x86 era anymore and there are a useful number of registers.  I'll need to read up on how they avoid context switches while their registers are loaded.    reply            SEJeff  1 day ago    | root | parent | prev | next  [–]      That team is full of world experts in high performance computing.    reply            pantalaimon  1 day ago    | parent | prev | next  [–]      That looks really neat, but I still don't understand what firedancer actually is - what is a validator client for Solana and why does it need it's own crypto library?    reply            SEJeff  1 day ago    | root | parent | next  [–]      It’s a new from scratch implementation of a validator for Solana the fastest blockchain by several orders of magnitude. The slowest part is signature verification so they sped up hashing to improve performance of the entire system. They follow a first principles approach (the lead has a few physics degrees) and opted to speed up the cryptography. The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. It’s a win in cryptography, much like this Amazon post is, except it’s slower than the firedancer implementation.    reply            scrlk  1 day ago    | root | parent | next  [–]      Off topic - is Firedancer going to survive Jump winding down its crypto arm? Kanav left, they liquidated a huge staked ETH position a few months ago (+ a bunch of other coins), and the SEC/CFTC is all over them for the Terra Luna fiasco.    reply            SEJeff  1 day ago    | root | parent | next  [–]      Rumors of Jump’s demise are greatly exaggerated. Check the torrent of firedancer talks at Solana Breakpoint literally next week and decide yourself. Folks have said jump is gonna die for 20+ years. They’ve been around 30ish…    reply            sangnoir  1 day ago    | root | parent | next  [–]      Parent asked a specific question about the survival of Firedancer and winding down of the crypto arm though. No demise of Jump mentioned.    reply            SEJeff  1 day ago    | root | parent | next  [–]      You will see a half dozen or so talks about firedancer and probably 35-40 or so of us total (I’m at the company that does security for firedancer, Asymmetric Research. We were founded by former jumpers). You can make the determination on your own, but there will be an obvious large showing of firedancer folks and some exciting updates for the project.    reply            caned  1 day ago    | root | parent | prev | next  [–]      > The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. For users that have AVX-512, which isn't widely available (AMD Zen 4 / Zen 5, Sapphire Rapids)...    reply            SEJeff  1 day ago    | root | parent | next  [–]      Sure, and cpus supporting it will proliferate. Shockingly to no one reading hacker news... Both software and hardware continue to improve with time generally speaking. This was a huge software improvement on hardware that supports that functionality. It is a huge win for anyone wanting to use these algorithms where they can afford hardware that supports it. We should celebrate Amazon's improvements and we should celebrate these improvements. Both are great for the future of technology, regardless of why they were initially developed. Improving tech and keeping it open source is good for all.    reply            4gotunameagain  1 day ago    | parent | prev | next  [–]      So many manhours spent on finding better ways to shovel around money and pocket what falls from the cracks. What a wasteful and unproductive enterprise, considering the vast majority of the devised improvements never see the public eye. Still, impressive work. Imagine if those brilliant minds behind this were focused somewhere else.    reply            posnet  1 day ago    | root | parent | next  [–]      The greatest minds of our generation spend their time thinking about how to: - make people click on ads - make trading algos faster - replace human artists - build more efficient killing machines - destroy any remaining concept of privacy    reply            geodel  23 hours ago    | root | parent | next  [–]      Greatest mind of previous generation made nuclear bombs and other deadly things.    reply            astrange  1 day ago    | root | parent | prev | next  [–]      Aren't the greatest mind(s) of our generation writing Terry Tao's blog posts?    reply            vladms  1 day ago    | root | parent | prev | next  [–]      This directly implies that all the people that did useful stuff (improving cancer survivability, new vaccines, renewable energy, and others) are all \"below\" the \"greatest minds of our generation\". Not to mention it also suggests there is a way to \"compare\" minds. I would not choose myself to do somethings, but that does not mean I despise automatically people choosing to.    reply            geodel  23 hours ago    | root | parent | next  [–]      I think they meant greatest minds have to be greatest money earners also. Else they are not greatest minds.    reply            4gotunameagain  1 day ago    | root | parent | prev | next  [–]      Hey, at least we had one of them working on TempleOS.    reply            toast0  1 day ago    | root | parent | prev | next  [–]      It doesn't seem wasteful and unproductive, given that the result of the HFT industry is smaller bid/ask spreads (lowering costs for all trades) and payment for order flow which is the mechanism that eliminated retail commissions and provides price improvement on many retail trades. And even so, HFT firms are making money. It might not seem like real work, but making money by reducing costs of market participants sounds like a good thing. I admit though, block trades might be harder now than before the rise of HFT. If you could do warehousing/distributing/coordinating fresh foods in a way that reduced the difference in price between the farmer and the consumer and make money doing it, that would clearly be good work.    reply            appendix-rock  1 day ago    | root | parent | prev | next  [–]      What do you work on?    reply            almostgotcaught  1 day ago    | root | parent | prev | next  [–]      I'll never be able to figure out what people get from repeating the same thing over and over. I've seen this same exact comment 1000 times on hn and I'm 100% sure you have too (indeed I believe the reason you repeat is because you've seen it and agree with it).    reply            XorNot  1 day ago    | root | parent | next  [–]      It's virtue signalling.    reply            slt2021  1 day ago    | parent | prev | next  [–]      wow amazing, nobody is gonna edit that code ever again...    reply            notfed  1 day ago    | prev | next  [–]      > The x25519 algorithm also plays a role in post-quantum safe cryptographic solutions, having been included as the classical algorithm in the TLS 1.3 and SSH hybrid scheme specifications for post-quantum key agreement. Really though? This mostly-untrue statement is the line that warrants adding hashtag #post-quantum-cryptography to the blogpost?    reply            westurner  1 day ago    | parent | next  [–]      Actually, e.g. rustls added X25519Kyber768Draft00 support this year: https://news.ycombinator.com/item?id=41534500 /?q X25519Kyber768Draft00: https://www.google.com/search?q=X25519Kyber768Draft00    reply            notfed  1 day ago    | root | parent | next  [–]      Kyber768 is the post-quantum algorithm in that example, not x25519.    reply            westurner  1 day ago    | root | parent | next  [–]      From \"OpenSSL 3.4 Alpha 1 Released with New Features\" (8 days ago) https://news.ycombinator.com/item?id=41456447#41456774 : > Someday there will probably be a TLS1.4/2.0 with PQ, and also FIPS-140 -4? > Are there additional ways to implement NIST PQ finalist algos with openssl? - open-quantum-safe/oqs-provider [implements mlkem512 through mlkem1024 and x25519_mlkem768]    reply            notfed  7 hours ago    | root | parent | next  [–]      Not sure what you're trying to say here . x25519 is objectively not PQC and never claimed to be, and this isn't debatable.    reply            westurner  6 hours ago    | root | parent | next  [–]      In this case, hybrid means \"not entirely PQ\".    reply            nanolith  1 day ago    | prev | next  [–]      The formal methods nerd in me is happy to see HOL Light being used to formally verify this implementation. I'm curious to see how closely their abstract machine models follow specific machine implementations. OOO, speculation, and deep pipelining have non-trivial impacts on potential side channels, and these vary quite a bit by stepping and architecture.    reply            holowoodman  1 day ago    | parent | next  [–]      Even worse: Each new CPU generation will need a new machine model and a reevaluation. Because OOO, speculation and all the timing behaviour are non-functional properties that frequently change due to new optimizations, different internal structuring, etc.    reply            aseipp  1 day ago    | prev | next  [–]      I was aware of s2n-bignum which is a very cool project, but apparently there is a larger sister project, aws-lc, that aims for broader set of APIs including OpenSSL compatibility, while retaining the general approach and vibe (lots of formal verification + performance work): https://github.com/aws/aws-lc That's pretty sweet. I'm currently using BoringSSL in a project as a supplement to OpenSSL (mostly because it is much easier to build for Windows users than requiring them to fiddle with msys2/vcpkg etc; the alternative is to rely on the Windows CNG API, but it lacks features like ed25519 support.) I wonder how much effort it would take to use aws-lc instead... Not that I'm that interested, BSSL is pretty good, but free performance and heavy automated verification is always nice :) Related: one of the authors of this post, John Harrison, wrote a really good book about automated theorm proving about 15 years ago while working on floating point verification at Intel -- there's still no other book quite like this one, I think https://www.cl.cam.ac.uk/~jrh13/    reply            newman314  1 day ago    | parent | next  [–]      Upon hearing about AWS-LC, I immediately thought about tying it to nginx to see if it will work. Turns out someone else has already tried: https://github.com/aws/aws-lc/issues/1827    reply            saghm  1 day ago    | prev | next  [–]      My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. At times I've run into places that require me to use RSA keys though (ironically, I seem to remember first experiencing this with AWS years back, although I honestly can't recall if this is still the case or not). If this further improvement becomes widely used, it would be interesting to see if it's enough to tip the scales towards ed25519 being more of the de facto \"default\" ssh key algorithm. My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that.    reply            scrapheap  1 day ago    | parent | next  [–]      > My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that. I wouldn't be surprised if a lot of people still use RSA for SSH keys for one or more of the following reasons: 1. A lot of tutorials about generating SSH Keys were written before ed25519, so if they follow an old tutorial they'll probably be generating an RSA key. 2. Older versions of OpenSSH, that you'd find on CentOS 7 and below, would default to RSA if you didn't specify a key type when running ssh-keygen. 3. There are some systems out there that don't support ed25519, though they are becoming rarer.  If you have to deal with those systems then you're forced to use RSA (at least for that system). 4. Some of us have been using SSH keys from way before OpenSSH add support for ed25519 keys in 2014, so any long lived SSH keys won't be ed25519 keys (wow, ed25519 has now been about in OpenSSH for over 10 years).    reply            miki123211  1 day ago    | root | parent | next  [–]      5. a lot of people (especially older people I suspect) think \"RSA\" when they hear \"public key cryptography\". I'm in my twenties and still have that reaction. I know elliptic curves exist, I even sort-of-kind-of have an awareness of how they work, but if I was asked to name one cryptosystem that used public and private keys, I'd definitely say RSA first and not elliptic curves.    reply            vitus  1 day ago    | root | parent | next  [–]      This is likely in no small part due to CS education only really teaching the mechanics of RSA (modular arithmetic, Fermat's little theorem, etc), or at least, that still seems to be the case at Berkeley. I'd guess because elliptic curve crypto requires more advanced math to reason about (more advanced group theory, at least) and doesn't map as cleanly to existing concepts that non-math-major undergrads have. cryptopals.com also doesn't cover any elliptive curve crypto until you get into the last set.    reply            tptacek  1 day ago    | root | parent | next  [–]      We didn't even cover RSA until the original last set. It's a build-up. :)    reply            throw0101b  1 day ago    | root | parent | prev | next  [–]      I would think that the (non-EC) Diffie-Hellman would also be easy enough to teach as well: exponentials and discrete log problem aren't any/much complicated than explaining factorization.    reply            pantalaimon  1 day ago    | root | parent | prev | next  [–]      > 3. There are some systems out there that don't support ed25519, though they are becoming rarer. If you have to deal with those systems then you're forced to use RSA (at least for that system). Azure Devops is a big one.    reply            Spooky23  1 day ago    | root | parent | prev | next  [–]      If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519.    reply            vitus  1 day ago    | root | parent | next  [–]      > If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519. Not even when FIPS 140-3 was (finally) finalized in 2019, and testing began in 2020? https://csrc.nist.gov/projects/cryptographic-module-validati... includes mentions of EdDSA, and Curve25519 is listed among the \"Recommended Curves for U.S. Federal Government Use\" on page 15 of https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.S... . (I guess the problem is that various crypto implementations need to get recertified under the new standard...) edit: it looks like AWS-LC [0] and boringcrypto [1] have both been validated under FIPS 140-3. Azure's OpenSSL crypto [2] has only been validated under FIPS 140-2 as far as I can tell. [0] https://csrc.nist.gov/projects/cryptographic-module-validati... [1] https://csrc.nist.gov/projects/cryptographic-module-validati... [2] https://csrc.nist.gov/projects/cryptographic-module-validati...    reply            devman0  1 day ago    | root | parent | prev | next  [–]      ed25519 is in FIPS 186-5 which meets criteria (a) for Approved Security Functions in FIPS 140-2.    reply            loudmax  1 day ago    | root | parent | prev | next  [–]      When I run `ssh-keygen`, I can remember the options `-t rsa` or `-t dsa`.  I simply cannot remember the flag `-t ed25519`.  I have to look it up every time. I just remember the flag as being vaguely similar the name of the monster robot from RoboCop.    reply            homebrewer  1 day ago    | root | parent | next  [–]      Use shell autocomplete. Even `bash-completion` suggests arguments for the key type these days:  $ ssh-keygen -t <TAB>\n  dsa   ecdsa   ecdsa-sk   ed25519   ed25519-sk  rsa `-sk` is short for \"security key\" if memory serves me right, and is used with FIDO2 hardware tokens.    reply            throw0101b  1 day ago    | root | parent | prev | next  [–]      > When I run `ssh-keygen` As of OpenSSH 9.5 the default has changed, so you don't have to specify anything:  * ssh-keygen(1): generate Ed25519 keys by default. Ed25519 public keys\n     are very convenient due to their small size. Ed25519 keys are\n     specified in RFC 8709 and OpenSSH has supported them since version 6.5\n     (January 2014). * https://www.openssh.com/txt/release-9.5    reply            saghm  1 day ago    | root | parent | next  [–]      Oh wow, I didn't know that one! I still manually type `-t ed25519` from muscle memory, I guess I don't have to now    reply            toast0  1 day ago    | parent | prev | next  [–]      > My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though.    reply            saghm  1 day ago    | root | parent | next  [–]      > My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though. Interesting! I wonder if this new algorithm is intended to help with that. I'm super curious if the smaller payload does indeed make a difference (with the current algorithm) like you mention; I know that with databases and filesystems, compression is commonly used to shift the balance from I/O to CPU due to disk writes being slow (with reduced storage size being a side benefit but not usually the main motivation), but I also know that cryptographic verification being too slow can be an anti-feature if it makes brute forcing feasible, so the amount of CPU work needed might be pretty high still.    reply            toast0  23 hours ago    | root | parent | next  [–]      On my ancient box, only including a few lines of output:  $ openssl speed rsa ecdsa\n\n                     sign    verify    sign/s verify/s\n   rsa 1024 bits 0.000117s 0.000008s   8518.7 132449.2\n   rsa 2048 bits 0.000884s 0.000025s   1130.6  39499.3\n\n                                 sign    verify    sign/s verify/s\n    256 bits ecdsa (nistp256)   0.0000s   0.0001s  33210.9  11483.0\n    384 bits ecdsa (nistp384)   0.0009s   0.0008s   1070.6   1268.9 It's 11 k verify/s for ecda vs 39k verify/s for rsa-2048. A TLS handshake needs at least one sign and verify from the server cert, plus some verifies for the signature on the cert chain (but those signatures are used over and over).    reply            stouset  1 day ago    | parent | prev | next  [–]      > anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519 That’s not really anecdotal. Generating an ed25519 key is barely more than generating a random 256-bit value. Generating an RSA key is significantly more work.    reply            saghm  1 day ago    | root | parent | next  [–]      I did say my understanding was probably naive; I didn't know the details to be able to assert anything beyond my own observation!    reply            stouset  1 day ago    | root | parent | next  [–]      Yep, not faulting you at all! I too was surprised when I found out that it’s a straight 256-bit random value with a few bits masked.    reply            saghm  1 day ago    | root | parent | next  [–]      I pretty quickly realized in college when learning about this stuff that the math was well over my head, and I shifted my focus more to understanding how to properly use cryptography rather than implement it (which turned out to be more important as a software engineer anyhow). In retrospect, I really appreciate how the professor I had in a security-focused course explicitly told us it was okay if we didn't understand the math and wouldn't be tested on it when going over how it worked.    reply            tptacek  1 day ago    | root | parent | next  [–]      Counterpoint: it's not OK to skip the math with cryptography. You may not need to power through all of Silverman's curve book (though: I don't know for sure that's true, which is why I don't call myself a cryptography engineer), but you have to get as deep into the math as you can in order to safely use cryptographic algorithms. If you're math-avoidant, stick with high-level abstractions like NaCL and TLS. There's nothing wrong with that! A professor talking about and demonstrating cryptography at the level of individual algorithms is doing their class a disservice if they say \"none of the math will be on the test\". The algorithms are enough to put something together that seems like it works; the math is what you need to find out if your resulting system actually does work. It's where many of the fun bug classes live.    reply            saghm  1 day ago    | root | parent | next  [–]      I'm not sure if you're reading more into what I said than I intended, but I'm not convinced by this argument. You might have missed that this course was on security in general, not cryptography; not everything in the course was cryptographic related. That said, I'd argue that for the vast majority of software engineers the type of stuff they're dealing with can be dealt with without needing to know the math. For example, you don't need to understand the math to behind the algorithms to know that bcrypt is a reasonable password hashing algorithm and that sha1 and md5 are not, or that salts are used to mitigate issues when users reuse passwords. These are principles that you can understand at a high level without fully understanding the underlying details. If anything, I think that overemphasis on requiring people to learn and understand the math has the effect of over-focusing on simpler algorithms that aren't actually what people want to be using in practice due to the fact that they're easier to teach and often foundational in conveying concepts that would need to be learned to understand the more complicated algorithms. If using cryptographic algorithms directly requires knowing the math, then I'd agree that most people shouldn't be using them directly, but I'd go further and say that a lack of libraries that are safe for people to use for software engineering without understanding the implementation is a failing of the ecosystem; as much as \"regular\" software engineering people (like myself!) can struggle with the math behind cryptography, I think that a lot of people developing cryptographic libraries struggle with building reasonable abstractions and making user-friendly APIs (which is a skill I think in general is not emphasized enough for most software engineers, to the detriment of everyone).    reply            tptacek  1 day ago    | root | parent | next  [–]      Sure. It's a failing of the ecosystem. That observation, a cup of coffee, and 1-3 years will get you a Kenny Paterson paper stunt-breaking your system. I feel where you're coming from, but, respectfully: it does not matter. My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry.    reply            saghm  1 day ago    | root | parent | next  [–]      > My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry. I'm not sure I understand what you mean here by \"something else in our industry\". Are you arguing that I'm not qualified to be a software engineer due to not understanding the math behind elliptic curves, or did you miss my repeated use of phrases like \"the vast majority of software engineers\" rather than some specialty where cryptography implementation details details are more important? If the latter, I can reassure you that I don't work in cryptography, work on any cryptographic libraries, or have any specific responsibilities related to security beyond the general idea that all software being written should be secure. If the former, I'll have to respectfully disagree, and suggest that maybe even if you aren't willing to consider that you're wrong about the math being a hard requirement for someone being qualified as a software engineer, it's worth considering that you almost certainly don't have enough information to conclude whether a stranger on the internet is qualified based on reading some of their comments.    reply            tptacek  3 hours ago    | root | parent | next  [–]      I'm certainly not saying you're not qualified to be a software engineer.    reply            syncsynchalt  1 day ago    | root | parent | prev | next  [–]      Learning X25519 isn't too hard!  See https://curves.xargs.org for the basics and https://x25519.xargs.org for some refining details.    reply            upofadown  1 day ago    | parent | prev | next  [–]      Another article from the same blog about optimizing RSA: * https://www.amazon.science/blog/formal-verification-makes-rs... RSA signature verification is already very fast and TLS doesn't use RSA for encryption anymore so the problem reduces to optimizing signing operations.    reply            fefe23  1 day ago    | prev | next  [–]      Holy shit these claims are wild!\nIt's not just a percent more performance here and there, the graphs look more like 50% more throughput on the same hardware (depending on the cpu architecture). My immediate fear was that they optimized away the security features like absence of timing side channels, but they say they still have those. They also claim to have formal proof of correctness, which is even more amazing, because they are not doing it on a symbolic level but on a machine instruction level. Apparently they tought their reasoning system the semantics of all the CPU instructions used in the assembler implementation. I'll still wait what djb has to say about this, but it looks freaking amazing to me.    reply            jonmon6691  1 day ago    | prev | next  [–]      I'm assuming when they say that this improves user experience, that it implies the use case is primarily TLS. In which case store-now-decrypt-later attacks are already considered an urgent threat with regard to post quantum crypto. With FIPS 203 being released and Chrome is already using an implementation based on the draft standard, this seems like this algo (at least for TLS) should be on its way out.    reply            dlgeek  1 day ago    | parent | next  [–]      The industry is moving to a hybrid that mixes classic crypto (including ECC) with post-quantum crypto. AWS has even turned this on in some places - https://aws.amazon.com/about-aws/whats-new/2022/03/aws-kms-a... from 2022 and https://docs.aws.amazon.com/kms/latest/developerguide/pqtls.... for some details.    reply            jonmon6691  1 day ago    | root | parent | next  [–]      Thanks I forgot about that. So if understand it right, the idea is to provide some insurance in the case that these relatively young algorithms are broken as they get exposed to more and more cryptanalysis    reply            adgjlsfhk1  1 day ago    | parent | prev | next  [–]      No one other than NIST is recommending phasing out pre-quantum crypto. Everyone else is using a combination of pre-quantum and post-quantum because trust in the security and robustness of the post-quantum ecosystem is fairly low.    reply            webXL  1 day ago    | prev | next  [–]      Why don't they just focus on making a Gravitron variant with those algorithms in the circuitry?    reply            londons_explore  1 day ago    | prev  [–]      Does 25519 suffer from key/data-dependant execution time? Is this implementation resistant to that? If it isn't, it's kinda a footgun which shouldn't be published for general use.    reply            syncsynchalt  1 day ago    | parent | next  [–]      Curve25519 is designed to be resistant to timing attacks, such as clamping the 254th bit in x25519 keys to 1 so that implementors can not optimize away a multiplication round. That doesn't mean that this implementation doesn't have timing attacks, but the implementors claim they chose mechanisms which should be constant-time.    reply            vitus  1 day ago    | parent | prev  [–]      > Does 25519 suffer from key/data-dependant execution time? I mean, when implemented naively, yes, but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. From the article: > We also do our best to execute the algorithms in constant time, to thwart side-channel attacks that infer secret information from the durations of computations. https://github.com/awslabs/s2n-bignum (where most of the heavy lifting is done, per the article) further explicitly states that \"Each function is moreover written in a constant-time style to avoid timing side-channels.\"    reply            justinwsmith  1 day ago    | root | parent | next  [–]      The next paragraph makes a slightly stronger statement about its constant-time'ness: > Our implementations of x/Ed25519 are designed with constant time in mind. They perform exactly the same sequence of basic CPU instructions regardless of the input values, and they avoid any CPU instructions that might have data-dependent timing.    reply            deathanatos  1 day ago    | root | parent | prev  [–]      > but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. When I see CVE-fests like — https://people.redhat.com/~hkario/marvin/ — … I just do not come away with that impression. [Widely used] Cryptographic Rust crates offering \"constant time\" operations in \"pure Rust\" — but Rust has no primitives for doing constant time operations , so it's only through hopes and prayers that it might actually work, and with no guarantee anywhere that it actually should . (Other, less timing attack related stuff, but e.g., major companies still not supporting anything beyond RSA.)    reply            SEJeff  1 day ago    | next  [–]      The firedancer team at one of the better HFT firms wrote an AVX512 optimized implementation of ed25519 and X25519 that’s significantly faster than OpenSSL. https://github.com/firedancer-io/firedancer/pull/716 Ditto for sha256: https://github.com/firedancer-io/firedancer/pull/778 And sha512: https://github.com/firedancer-io/firedancer/pull/760 If you’re an optimization nerd, this codebase is wild.    reply           SEJeff  1 day ago    | next  [–]      The firedancer team at one of the better HFT firms wrote an AVX512 optimized implementation of ed25519 and X25519 that’s significantly faster than OpenSSL. https://github.com/firedancer-io/firedancer/pull/716 Ditto for sha256: https://github.com/firedancer-io/firedancer/pull/778 And sha512: https://github.com/firedancer-io/firedancer/pull/760 If you’re an optimization nerd, this codebase is wild.    reply           SEJeff  1 day ago    | next  [–]      The firedancer team at one of the better HFT firms wrote an AVX512 optimized implementation of ed25519 and X25519 that’s significantly faster than OpenSSL. https://github.com/firedancer-io/firedancer/pull/716 Ditto for sha256: https://github.com/firedancer-io/firedancer/pull/778 And sha512: https://github.com/firedancer-io/firedancer/pull/760 If you’re an optimization nerd, this codebase is wild.    reply          SEJeff  1 day ago    | next  [–]      The firedancer team at one of the better HFT firms wrote an AVX512 optimized implementation of ed25519 and X25519 that’s significantly faster than OpenSSL. https://github.com/firedancer-io/firedancer/pull/716 Ditto for sha256: https://github.com/firedancer-io/firedancer/pull/778 And sha512: https://github.com/firedancer-io/firedancer/pull/760 If you’re an optimization nerd, this codebase is wild.    reply          SEJeff  1 day ago    | next  [–]      The firedancer team at one of the better HFT firms wrote an AVX512 optimized implementation of ed25519 and X25519 that’s significantly faster than OpenSSL. https://github.com/firedancer-io/firedancer/pull/716 Ditto for sha256: https://github.com/firedancer-io/firedancer/pull/778 And sha512: https://github.com/firedancer-io/firedancer/pull/760 If you’re an optimization nerd, this codebase is wild.    reply          SEJeff  1 day ago    | next  [–]      The firedancer team at one of the better HFT firms wrote an AVX512 optimized implementation of ed25519 and X25519 that’s significantly faster than OpenSSL. https://github.com/firedancer-io/firedancer/pull/716 Ditto for sha256: https://github.com/firedancer-io/firedancer/pull/778 And sha512: https://github.com/firedancer-io/firedancer/pull/760 If you’re an optimization nerd, this codebase is wild.    reply    SEJeff  1 day ago    | next  [–]     SEJeff  1 day ago    | next  [–]    SEJeff 1 day ago 1 day ago | next  [–]   next [–]  The firedancer team at one of the better HFT firms wrote an AVX512 optimized implementation of ed25519 and X25519 that’s significantly faster than OpenSSL. https://github.com/firedancer-io/firedancer/pull/716 Ditto for sha256: https://github.com/firedancer-io/firedancer/pull/778 And sha512: https://github.com/firedancer-io/firedancer/pull/760 If you’re an optimization nerd, this codebase is wild.    reply   The firedancer team at one of the better HFT firms wrote an AVX512 optimized implementation of ed25519 and X25519 that’s significantly faster than OpenSSL. https://github.com/firedancer-io/firedancer/pull/716 Ditto for sha256: https://github.com/firedancer-io/firedancer/pull/778 And sha512: https://github.com/firedancer-io/firedancer/pull/760 If you’re an optimization nerd, this codebase is wild. https://github.com/firedancer-io/firedancer/pull/716 https://github.com/firedancer-io/firedancer/pull/716 Ditto for sha256: https://github.com/firedancer-io/firedancer/pull/778 https://github.com/firedancer-io/firedancer/pull/778 And sha512: https://github.com/firedancer-io/firedancer/pull/760 https://github.com/firedancer-io/firedancer/pull/760 If you’re an optimization nerd, this codebase is wild.   reply    reply    reply  reply reply        syzygyhack  1 day ago    | parent | next  [–]      I laughed a little at calling Firedancer contributors \"a team at a HFT firm\". Not that you are technically wrong, not at all, that's where Jump came from. It's just that this is all completely blockchain-driven optimization, but the b-word is so dirty now that we've gotta go back to using TradFi for the rep.    reply           syzygyhack  1 day ago    | parent | next  [–]      I laughed a little at calling Firedancer contributors \"a team at a HFT firm\". Not that you are technically wrong, not at all, that's where Jump came from. It's just that this is all completely blockchain-driven optimization, but the b-word is so dirty now that we've gotta go back to using TradFi for the rep.    reply           syzygyhack  1 day ago    | parent | next  [–]      I laughed a little at calling Firedancer contributors \"a team at a HFT firm\". Not that you are technically wrong, not at all, that's where Jump came from. It's just that this is all completely blockchain-driven optimization, but the b-word is so dirty now that we've gotta go back to using TradFi for the rep.    reply          syzygyhack  1 day ago    | parent | next  [–]      I laughed a little at calling Firedancer contributors \"a team at a HFT firm\". Not that you are technically wrong, not at all, that's where Jump came from. It's just that this is all completely blockchain-driven optimization, but the b-word is so dirty now that we've gotta go back to using TradFi for the rep.    reply          syzygyhack  1 day ago    | parent | next  [–]      I laughed a little at calling Firedancer contributors \"a team at a HFT firm\". Not that you are technically wrong, not at all, that's where Jump came from. It's just that this is all completely blockchain-driven optimization, but the b-word is so dirty now that we've gotta go back to using TradFi for the rep.    reply          syzygyhack  1 day ago    | parent | next  [–]      I laughed a little at calling Firedancer contributors \"a team at a HFT firm\". Not that you are technically wrong, not at all, that's where Jump came from. It's just that this is all completely blockchain-driven optimization, but the b-word is so dirty now that we've gotta go back to using TradFi for the rep.    reply    syzygyhack  1 day ago    | parent | next  [–]     syzygyhack  1 day ago    | parent | next  [–]    syzygyhack 1 day ago 1 day ago | parent | next  [–]   parent next [–]  I laughed a little at calling Firedancer contributors \"a team at a HFT firm\". Not that you are technically wrong, not at all, that's where Jump came from. It's just that this is all completely blockchain-driven optimization, but the b-word is so dirty now that we've gotta go back to using TradFi for the rep.    reply   I laughed a little at calling Firedancer contributors \"a team at a HFT firm\". Not that you are technically wrong, not at all, that's where Jump came from. It's just that this is all completely blockchain-driven optimization, but the b-word is so dirty now that we've gotta go back to using TradFi for the rep. Not that you are technically wrong, not at all, that's where Jump came from. It's just that this is all completely blockchain-driven optimization, but the b-word is so dirty now that we've gotta go back to using TradFi for the rep.   reply    reply    reply  reply reply        SEJeff  1 day ago    | root | parent | next  [–]      It’s an optimization in hashing algorithms that is around twice as fast as the ones Amazon is posting in thus article for the same eliptic curves. If the Amazon improvements are hacker news worthy (they are) this seems reasonable contextually. Also, I worked for Jump for almost 12 years :)    reply           SEJeff  1 day ago    | root | parent | next  [–]      It’s an optimization in hashing algorithms that is around twice as fast as the ones Amazon is posting in thus article for the same eliptic curves. If the Amazon improvements are hacker news worthy (they are) this seems reasonable contextually. Also, I worked for Jump for almost 12 years :)    reply           SEJeff  1 day ago    | root | parent | next  [–]      It’s an optimization in hashing algorithms that is around twice as fast as the ones Amazon is posting in thus article for the same eliptic curves. If the Amazon improvements are hacker news worthy (they are) this seems reasonable contextually. Also, I worked for Jump for almost 12 years :)    reply          SEJeff  1 day ago    | root | parent | next  [–]      It’s an optimization in hashing algorithms that is around twice as fast as the ones Amazon is posting in thus article for the same eliptic curves. If the Amazon improvements are hacker news worthy (they are) this seems reasonable contextually. Also, I worked for Jump for almost 12 years :)    reply          SEJeff  1 day ago    | root | parent | next  [–]      It’s an optimization in hashing algorithms that is around twice as fast as the ones Amazon is posting in thus article for the same eliptic curves. If the Amazon improvements are hacker news worthy (they are) this seems reasonable contextually. Also, I worked for Jump for almost 12 years :)    reply          SEJeff  1 day ago    | root | parent | next  [–]      It’s an optimization in hashing algorithms that is around twice as fast as the ones Amazon is posting in thus article for the same eliptic curves. If the Amazon improvements are hacker news worthy (they are) this seems reasonable contextually. Also, I worked for Jump for almost 12 years :)    reply    SEJeff  1 day ago    | root | parent | next  [–]     SEJeff  1 day ago    | root | parent | next  [–]    SEJeff 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  It’s an optimization in hashing algorithms that is around twice as fast as the ones Amazon is posting in thus article for the same eliptic curves. If the Amazon improvements are hacker news worthy (they are) this seems reasonable contextually. Also, I worked for Jump for almost 12 years :)    reply   It’s an optimization in hashing algorithms that is around twice as fast as the ones Amazon is posting in thus article for the same eliptic curves. If the Amazon improvements are hacker news worthy (they are) this seems reasonable contextually. Also, I worked for Jump for almost 12 years :) If the Amazon improvements are hacker news worthy (they are) this seems reasonable contextually. Also, I worked for Jump for almost 12 years :)   reply    reply    reply  reply reply        webXL  1 day ago    | root | parent | prev | next  [–]      What makes the “b-word” dirty?    reply           webXL  1 day ago    | root | parent | prev | next  [–]      What makes the “b-word” dirty?    reply           webXL  1 day ago    | root | parent | prev | next  [–]      What makes the “b-word” dirty?    reply          webXL  1 day ago    | root | parent | prev | next  [–]      What makes the “b-word” dirty?    reply          webXL  1 day ago    | root | parent | prev | next  [–]      What makes the “b-word” dirty?    reply          webXL  1 day ago    | root | parent | prev | next  [–]      What makes the “b-word” dirty?    reply    webXL  1 day ago    | root | parent | prev | next  [–]     webXL  1 day ago    | root | parent | prev | next  [–]    webXL 1 day ago 1 day ago | root | parent | prev | next  [–]   root parent prev next [–]  What makes the “b-word” dirty?    reply   What makes the “b-word” dirty?   reply    reply    reply  reply reply        SEJeff  1 day ago    | root | parent | next  [–]      I didn’t use it because I didn’t find it relevant. They’re using hashing and EC algorithms and they’re improving them.    reply           SEJeff  1 day ago    | root | parent | next  [–]      I didn’t use it because I didn’t find it relevant. They’re using hashing and EC algorithms and they’re improving them.    reply           SEJeff  1 day ago    | root | parent | next  [–]      I didn’t use it because I didn’t find it relevant. They’re using hashing and EC algorithms and they’re improving them.    reply          SEJeff  1 day ago    | root | parent | next  [–]      I didn’t use it because I didn’t find it relevant. They’re using hashing and EC algorithms and they’re improving them.    reply          SEJeff  1 day ago    | root | parent | next  [–]      I didn’t use it because I didn’t find it relevant. They’re using hashing and EC algorithms and they’re improving them.    reply          SEJeff  1 day ago    | root | parent | next  [–]      I didn’t use it because I didn’t find it relevant. They’re using hashing and EC algorithms and they’re improving them.    reply    SEJeff  1 day ago    | root | parent | next  [–]     SEJeff  1 day ago    | root | parent | next  [–]    SEJeff 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  I didn’t use it because I didn’t find it relevant. They’re using hashing and EC algorithms and they’re improving them.    reply   I didn’t use it because I didn’t find it relevant. They’re using hashing and EC algorithms and they’re improving them.   reply    reply    reply  reply reply        jandrese  1 day ago    | root | parent | prev | next  [–]      It's hard to separate from the sea of grifters, con men, cranks, and scammers that infest the domain.  Just using the word is a yellow flag that you might be some kind of whacko, even if all you really want to talk about is the math. People have to forever be on guard that you might at any point pivot to all taxation is theft or how you have formed your own micro nation that consists entirely of yourself and thus have diplomatic immunity from all prosecution.  Because it happens.  Or maybe you have a once in a lifetime deal to buy this receipt like object for some hideous art that is guaranteed to appreciate in value millions of percent.  It's just the crowd that has aggregated around crypto currencies includes a lot of untrustworthy people.    reply           jandrese  1 day ago    | root | parent | prev | next  [–]      It's hard to separate from the sea of grifters, con men, cranks, and scammers that infest the domain.  Just using the word is a yellow flag that you might be some kind of whacko, even if all you really want to talk about is the math. People have to forever be on guard that you might at any point pivot to all taxation is theft or how you have formed your own micro nation that consists entirely of yourself and thus have diplomatic immunity from all prosecution.  Because it happens.  Or maybe you have a once in a lifetime deal to buy this receipt like object for some hideous art that is guaranteed to appreciate in value millions of percent.  It's just the crowd that has aggregated around crypto currencies includes a lot of untrustworthy people.    reply           jandrese  1 day ago    | root | parent | prev | next  [–]      It's hard to separate from the sea of grifters, con men, cranks, and scammers that infest the domain.  Just using the word is a yellow flag that you might be some kind of whacko, even if all you really want to talk about is the math. People have to forever be on guard that you might at any point pivot to all taxation is theft or how you have formed your own micro nation that consists entirely of yourself and thus have diplomatic immunity from all prosecution.  Because it happens.  Or maybe you have a once in a lifetime deal to buy this receipt like object for some hideous art that is guaranteed to appreciate in value millions of percent.  It's just the crowd that has aggregated around crypto currencies includes a lot of untrustworthy people.    reply          jandrese  1 day ago    | root | parent | prev | next  [–]      It's hard to separate from the sea of grifters, con men, cranks, and scammers that infest the domain.  Just using the word is a yellow flag that you might be some kind of whacko, even if all you really want to talk about is the math. People have to forever be on guard that you might at any point pivot to all taxation is theft or how you have formed your own micro nation that consists entirely of yourself and thus have diplomatic immunity from all prosecution.  Because it happens.  Or maybe you have a once in a lifetime deal to buy this receipt like object for some hideous art that is guaranteed to appreciate in value millions of percent.  It's just the crowd that has aggregated around crypto currencies includes a lot of untrustworthy people.    reply          jandrese  1 day ago    | root | parent | prev | next  [–]      It's hard to separate from the sea of grifters, con men, cranks, and scammers that infest the domain.  Just using the word is a yellow flag that you might be some kind of whacko, even if all you really want to talk about is the math. People have to forever be on guard that you might at any point pivot to all taxation is theft or how you have formed your own micro nation that consists entirely of yourself and thus have diplomatic immunity from all prosecution.  Because it happens.  Or maybe you have a once in a lifetime deal to buy this receipt like object for some hideous art that is guaranteed to appreciate in value millions of percent.  It's just the crowd that has aggregated around crypto currencies includes a lot of untrustworthy people.    reply          jandrese  1 day ago    | root | parent | prev | next  [–]      It's hard to separate from the sea of grifters, con men, cranks, and scammers that infest the domain.  Just using the word is a yellow flag that you might be some kind of whacko, even if all you really want to talk about is the math. People have to forever be on guard that you might at any point pivot to all taxation is theft or how you have formed your own micro nation that consists entirely of yourself and thus have diplomatic immunity from all prosecution.  Because it happens.  Or maybe you have a once in a lifetime deal to buy this receipt like object for some hideous art that is guaranteed to appreciate in value millions of percent.  It's just the crowd that has aggregated around crypto currencies includes a lot of untrustworthy people.    reply    jandrese  1 day ago    | root | parent | prev | next  [–]     jandrese  1 day ago    | root | parent | prev | next  [–]    jandrese 1 day ago 1 day ago | root | parent | prev | next  [–]   root parent prev next [–]  It's hard to separate from the sea of grifters, con men, cranks, and scammers that infest the domain.  Just using the word is a yellow flag that you might be some kind of whacko, even if all you really want to talk about is the math. People have to forever be on guard that you might at any point pivot to all taxation is theft or how you have formed your own micro nation that consists entirely of yourself and thus have diplomatic immunity from all prosecution.  Because it happens.  Or maybe you have a once in a lifetime deal to buy this receipt like object for some hideous art that is guaranteed to appreciate in value millions of percent.  It's just the crowd that has aggregated around crypto currencies includes a lot of untrustworthy people.    reply   It's hard to separate from the sea of grifters, con men, cranks, and scammers that infest the domain.  Just using the word is a yellow flag that you might be some kind of whacko, even if all you really want to talk about is the math. People have to forever be on guard that you might at any point pivot to all taxation is theft or how you have formed your own micro nation that consists entirely of yourself and thus have diplomatic immunity from all prosecution.  Because it happens.  Or maybe you have a once in a lifetime deal to buy this receipt like object for some hideous art that is guaranteed to appreciate in value millions of percent.  It's just the crowd that has aggregated around crypto currencies includes a lot of untrustworthy people. People have to forever be on guard that you might at any point pivot to all taxation is theft or how you have formed your own micro nation that consists entirely of yourself and thus have diplomatic immunity from all prosecution.  Because it happens.  Or maybe you have a once in a lifetime deal to buy this receipt like object for some hideous art that is guaranteed to appreciate in value millions of percent.  It's just the crowd that has aggregated around crypto currencies includes a lot of untrustworthy people.   reply    reply    reply  reply reply        webXL  1 day ago    | root | parent | next  [–]      Why do people need to be on guard for those beliefs? People should be critical thinkers and not thought police. Granted, there are all kinds of whackos in crypto, but we should only be concerned about the immoral ones trying to scam us out of our money: SBF, Do-Kwon, and the like.    reply           webXL  1 day ago    | root | parent | next  [–]      Why do people need to be on guard for those beliefs? People should be critical thinkers and not thought police. Granted, there are all kinds of whackos in crypto, but we should only be concerned about the immoral ones trying to scam us out of our money: SBF, Do-Kwon, and the like.    reply           webXL  1 day ago    | root | parent | next  [–]      Why do people need to be on guard for those beliefs? People should be critical thinkers and not thought police. Granted, there are all kinds of whackos in crypto, but we should only be concerned about the immoral ones trying to scam us out of our money: SBF, Do-Kwon, and the like.    reply          webXL  1 day ago    | root | parent | next  [–]      Why do people need to be on guard for those beliefs? People should be critical thinkers and not thought police. Granted, there are all kinds of whackos in crypto, but we should only be concerned about the immoral ones trying to scam us out of our money: SBF, Do-Kwon, and the like.    reply          webXL  1 day ago    | root | parent | next  [–]      Why do people need to be on guard for those beliefs? People should be critical thinkers and not thought police. Granted, there are all kinds of whackos in crypto, but we should only be concerned about the immoral ones trying to scam us out of our money: SBF, Do-Kwon, and the like.    reply          webXL  1 day ago    | root | parent | next  [–]      Why do people need to be on guard for those beliefs? People should be critical thinkers and not thought police. Granted, there are all kinds of whackos in crypto, but we should only be concerned about the immoral ones trying to scam us out of our money: SBF, Do-Kwon, and the like.    reply    webXL  1 day ago    | root | parent | next  [–]     webXL  1 day ago    | root | parent | next  [–]    webXL 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  Why do people need to be on guard for those beliefs? People should be critical thinkers and not thought police. Granted, there are all kinds of whackos in crypto, but we should only be concerned about the immoral ones trying to scam us out of our money: SBF, Do-Kwon, and the like.    reply   Why do people need to be on guard for those beliefs? People should be critical thinkers and not thought police. Granted, there are all kinds of whackos in crypto, but we should only be concerned about the immoral ones trying to scam us out of our money: SBF, Do-Kwon, and the like. Granted, there are all kinds of whackos in crypto, but we should only be concerned about the immoral ones trying to scam us out of our money: SBF, Do-Kwon, and the like.   reply    reply    reply  reply reply        sweeter  22 hours ago    | root | parent | next  [–]      people are legitimately buying farming land in the US and currently suing farmers for \"anti-trust\" for refusing to sell them their land so that they can quite literally create a crypto based sovereign micro-nation of wealthy tech VC's. [1] and I think that is a selfish, vile and delusional thing to do. It has nothing to do with \"thought police\" its as simple as looking at the impact of their actions and beliefs and making the decision to reject that way of thinking and way of life. 1: https://www.youtube.com/watch?v=PHlcAx-I0oY    reply           sweeter  22 hours ago    | root | parent | next  [–]      people are legitimately buying farming land in the US and currently suing farmers for \"anti-trust\" for refusing to sell them their land so that they can quite literally create a crypto based sovereign micro-nation of wealthy tech VC's. [1] and I think that is a selfish, vile and delusional thing to do. It has nothing to do with \"thought police\" its as simple as looking at the impact of their actions and beliefs and making the decision to reject that way of thinking and way of life. 1: https://www.youtube.com/watch?v=PHlcAx-I0oY    reply           sweeter  22 hours ago    | root | parent | next  [–]      people are legitimately buying farming land in the US and currently suing farmers for \"anti-trust\" for refusing to sell them their land so that they can quite literally create a crypto based sovereign micro-nation of wealthy tech VC's. [1] and I think that is a selfish, vile and delusional thing to do. It has nothing to do with \"thought police\" its as simple as looking at the impact of their actions and beliefs and making the decision to reject that way of thinking and way of life. 1: https://www.youtube.com/watch?v=PHlcAx-I0oY    reply          sweeter  22 hours ago    | root | parent | next  [–]      people are legitimately buying farming land in the US and currently suing farmers for \"anti-trust\" for refusing to sell them their land so that they can quite literally create a crypto based sovereign micro-nation of wealthy tech VC's. [1] and I think that is a selfish, vile and delusional thing to do. It has nothing to do with \"thought police\" its as simple as looking at the impact of their actions and beliefs and making the decision to reject that way of thinking and way of life. 1: https://www.youtube.com/watch?v=PHlcAx-I0oY    reply          sweeter  22 hours ago    | root | parent | next  [–]      people are legitimately buying farming land in the US and currently suing farmers for \"anti-trust\" for refusing to sell them their land so that they can quite literally create a crypto based sovereign micro-nation of wealthy tech VC's. [1] and I think that is a selfish, vile and delusional thing to do. It has nothing to do with \"thought police\" its as simple as looking at the impact of their actions and beliefs and making the decision to reject that way of thinking and way of life. 1: https://www.youtube.com/watch?v=PHlcAx-I0oY    reply          sweeter  22 hours ago    | root | parent | next  [–]      people are legitimately buying farming land in the US and currently suing farmers for \"anti-trust\" for refusing to sell them their land so that they can quite literally create a crypto based sovereign micro-nation of wealthy tech VC's. [1] and I think that is a selfish, vile and delusional thing to do. It has nothing to do with \"thought police\" its as simple as looking at the impact of their actions and beliefs and making the decision to reject that way of thinking and way of life. 1: https://www.youtube.com/watch?v=PHlcAx-I0oY    reply    sweeter  22 hours ago    | root | parent | next  [–]     sweeter  22 hours ago    | root | parent | next  [–]    sweeter 22 hours ago 22 hours ago | root | parent | next  [–]   root parent next [–]  people are legitimately buying farming land in the US and currently suing farmers for \"anti-trust\" for refusing to sell them their land so that they can quite literally create a crypto based sovereign micro-nation of wealthy tech VC's. [1] and I think that is a selfish, vile and delusional thing to do. It has nothing to do with \"thought police\" its as simple as looking at the impact of their actions and beliefs and making the decision to reject that way of thinking and way of life. 1: https://www.youtube.com/watch?v=PHlcAx-I0oY    reply   people are legitimately buying farming land in the US and currently suing farmers for \"anti-trust\" for refusing to sell them their land so that they can quite literally create a crypto based sovereign micro-nation of wealthy tech VC's. [1] and I think that is a selfish, vile and delusional thing to do. It has nothing to do with \"thought police\" its as simple as looking at the impact of their actions and beliefs and making the decision to reject that way of thinking and way of life. 1: https://www.youtube.com/watch?v=PHlcAx-I0oY 1: https://www.youtube.com/watch?v=PHlcAx-I0oY https://www.youtube.com/watch?v=PHlcAx-I0oY   reply    reply    reply  reply reply        ShroudedNight  1 day ago    | root | parent | prev | next  [–]      The trough of disillusionment carved out by grifters burning the peat of enthusiasm unsustainably.    reply           ShroudedNight  1 day ago    | root | parent | prev | next  [–]      The trough of disillusionment carved out by grifters burning the peat of enthusiasm unsustainably.    reply           ShroudedNight  1 day ago    | root | parent | prev | next  [–]      The trough of disillusionment carved out by grifters burning the peat of enthusiasm unsustainably.    reply          ShroudedNight  1 day ago    | root | parent | prev | next  [–]      The trough of disillusionment carved out by grifters burning the peat of enthusiasm unsustainably.    reply          ShroudedNight  1 day ago    | root | parent | prev | next  [–]      The trough of disillusionment carved out by grifters burning the peat of enthusiasm unsustainably.    reply          ShroudedNight  1 day ago    | root | parent | prev | next  [–]      The trough of disillusionment carved out by grifters burning the peat of enthusiasm unsustainably.    reply    ShroudedNight  1 day ago    | root | parent | prev | next  [–]     ShroudedNight  1 day ago    | root | parent | prev | next  [–]    ShroudedNight 1 day ago 1 day ago | root | parent | prev | next  [–]   root parent prev next [–]  The trough of disillusionment carved out by grifters burning the peat of enthusiasm unsustainably.    reply   The trough of disillusionment carved out by grifters burning the peat of enthusiasm unsustainably.   reply    reply    reply  reply reply        nly  1 day ago    | parent | prev | next  [–]      A lot of slowness comes typically comes from wanting to avoid methods that enable side-channel timing attacks    reply           nly  1 day ago    | parent | prev | next  [–]      A lot of slowness comes typically comes from wanting to avoid methods that enable side-channel timing attacks    reply           nly  1 day ago    | parent | prev | next  [–]      A lot of slowness comes typically comes from wanting to avoid methods that enable side-channel timing attacks    reply          nly  1 day ago    | parent | prev | next  [–]      A lot of slowness comes typically comes from wanting to avoid methods that enable side-channel timing attacks    reply          nly  1 day ago    | parent | prev | next  [–]      A lot of slowness comes typically comes from wanting to avoid methods that enable side-channel timing attacks    reply          nly  1 day ago    | parent | prev | next  [–]      A lot of slowness comes typically comes from wanting to avoid methods that enable side-channel timing attacks    reply    nly  1 day ago    | parent | prev | next  [–]     nly  1 day ago    | parent | prev | next  [–]    nly 1 day ago 1 day ago | parent | prev | next  [–]   parent prev next [–]  A lot of slowness comes typically comes from wanting to avoid methods that enable side-channel timing attacks    reply   A lot of slowness comes typically comes from wanting to avoid methods that enable side-channel timing attacks   reply    reply    reply  reply reply        inopinatus  1 day ago    | parent | prev | next  [–]      I see they learned clang’s dirty little secret over intrinsics viz. that in producing the IR it deviates (sometimes dramatically when AVX-512 is concerned) from the documented opcodes and the results are inevitably detrimental.    reply           inopinatus  1 day ago    | parent | prev | next  [–]      I see they learned clang’s dirty little secret over intrinsics viz. that in producing the IR it deviates (sometimes dramatically when AVX-512 is concerned) from the documented opcodes and the results are inevitably detrimental.    reply           inopinatus  1 day ago    | parent | prev | next  [–]      I see they learned clang’s dirty little secret over intrinsics viz. that in producing the IR it deviates (sometimes dramatically when AVX-512 is concerned) from the documented opcodes and the results are inevitably detrimental.    reply          inopinatus  1 day ago    | parent | prev | next  [–]      I see they learned clang’s dirty little secret over intrinsics viz. that in producing the IR it deviates (sometimes dramatically when AVX-512 is concerned) from the documented opcodes and the results are inevitably detrimental.    reply          inopinatus  1 day ago    | parent | prev | next  [–]      I see they learned clang’s dirty little secret over intrinsics viz. that in producing the IR it deviates (sometimes dramatically when AVX-512 is concerned) from the documented opcodes and the results are inevitably detrimental.    reply          inopinatus  1 day ago    | parent | prev | next  [–]      I see they learned clang’s dirty little secret over intrinsics viz. that in producing the IR it deviates (sometimes dramatically when AVX-512 is concerned) from the documented opcodes and the results are inevitably detrimental.    reply    inopinatus  1 day ago    | parent | prev | next  [–]     inopinatus  1 day ago    | parent | prev | next  [–]    inopinatus 1 day ago 1 day ago | parent | prev | next  [–]   parent prev next [–]  I see they learned clang’s dirty little secret over intrinsics viz. that in producing the IR it deviates (sometimes dramatically when AVX-512 is concerned) from the documented opcodes and the results are inevitably detrimental.    reply   I see they learned clang’s dirty little secret over intrinsics viz. that in producing the IR it deviates (sometimes dramatically when AVX-512 is concerned) from the documented opcodes and the results are inevitably detrimental.   reply    reply    reply  reply reply        astrange  1 day ago    | root | parent | next  [–]      This is why ffmpeg uses assembly, and people get extremely mad when you say it's done for a reason, because they always want to come up with a fancier abstraction (usually cross-platform) which then defeats the purpose because it doesn't actually work. nb those abstractions do make sense when you can only afford to write a single implementation of the algorithm; then you're just talking about a high level programming language. But they frequently fail to achieve their goal when you're writing a second implementation for the sole purpose of being faster.    reply           astrange  1 day ago    | root | parent | next  [–]      This is why ffmpeg uses assembly, and people get extremely mad when you say it's done for a reason, because they always want to come up with a fancier abstraction (usually cross-platform) which then defeats the purpose because it doesn't actually work. nb those abstractions do make sense when you can only afford to write a single implementation of the algorithm; then you're just talking about a high level programming language. But they frequently fail to achieve their goal when you're writing a second implementation for the sole purpose of being faster.    reply           astrange  1 day ago    | root | parent | next  [–]      This is why ffmpeg uses assembly, and people get extremely mad when you say it's done for a reason, because they always want to come up with a fancier abstraction (usually cross-platform) which then defeats the purpose because it doesn't actually work. nb those abstractions do make sense when you can only afford to write a single implementation of the algorithm; then you're just talking about a high level programming language. But they frequently fail to achieve their goal when you're writing a second implementation for the sole purpose of being faster.    reply          astrange  1 day ago    | root | parent | next  [–]      This is why ffmpeg uses assembly, and people get extremely mad when you say it's done for a reason, because they always want to come up with a fancier abstraction (usually cross-platform) which then defeats the purpose because it doesn't actually work. nb those abstractions do make sense when you can only afford to write a single implementation of the algorithm; then you're just talking about a high level programming language. But they frequently fail to achieve their goal when you're writing a second implementation for the sole purpose of being faster.    reply          astrange  1 day ago    | root | parent | next  [–]      This is why ffmpeg uses assembly, and people get extremely mad when you say it's done for a reason, because they always want to come up with a fancier abstraction (usually cross-platform) which then defeats the purpose because it doesn't actually work. nb those abstractions do make sense when you can only afford to write a single implementation of the algorithm; then you're just talking about a high level programming language. But they frequently fail to achieve their goal when you're writing a second implementation for the sole purpose of being faster.    reply          astrange  1 day ago    | root | parent | next  [–]      This is why ffmpeg uses assembly, and people get extremely mad when you say it's done for a reason, because they always want to come up with a fancier abstraction (usually cross-platform) which then defeats the purpose because it doesn't actually work. nb those abstractions do make sense when you can only afford to write a single implementation of the algorithm; then you're just talking about a high level programming language. But they frequently fail to achieve their goal when you're writing a second implementation for the sole purpose of being faster.    reply    astrange  1 day ago    | root | parent | next  [–]     astrange  1 day ago    | root | parent | next  [–]    astrange 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  This is why ffmpeg uses assembly, and people get extremely mad when you say it's done for a reason, because they always want to come up with a fancier abstraction (usually cross-platform) which then defeats the purpose because it doesn't actually work. nb those abstractions do make sense when you can only afford to write a single implementation of the algorithm; then you're just talking about a high level programming language. But they frequently fail to achieve their goal when you're writing a second implementation for the sole purpose of being faster.    reply   This is why ffmpeg uses assembly, and people get extremely mad when you say it's done for a reason, because they always want to come up with a fancier abstraction (usually cross-platform) which then defeats the purpose because it doesn't actually work. nb those abstractions do make sense when you can only afford to write a single implementation of the algorithm; then you're just talking about a high level programming language. But they frequently fail to achieve their goal when you're writing a second implementation for the sole purpose of being faster. nb those abstractions do make sense when you can only afford to write a single implementation of the algorithm; then you're just talking about a high level programming language. But they frequently fail to achieve their goal when you're writing a second implementation for the sole purpose of being faster.   reply    reply    reply  reply reply        electricshampo1  1 day ago    | parent | prev | next  [–]      Completely agree re: firedancer codebase. There is a level of thought and discipline wrt performance that I have never seen anywhere else.    reply           electricshampo1  1 day ago    | parent | prev | next  [–]      Completely agree re: firedancer codebase. There is a level of thought and discipline wrt performance that I have never seen anywhere else.    reply           electricshampo1  1 day ago    | parent | prev | next  [–]      Completely agree re: firedancer codebase. There is a level of thought and discipline wrt performance that I have never seen anywhere else.    reply          electricshampo1  1 day ago    | parent | prev | next  [–]      Completely agree re: firedancer codebase. There is a level of thought and discipline wrt performance that I have never seen anywhere else.    reply          electricshampo1  1 day ago    | parent | prev | next  [–]      Completely agree re: firedancer codebase. There is a level of thought and discipline wrt performance that I have never seen anywhere else.    reply          electricshampo1  1 day ago    | parent | prev | next  [–]      Completely agree re: firedancer codebase. There is a level of thought and discipline wrt performance that I have never seen anywhere else.    reply    electricshampo1  1 day ago    | parent | prev | next  [–]     electricshampo1  1 day ago    | parent | prev | next  [–]    electricshampo1 1 day ago 1 day ago | parent | prev | next  [–]   parent prev next [–]  Completely agree re: firedancer codebase. There is a level of thought and discipline wrt performance that I have never seen anywhere else.    reply   Completely agree re: firedancer codebase. There is a level of thought and discipline wrt performance that I have never seen anywhere else.   reply    reply    reply  reply reply        dhx  1 day ago    | root | parent | next  [–]      It's much more than just performance they've thought about. Here are some of the secure programming practices that have been implemented:  /* All the functions in this file are considered \"secure\", specifically:\n     - Constant time in the input, i.e. the input can be a secret[2]\n     - Small and auditable code base, incl. simple types\n     - Either, no local variables = no need to clear them before exit (most functions)\n     - Or, only static allocation + clear local variable before exit (fd_ed25519_scalar_mul_base_const_time)\n     - Clear registers via FD_FN_SENSITIVE[3]\n     - C safety\n  */ libsodium[4] implements similar mechanisms, and Linux kernel encryption code does too (example: use of kfree_sensitive)[5]. However, firedancer appears to better avoid moving secrets outside of CPU registers, and [3] explains that libraries such as libsodium have inadequate zeroisation, something which firedancer claims to improve upon. [1] https://github.com/firedancer-io/firedancer/blob/main/src/ba... [2] https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplic... [3] https://eprint.iacr.org/2023/1713 [4] https://libsodium.gitbook.io/doc/internals#security-first [5] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/lin...    reply           dhx  1 day ago    | root | parent | next  [–]      It's much more than just performance they've thought about. Here are some of the secure programming practices that have been implemented:  /* All the functions in this file are considered \"secure\", specifically:\n     - Constant time in the input, i.e. the input can be a secret[2]\n     - Small and auditable code base, incl. simple types\n     - Either, no local variables = no need to clear them before exit (most functions)\n     - Or, only static allocation + clear local variable before exit (fd_ed25519_scalar_mul_base_const_time)\n     - Clear registers via FD_FN_SENSITIVE[3]\n     - C safety\n  */ libsodium[4] implements similar mechanisms, and Linux kernel encryption code does too (example: use of kfree_sensitive)[5]. However, firedancer appears to better avoid moving secrets outside of CPU registers, and [3] explains that libraries such as libsodium have inadequate zeroisation, something which firedancer claims to improve upon. [1] https://github.com/firedancer-io/firedancer/blob/main/src/ba... [2] https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplic... [3] https://eprint.iacr.org/2023/1713 [4] https://libsodium.gitbook.io/doc/internals#security-first [5] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/lin...    reply           dhx  1 day ago    | root | parent | next  [–]      It's much more than just performance they've thought about. Here are some of the secure programming practices that have been implemented:  /* All the functions in this file are considered \"secure\", specifically:\n     - Constant time in the input, i.e. the input can be a secret[2]\n     - Small and auditable code base, incl. simple types\n     - Either, no local variables = no need to clear them before exit (most functions)\n     - Or, only static allocation + clear local variable before exit (fd_ed25519_scalar_mul_base_const_time)\n     - Clear registers via FD_FN_SENSITIVE[3]\n     - C safety\n  */ libsodium[4] implements similar mechanisms, and Linux kernel encryption code does too (example: use of kfree_sensitive)[5]. However, firedancer appears to better avoid moving secrets outside of CPU registers, and [3] explains that libraries such as libsodium have inadequate zeroisation, something which firedancer claims to improve upon. [1] https://github.com/firedancer-io/firedancer/blob/main/src/ba... [2] https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplic... [3] https://eprint.iacr.org/2023/1713 [4] https://libsodium.gitbook.io/doc/internals#security-first [5] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/lin...    reply          dhx  1 day ago    | root | parent | next  [–]      It's much more than just performance they've thought about. Here are some of the secure programming practices that have been implemented:  /* All the functions in this file are considered \"secure\", specifically:\n     - Constant time in the input, i.e. the input can be a secret[2]\n     - Small and auditable code base, incl. simple types\n     - Either, no local variables = no need to clear them before exit (most functions)\n     - Or, only static allocation + clear local variable before exit (fd_ed25519_scalar_mul_base_const_time)\n     - Clear registers via FD_FN_SENSITIVE[3]\n     - C safety\n  */ libsodium[4] implements similar mechanisms, and Linux kernel encryption code does too (example: use of kfree_sensitive)[5]. However, firedancer appears to better avoid moving secrets outside of CPU registers, and [3] explains that libraries such as libsodium have inadequate zeroisation, something which firedancer claims to improve upon. [1] https://github.com/firedancer-io/firedancer/blob/main/src/ba... [2] https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplic... [3] https://eprint.iacr.org/2023/1713 [4] https://libsodium.gitbook.io/doc/internals#security-first [5] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/lin...    reply          dhx  1 day ago    | root | parent | next  [–]      It's much more than just performance they've thought about. Here are some of the secure programming practices that have been implemented:  /* All the functions in this file are considered \"secure\", specifically:\n     - Constant time in the input, i.e. the input can be a secret[2]\n     - Small and auditable code base, incl. simple types\n     - Either, no local variables = no need to clear them before exit (most functions)\n     - Or, only static allocation + clear local variable before exit (fd_ed25519_scalar_mul_base_const_time)\n     - Clear registers via FD_FN_SENSITIVE[3]\n     - C safety\n  */ libsodium[4] implements similar mechanisms, and Linux kernel encryption code does too (example: use of kfree_sensitive)[5]. However, firedancer appears to better avoid moving secrets outside of CPU registers, and [3] explains that libraries such as libsodium have inadequate zeroisation, something which firedancer claims to improve upon. [1] https://github.com/firedancer-io/firedancer/blob/main/src/ba... [2] https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplic... [3] https://eprint.iacr.org/2023/1713 [4] https://libsodium.gitbook.io/doc/internals#security-first [5] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/lin...    reply          dhx  1 day ago    | root | parent | next  [–]      It's much more than just performance they've thought about. Here are some of the secure programming practices that have been implemented:  /* All the functions in this file are considered \"secure\", specifically:\n     - Constant time in the input, i.e. the input can be a secret[2]\n     - Small and auditable code base, incl. simple types\n     - Either, no local variables = no need to clear them before exit (most functions)\n     - Or, only static allocation + clear local variable before exit (fd_ed25519_scalar_mul_base_const_time)\n     - Clear registers via FD_FN_SENSITIVE[3]\n     - C safety\n  */ libsodium[4] implements similar mechanisms, and Linux kernel encryption code does too (example: use of kfree_sensitive)[5]. However, firedancer appears to better avoid moving secrets outside of CPU registers, and [3] explains that libraries such as libsodium have inadequate zeroisation, something which firedancer claims to improve upon. [1] https://github.com/firedancer-io/firedancer/blob/main/src/ba... [2] https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplic... [3] https://eprint.iacr.org/2023/1713 [4] https://libsodium.gitbook.io/doc/internals#security-first [5] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/lin...    reply    dhx  1 day ago    | root | parent | next  [–]     dhx  1 day ago    | root | parent | next  [–]    dhx 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  It's much more than just performance they've thought about. Here are some of the secure programming practices that have been implemented:  /* All the functions in this file are considered \"secure\", specifically:\n     - Constant time in the input, i.e. the input can be a secret[2]\n     - Small and auditable code base, incl. simple types\n     - Either, no local variables = no need to clear them before exit (most functions)\n     - Or, only static allocation + clear local variable before exit (fd_ed25519_scalar_mul_base_const_time)\n     - Clear registers via FD_FN_SENSITIVE[3]\n     - C safety\n  */ libsodium[4] implements similar mechanisms, and Linux kernel encryption code does too (example: use of kfree_sensitive)[5]. However, firedancer appears to better avoid moving secrets outside of CPU registers, and [3] explains that libraries such as libsodium have inadequate zeroisation, something which firedancer claims to improve upon. [1] https://github.com/firedancer-io/firedancer/blob/main/src/ba... [2] https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplic... [3] https://eprint.iacr.org/2023/1713 [4] https://libsodium.gitbook.io/doc/internals#security-first [5] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/lin...    reply   It's much more than just performance they've thought about. Here are some of the secure programming practices that have been implemented:  /* All the functions in this file are considered \"secure\", specifically:\n     - Constant time in the input, i.e. the input can be a secret[2]\n     - Small and auditable code base, incl. simple types\n     - Either, no local variables = no need to clear them before exit (most functions)\n     - Or, only static allocation + clear local variable before exit (fd_ed25519_scalar_mul_base_const_time)\n     - Clear registers via FD_FN_SENSITIVE[3]\n     - C safety\n  */ libsodium[4] implements similar mechanisms, and Linux kernel encryption code does too (example: use of kfree_sensitive)[5]. However, firedancer appears to better avoid moving secrets outside of CPU registers, and [3] explains that libraries such as libsodium have inadequate zeroisation, something which firedancer claims to improve upon. [1] https://github.com/firedancer-io/firedancer/blob/main/src/ba... [2] https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplic... [3] https://eprint.iacr.org/2023/1713 [4] https://libsodium.gitbook.io/doc/internals#security-first [5] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/lin... /* All the functions in this file are considered \"secure\", specifically:\n     - Constant time in the input, i.e. the input can be a secret[2]\n     - Small and auditable code base, incl. simple types\n     - Either, no local variables = no need to clear them before exit (most functions)\n     - Or, only static allocation + clear local variable before exit (fd_ed25519_scalar_mul_base_const_time)\n     - Clear registers via FD_FN_SENSITIVE[3]\n     - C safety\n  */ /* All the functions in this file are considered \"secure\", specifically:\n     - Constant time in the input, i.e. the input can be a secret[2]\n     - Small and auditable code base, incl. simple types\n     - Either, no local variables = no need to clear them before exit (most functions)\n     - Or, only static allocation + clear local variable before exit (fd_ed25519_scalar_mul_base_const_time)\n     - Clear registers via FD_FN_SENSITIVE[3]\n     - C safety\n  */ [1] https://github.com/firedancer-io/firedancer/blob/main/src/ba... https://github.com/firedancer-io/firedancer/blob/main/src/ba... [2] https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplic... https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplic... [3] https://eprint.iacr.org/2023/1713 https://eprint.iacr.org/2023/1713 [4] https://libsodium.gitbook.io/doc/internals#security-first https://libsodium.gitbook.io/doc/internals#security-first [5] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/lin... https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/lin...   reply    reply    reply  reply reply        tptacek  1 day ago    | root | parent | next  [–]      These are table stakes for core cryptographic code, and SOT crypto code --- like the Amazon implementation this story is about --- tend at this point all to be derived from formal methods.    reply           tptacek  1 day ago    | root | parent | next  [–]      These are table stakes for core cryptographic code, and SOT crypto code --- like the Amazon implementation this story is about --- tend at this point all to be derived from formal methods.    reply           tptacek  1 day ago    | root | parent | next  [–]      These are table stakes for core cryptographic code, and SOT crypto code --- like the Amazon implementation this story is about --- tend at this point all to be derived from formal methods.    reply          tptacek  1 day ago    | root | parent | next  [–]      These are table stakes for core cryptographic code, and SOT crypto code --- like the Amazon implementation this story is about --- tend at this point all to be derived from formal methods.    reply          tptacek  1 day ago    | root | parent | next  [–]      These are table stakes for core cryptographic code, and SOT crypto code --- like the Amazon implementation this story is about --- tend at this point all to be derived from formal methods.    reply          tptacek  1 day ago    | root | parent | next  [–]      These are table stakes for core cryptographic code, and SOT crypto code --- like the Amazon implementation this story is about --- tend at this point all to be derived from formal methods.    reply    tptacek  1 day ago    | root | parent | next  [–]     tptacek  1 day ago    | root | parent | next  [–]    tptacek 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  These are table stakes for core cryptographic code, and SOT crypto code --- like the Amazon implementation this story is about --- tend at this point all to be derived from formal methods.    reply   These are table stakes for core cryptographic code, and SOT crypto code --- like the Amazon implementation this story is about --- tend at this point all to be derived from formal methods.   reply    reply    reply  reply reply        dhx  1 day ago    | root | parent | next  [–]      As an example, the Amazon implementation doesn't refer to gcc's[1] and clang's[2] \"zero_call_used_regs\" to zeroise CPU registers upon return or exception of functions working on crypto secrets. OpenSSL doesn't either.[3] firedancer _does_ use \"zero_call_used_regs\" to allow gcc/clang to zeroise used CPU registers.[9] As another example, the Amazon implementation also doesn't refer to gcc's \"strub\" attribute which zeroises the function's stack upon return or exception of functions working on crypto secrets.[4][5] OpenSSL doesn't either.[3] firedancer _does_ use the \"strub\" attribute to allow gcc to zeroise the function's stack.[9] Is there a performance impact? [6] has the overhead at 0% for X25519 for implementing CPU register and stack zeroisation. Compiling the Linux kernel with \"CONFIG_ZERO_CALL_USED_REGS=1\" for x64_64 (impacting all kernel functions) was found to result in a 1-1.5% performance penalty.[7][8] [1] https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attribute... [2] https://clang.llvm.org/docs/AttributeReference.html#zero-cal... [3] https://github.com/openssl/openssl/discussions/24321 [4] https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Common-Type-At... [5] https://gcc.gnu.org/onlinedocs/gcc/Stack-Scrubbing.html [6] https://eprint.iacr.org/2023/1713.pdf [7] https://www.phoronix.com/review/zero-used-regs/5 [8] https://lore.kernel.org/lkml/20210505191804.4015873-1-keesco... [9] FD_FN_UNSANITIZED: https://github.com/firedancer-io/firedancer/blob/master/src/...    reply           dhx  1 day ago    | root | parent | next  [–]      As an example, the Amazon implementation doesn't refer to gcc's[1] and clang's[2] \"zero_call_used_regs\" to zeroise CPU registers upon return or exception of functions working on crypto secrets. OpenSSL doesn't either.[3] firedancer _does_ use \"zero_call_used_regs\" to allow gcc/clang to zeroise used CPU registers.[9] As another example, the Amazon implementation also doesn't refer to gcc's \"strub\" attribute which zeroises the function's stack upon return or exception of functions working on crypto secrets.[4][5] OpenSSL doesn't either.[3] firedancer _does_ use the \"strub\" attribute to allow gcc to zeroise the function's stack.[9] Is there a performance impact? [6] has the overhead at 0% for X25519 for implementing CPU register and stack zeroisation. Compiling the Linux kernel with \"CONFIG_ZERO_CALL_USED_REGS=1\" for x64_64 (impacting all kernel functions) was found to result in a 1-1.5% performance penalty.[7][8] [1] https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attribute... [2] https://clang.llvm.org/docs/AttributeReference.html#zero-cal... [3] https://github.com/openssl/openssl/discussions/24321 [4] https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Common-Type-At... [5] https://gcc.gnu.org/onlinedocs/gcc/Stack-Scrubbing.html [6] https://eprint.iacr.org/2023/1713.pdf [7] https://www.phoronix.com/review/zero-used-regs/5 [8] https://lore.kernel.org/lkml/20210505191804.4015873-1-keesco... [9] FD_FN_UNSANITIZED: https://github.com/firedancer-io/firedancer/blob/master/src/...    reply           dhx  1 day ago    | root | parent | next  [–]      As an example, the Amazon implementation doesn't refer to gcc's[1] and clang's[2] \"zero_call_used_regs\" to zeroise CPU registers upon return or exception of functions working on crypto secrets. OpenSSL doesn't either.[3] firedancer _does_ use \"zero_call_used_regs\" to allow gcc/clang to zeroise used CPU registers.[9] As another example, the Amazon implementation also doesn't refer to gcc's \"strub\" attribute which zeroises the function's stack upon return or exception of functions working on crypto secrets.[4][5] OpenSSL doesn't either.[3] firedancer _does_ use the \"strub\" attribute to allow gcc to zeroise the function's stack.[9] Is there a performance impact? [6] has the overhead at 0% for X25519 for implementing CPU register and stack zeroisation. Compiling the Linux kernel with \"CONFIG_ZERO_CALL_USED_REGS=1\" for x64_64 (impacting all kernel functions) was found to result in a 1-1.5% performance penalty.[7][8] [1] https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attribute... [2] https://clang.llvm.org/docs/AttributeReference.html#zero-cal... [3] https://github.com/openssl/openssl/discussions/24321 [4] https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Common-Type-At... [5] https://gcc.gnu.org/onlinedocs/gcc/Stack-Scrubbing.html [6] https://eprint.iacr.org/2023/1713.pdf [7] https://www.phoronix.com/review/zero-used-regs/5 [8] https://lore.kernel.org/lkml/20210505191804.4015873-1-keesco... [9] FD_FN_UNSANITIZED: https://github.com/firedancer-io/firedancer/blob/master/src/...    reply          dhx  1 day ago    | root | parent | next  [–]      As an example, the Amazon implementation doesn't refer to gcc's[1] and clang's[2] \"zero_call_used_regs\" to zeroise CPU registers upon return or exception of functions working on crypto secrets. OpenSSL doesn't either.[3] firedancer _does_ use \"zero_call_used_regs\" to allow gcc/clang to zeroise used CPU registers.[9] As another example, the Amazon implementation also doesn't refer to gcc's \"strub\" attribute which zeroises the function's stack upon return or exception of functions working on crypto secrets.[4][5] OpenSSL doesn't either.[3] firedancer _does_ use the \"strub\" attribute to allow gcc to zeroise the function's stack.[9] Is there a performance impact? [6] has the overhead at 0% for X25519 for implementing CPU register and stack zeroisation. Compiling the Linux kernel with \"CONFIG_ZERO_CALL_USED_REGS=1\" for x64_64 (impacting all kernel functions) was found to result in a 1-1.5% performance penalty.[7][8] [1] https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attribute... [2] https://clang.llvm.org/docs/AttributeReference.html#zero-cal... [3] https://github.com/openssl/openssl/discussions/24321 [4] https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Common-Type-At... [5] https://gcc.gnu.org/onlinedocs/gcc/Stack-Scrubbing.html [6] https://eprint.iacr.org/2023/1713.pdf [7] https://www.phoronix.com/review/zero-used-regs/5 [8] https://lore.kernel.org/lkml/20210505191804.4015873-1-keesco... [9] FD_FN_UNSANITIZED: https://github.com/firedancer-io/firedancer/blob/master/src/...    reply          dhx  1 day ago    | root | parent | next  [–]      As an example, the Amazon implementation doesn't refer to gcc's[1] and clang's[2] \"zero_call_used_regs\" to zeroise CPU registers upon return or exception of functions working on crypto secrets. OpenSSL doesn't either.[3] firedancer _does_ use \"zero_call_used_regs\" to allow gcc/clang to zeroise used CPU registers.[9] As another example, the Amazon implementation also doesn't refer to gcc's \"strub\" attribute which zeroises the function's stack upon return or exception of functions working on crypto secrets.[4][5] OpenSSL doesn't either.[3] firedancer _does_ use the \"strub\" attribute to allow gcc to zeroise the function's stack.[9] Is there a performance impact? [6] has the overhead at 0% for X25519 for implementing CPU register and stack zeroisation. Compiling the Linux kernel with \"CONFIG_ZERO_CALL_USED_REGS=1\" for x64_64 (impacting all kernel functions) was found to result in a 1-1.5% performance penalty.[7][8] [1] https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attribute... [2] https://clang.llvm.org/docs/AttributeReference.html#zero-cal... [3] https://github.com/openssl/openssl/discussions/24321 [4] https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Common-Type-At... [5] https://gcc.gnu.org/onlinedocs/gcc/Stack-Scrubbing.html [6] https://eprint.iacr.org/2023/1713.pdf [7] https://www.phoronix.com/review/zero-used-regs/5 [8] https://lore.kernel.org/lkml/20210505191804.4015873-1-keesco... [9] FD_FN_UNSANITIZED: https://github.com/firedancer-io/firedancer/blob/master/src/...    reply          dhx  1 day ago    | root | parent | next  [–]      As an example, the Amazon implementation doesn't refer to gcc's[1] and clang's[2] \"zero_call_used_regs\" to zeroise CPU registers upon return or exception of functions working on crypto secrets. OpenSSL doesn't either.[3] firedancer _does_ use \"zero_call_used_regs\" to allow gcc/clang to zeroise used CPU registers.[9] As another example, the Amazon implementation also doesn't refer to gcc's \"strub\" attribute which zeroises the function's stack upon return or exception of functions working on crypto secrets.[4][5] OpenSSL doesn't either.[3] firedancer _does_ use the \"strub\" attribute to allow gcc to zeroise the function's stack.[9] Is there a performance impact? [6] has the overhead at 0% for X25519 for implementing CPU register and stack zeroisation. Compiling the Linux kernel with \"CONFIG_ZERO_CALL_USED_REGS=1\" for x64_64 (impacting all kernel functions) was found to result in a 1-1.5% performance penalty.[7][8] [1] https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attribute... [2] https://clang.llvm.org/docs/AttributeReference.html#zero-cal... [3] https://github.com/openssl/openssl/discussions/24321 [4] https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Common-Type-At... [5] https://gcc.gnu.org/onlinedocs/gcc/Stack-Scrubbing.html [6] https://eprint.iacr.org/2023/1713.pdf [7] https://www.phoronix.com/review/zero-used-regs/5 [8] https://lore.kernel.org/lkml/20210505191804.4015873-1-keesco... [9] FD_FN_UNSANITIZED: https://github.com/firedancer-io/firedancer/blob/master/src/...    reply    dhx  1 day ago    | root | parent | next  [–]     dhx  1 day ago    | root | parent | next  [–]    dhx 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  As an example, the Amazon implementation doesn't refer to gcc's[1] and clang's[2] \"zero_call_used_regs\" to zeroise CPU registers upon return or exception of functions working on crypto secrets. OpenSSL doesn't either.[3] firedancer _does_ use \"zero_call_used_regs\" to allow gcc/clang to zeroise used CPU registers.[9] As another example, the Amazon implementation also doesn't refer to gcc's \"strub\" attribute which zeroises the function's stack upon return or exception of functions working on crypto secrets.[4][5] OpenSSL doesn't either.[3] firedancer _does_ use the \"strub\" attribute to allow gcc to zeroise the function's stack.[9] Is there a performance impact? [6] has the overhead at 0% for X25519 for implementing CPU register and stack zeroisation. Compiling the Linux kernel with \"CONFIG_ZERO_CALL_USED_REGS=1\" for x64_64 (impacting all kernel functions) was found to result in a 1-1.5% performance penalty.[7][8] [1] https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attribute... [2] https://clang.llvm.org/docs/AttributeReference.html#zero-cal... [3] https://github.com/openssl/openssl/discussions/24321 [4] https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Common-Type-At... [5] https://gcc.gnu.org/onlinedocs/gcc/Stack-Scrubbing.html [6] https://eprint.iacr.org/2023/1713.pdf [7] https://www.phoronix.com/review/zero-used-regs/5 [8] https://lore.kernel.org/lkml/20210505191804.4015873-1-keesco... [9] FD_FN_UNSANITIZED: https://github.com/firedancer-io/firedancer/blob/master/src/...    reply   As an example, the Amazon implementation doesn't refer to gcc's[1] and clang's[2] \"zero_call_used_regs\" to zeroise CPU registers upon return or exception of functions working on crypto secrets. OpenSSL doesn't either.[3] firedancer _does_ use \"zero_call_used_regs\" to allow gcc/clang to zeroise used CPU registers.[9] As another example, the Amazon implementation also doesn't refer to gcc's \"strub\" attribute which zeroises the function's stack upon return or exception of functions working on crypto secrets.[4][5] OpenSSL doesn't either.[3] firedancer _does_ use the \"strub\" attribute to allow gcc to zeroise the function's stack.[9] Is there a performance impact? [6] has the overhead at 0% for X25519 for implementing CPU register and stack zeroisation. Compiling the Linux kernel with \"CONFIG_ZERO_CALL_USED_REGS=1\" for x64_64 (impacting all kernel functions) was found to result in a 1-1.5% performance penalty.[7][8] [1] https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attribute... [2] https://clang.llvm.org/docs/AttributeReference.html#zero-cal... [3] https://github.com/openssl/openssl/discussions/24321 [4] https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Common-Type-At... [5] https://gcc.gnu.org/onlinedocs/gcc/Stack-Scrubbing.html [6] https://eprint.iacr.org/2023/1713.pdf [7] https://www.phoronix.com/review/zero-used-regs/5 [8] https://lore.kernel.org/lkml/20210505191804.4015873-1-keesco... [9] FD_FN_UNSANITIZED: https://github.com/firedancer-io/firedancer/blob/master/src/... As another example, the Amazon implementation also doesn't refer to gcc's \"strub\" attribute which zeroises the function's stack upon return or exception of functions working on crypto secrets.[4][5] OpenSSL doesn't either.[3] firedancer _does_ use the \"strub\" attribute to allow gcc to zeroise the function's stack.[9] Is there a performance impact? [6] has the overhead at 0% for X25519 for implementing CPU register and stack zeroisation. Compiling the Linux kernel with \"CONFIG_ZERO_CALL_USED_REGS=1\" for x64_64 (impacting all kernel functions) was found to result in a 1-1.5% performance penalty.[7][8] [1] https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attribute... https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attribute... [2] https://clang.llvm.org/docs/AttributeReference.html#zero-cal... https://clang.llvm.org/docs/AttributeReference.html#zero-cal... [3] https://github.com/openssl/openssl/discussions/24321 https://github.com/openssl/openssl/discussions/24321 [4] https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Common-Type-At... https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Common-Type-At... [5] https://gcc.gnu.org/onlinedocs/gcc/Stack-Scrubbing.html https://gcc.gnu.org/onlinedocs/gcc/Stack-Scrubbing.html [6] https://eprint.iacr.org/2023/1713.pdf https://eprint.iacr.org/2023/1713.pdf [7] https://www.phoronix.com/review/zero-used-regs/5 https://www.phoronix.com/review/zero-used-regs/5 [8] https://lore.kernel.org/lkml/20210505191804.4015873-1-keesco... https://lore.kernel.org/lkml/20210505191804.4015873-1-keesco... [9] FD_FN_UNSANITIZED: https://github.com/firedancer-io/firedancer/blob/master/src/... https://github.com/firedancer-io/firedancer/blob/master/src/...   reply    reply    reply  reply reply        jandrese  1 day ago    | root | parent | next  [–]      Zeroizing a register seems pretty straightforward.  Zeroizing any cache that it may have touched seems a lot more complex.  I guess that's why they work so hard to keep everything in registers.  Lucky for them we aren't in the x86 era anymore and there are a useful number of registers.  I'll need to read up on how they avoid context switches while their registers are loaded.    reply           jandrese  1 day ago    | root | parent | next  [–]      Zeroizing a register seems pretty straightforward.  Zeroizing any cache that it may have touched seems a lot more complex.  I guess that's why they work so hard to keep everything in registers.  Lucky for them we aren't in the x86 era anymore and there are a useful number of registers.  I'll need to read up on how they avoid context switches while their registers are loaded.    reply           jandrese  1 day ago    | root | parent | next  [–]      Zeroizing a register seems pretty straightforward.  Zeroizing any cache that it may have touched seems a lot more complex.  I guess that's why they work so hard to keep everything in registers.  Lucky for them we aren't in the x86 era anymore and there are a useful number of registers.  I'll need to read up on how they avoid context switches while their registers are loaded.    reply          jandrese  1 day ago    | root | parent | next  [–]      Zeroizing a register seems pretty straightforward.  Zeroizing any cache that it may have touched seems a lot more complex.  I guess that's why they work so hard to keep everything in registers.  Lucky for them we aren't in the x86 era anymore and there are a useful number of registers.  I'll need to read up on how they avoid context switches while their registers are loaded.    reply          jandrese  1 day ago    | root | parent | next  [–]      Zeroizing a register seems pretty straightforward.  Zeroizing any cache that it may have touched seems a lot more complex.  I guess that's why they work so hard to keep everything in registers.  Lucky for them we aren't in the x86 era anymore and there are a useful number of registers.  I'll need to read up on how they avoid context switches while their registers are loaded.    reply          jandrese  1 day ago    | root | parent | next  [–]      Zeroizing a register seems pretty straightforward.  Zeroizing any cache that it may have touched seems a lot more complex.  I guess that's why they work so hard to keep everything in registers.  Lucky for them we aren't in the x86 era anymore and there are a useful number of registers.  I'll need to read up on how they avoid context switches while their registers are loaded.    reply    jandrese  1 day ago    | root | parent | next  [–]     jandrese  1 day ago    | root | parent | next  [–]    jandrese 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  Zeroizing a register seems pretty straightforward.  Zeroizing any cache that it may have touched seems a lot more complex.  I guess that's why they work so hard to keep everything in registers.  Lucky for them we aren't in the x86 era anymore and there are a useful number of registers.  I'll need to read up on how they avoid context switches while their registers are loaded.    reply   Zeroizing a register seems pretty straightforward.  Zeroizing any cache that it may have touched seems a lot more complex.  I guess that's why they work so hard to keep everything in registers.  Lucky for them we aren't in the x86 era anymore and there are a useful number of registers.  I'll need to read up on how they avoid context switches while their registers are loaded.   reply    reply    reply  reply reply        SEJeff  1 day ago    | root | parent | prev | next  [–]      That team is full of world experts in high performance computing.    reply           SEJeff  1 day ago    | root | parent | prev | next  [–]      That team is full of world experts in high performance computing.    reply           SEJeff  1 day ago    | root | parent | prev | next  [–]      That team is full of world experts in high performance computing.    reply          SEJeff  1 day ago    | root | parent | prev | next  [–]      That team is full of world experts in high performance computing.    reply          SEJeff  1 day ago    | root | parent | prev | next  [–]      That team is full of world experts in high performance computing.    reply          SEJeff  1 day ago    | root | parent | prev | next  [–]      That team is full of world experts in high performance computing.    reply    SEJeff  1 day ago    | root | parent | prev | next  [–]     SEJeff  1 day ago    | root | parent | prev | next  [–]    SEJeff 1 day ago 1 day ago | root | parent | prev | next  [–]   root parent prev next [–]  That team is full of world experts in high performance computing.    reply   That team is full of world experts in high performance computing.   reply    reply    reply  reply reply        pantalaimon  1 day ago    | parent | prev | next  [–]      That looks really neat, but I still don't understand what firedancer actually is - what is a validator client for Solana and why does it need it's own crypto library?    reply           pantalaimon  1 day ago    | parent | prev | next  [–]      That looks really neat, but I still don't understand what firedancer actually is - what is a validator client for Solana and why does it need it's own crypto library?    reply           pantalaimon  1 day ago    | parent | prev | next  [–]      That looks really neat, but I still don't understand what firedancer actually is - what is a validator client for Solana and why does it need it's own crypto library?    reply          pantalaimon  1 day ago    | parent | prev | next  [–]      That looks really neat, but I still don't understand what firedancer actually is - what is a validator client for Solana and why does it need it's own crypto library?    reply          pantalaimon  1 day ago    | parent | prev | next  [–]      That looks really neat, but I still don't understand what firedancer actually is - what is a validator client for Solana and why does it need it's own crypto library?    reply          pantalaimon  1 day ago    | parent | prev | next  [–]      That looks really neat, but I still don't understand what firedancer actually is - what is a validator client for Solana and why does it need it's own crypto library?    reply    pantalaimon  1 day ago    | parent | prev | next  [–]     pantalaimon  1 day ago    | parent | prev | next  [–]    pantalaimon 1 day ago 1 day ago | parent | prev | next  [–]   parent prev next [–]  That looks really neat, but I still don't understand what firedancer actually is - what is a validator client for Solana and why does it need it's own crypto library?    reply   That looks really neat, but I still don't understand what firedancer actually is - what is a validator client for Solana and why does it need it's own crypto library? is   reply    reply    reply  reply reply        SEJeff  1 day ago    | root | parent | next  [–]      It’s a new from scratch implementation of a validator for Solana the fastest blockchain by several orders of magnitude. The slowest part is signature verification so they sped up hashing to improve performance of the entire system. They follow a first principles approach (the lead has a few physics degrees) and opted to speed up the cryptography. The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. It’s a win in cryptography, much like this Amazon post is, except it’s slower than the firedancer implementation.    reply           SEJeff  1 day ago    | root | parent | next  [–]      It’s a new from scratch implementation of a validator for Solana the fastest blockchain by several orders of magnitude. The slowest part is signature verification so they sped up hashing to improve performance of the entire system. They follow a first principles approach (the lead has a few physics degrees) and opted to speed up the cryptography. The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. It’s a win in cryptography, much like this Amazon post is, except it’s slower than the firedancer implementation.    reply           SEJeff  1 day ago    | root | parent | next  [–]      It’s a new from scratch implementation of a validator for Solana the fastest blockchain by several orders of magnitude. The slowest part is signature verification so they sped up hashing to improve performance of the entire system. They follow a first principles approach (the lead has a few physics degrees) and opted to speed up the cryptography. The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. It’s a win in cryptography, much like this Amazon post is, except it’s slower than the firedancer implementation.    reply          SEJeff  1 day ago    | root | parent | next  [–]      It’s a new from scratch implementation of a validator for Solana the fastest blockchain by several orders of magnitude. The slowest part is signature verification so they sped up hashing to improve performance of the entire system. They follow a first principles approach (the lead has a few physics degrees) and opted to speed up the cryptography. The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. It’s a win in cryptography, much like this Amazon post is, except it’s slower than the firedancer implementation.    reply          SEJeff  1 day ago    | root | parent | next  [–]      It’s a new from scratch implementation of a validator for Solana the fastest blockchain by several orders of magnitude. The slowest part is signature verification so they sped up hashing to improve performance of the entire system. They follow a first principles approach (the lead has a few physics degrees) and opted to speed up the cryptography. The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. It’s a win in cryptography, much like this Amazon post is, except it’s slower than the firedancer implementation.    reply          SEJeff  1 day ago    | root | parent | next  [–]      It’s a new from scratch implementation of a validator for Solana the fastest blockchain by several orders of magnitude. The slowest part is signature verification so they sped up hashing to improve performance of the entire system. They follow a first principles approach (the lead has a few physics degrees) and opted to speed up the cryptography. The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. It’s a win in cryptography, much like this Amazon post is, except it’s slower than the firedancer implementation.    reply    SEJeff  1 day ago    | root | parent | next  [–]     SEJeff  1 day ago    | root | parent | next  [–]    SEJeff 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  It’s a new from scratch implementation of a validator for Solana the fastest blockchain by several orders of magnitude. The slowest part is signature verification so they sped up hashing to improve performance of the entire system. They follow a first principles approach (the lead has a few physics degrees) and opted to speed up the cryptography. The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. It’s a win in cryptography, much like this Amazon post is, except it’s slower than the firedancer implementation.    reply   It’s a new from scratch implementation of a validator for Solana the fastest blockchain by several orders of magnitude. The slowest part is signature verification so they sped up hashing to improve performance of the entire system. They follow a first principles approach (the lead has a few physics degrees) and opted to speed up the cryptography. The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. It’s a win in cryptography, much like this Amazon post is, except it’s slower than the firedancer implementation. They follow a first principles approach (the lead has a few physics degrees) and opted to speed up the cryptography. The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. It’s a win in cryptography, much like this Amazon post is, except it’s slower than the firedancer implementation.   reply    reply    reply  reply reply        scrlk  1 day ago    | root | parent | next  [–]      Off topic - is Firedancer going to survive Jump winding down its crypto arm? Kanav left, they liquidated a huge staked ETH position a few months ago (+ a bunch of other coins), and the SEC/CFTC is all over them for the Terra Luna fiasco.    reply           scrlk  1 day ago    | root | parent | next  [–]      Off topic - is Firedancer going to survive Jump winding down its crypto arm? Kanav left, they liquidated a huge staked ETH position a few months ago (+ a bunch of other coins), and the SEC/CFTC is all over them for the Terra Luna fiasco.    reply           scrlk  1 day ago    | root | parent | next  [–]      Off topic - is Firedancer going to survive Jump winding down its crypto arm? Kanav left, they liquidated a huge staked ETH position a few months ago (+ a bunch of other coins), and the SEC/CFTC is all over them for the Terra Luna fiasco.    reply          scrlk  1 day ago    | root | parent | next  [–]      Off topic - is Firedancer going to survive Jump winding down its crypto arm? Kanav left, they liquidated a huge staked ETH position a few months ago (+ a bunch of other coins), and the SEC/CFTC is all over them for the Terra Luna fiasco.    reply          scrlk  1 day ago    | root | parent | next  [–]      Off topic - is Firedancer going to survive Jump winding down its crypto arm? Kanav left, they liquidated a huge staked ETH position a few months ago (+ a bunch of other coins), and the SEC/CFTC is all over them for the Terra Luna fiasco.    reply          scrlk  1 day ago    | root | parent | next  [–]      Off topic - is Firedancer going to survive Jump winding down its crypto arm? Kanav left, they liquidated a huge staked ETH position a few months ago (+ a bunch of other coins), and the SEC/CFTC is all over them for the Terra Luna fiasco.    reply    scrlk  1 day ago    | root | parent | next  [–]     scrlk  1 day ago    | root | parent | next  [–]    scrlk 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  Off topic - is Firedancer going to survive Jump winding down its crypto arm? Kanav left, they liquidated a huge staked ETH position a few months ago (+ a bunch of other coins), and the SEC/CFTC is all over them for the Terra Luna fiasco.    reply   Off topic - is Firedancer going to survive Jump winding down its crypto arm? Kanav left, they liquidated a huge staked ETH position a few months ago (+ a bunch of other coins), and the SEC/CFTC is all over them for the Terra Luna fiasco. Kanav left, they liquidated a huge staked ETH position a few months ago (+ a bunch of other coins), and the SEC/CFTC is all over them for the Terra Luna fiasco.   reply    reply    reply  reply reply        SEJeff  1 day ago    | root | parent | next  [–]      Rumors of Jump’s demise are greatly exaggerated. Check the torrent of firedancer talks at Solana Breakpoint literally next week and decide yourself. Folks have said jump is gonna die for 20+ years. They’ve been around 30ish…    reply           SEJeff  1 day ago    | root | parent | next  [–]      Rumors of Jump’s demise are greatly exaggerated. Check the torrent of firedancer talks at Solana Breakpoint literally next week and decide yourself. Folks have said jump is gonna die for 20+ years. They’ve been around 30ish…    reply           SEJeff  1 day ago    | root | parent | next  [–]      Rumors of Jump’s demise are greatly exaggerated. Check the torrent of firedancer talks at Solana Breakpoint literally next week and decide yourself. Folks have said jump is gonna die for 20+ years. They’ve been around 30ish…    reply          SEJeff  1 day ago    | root | parent | next  [–]      Rumors of Jump’s demise are greatly exaggerated. Check the torrent of firedancer talks at Solana Breakpoint literally next week and decide yourself. Folks have said jump is gonna die for 20+ years. They’ve been around 30ish…    reply          SEJeff  1 day ago    | root | parent | next  [–]      Rumors of Jump’s demise are greatly exaggerated. Check the torrent of firedancer talks at Solana Breakpoint literally next week and decide yourself. Folks have said jump is gonna die for 20+ years. They’ve been around 30ish…    reply          SEJeff  1 day ago    | root | parent | next  [–]      Rumors of Jump’s demise are greatly exaggerated. Check the torrent of firedancer talks at Solana Breakpoint literally next week and decide yourself. Folks have said jump is gonna die for 20+ years. They’ve been around 30ish…    reply    SEJeff  1 day ago    | root | parent | next  [–]     SEJeff  1 day ago    | root | parent | next  [–]    SEJeff 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  Rumors of Jump’s demise are greatly exaggerated. Check the torrent of firedancer talks at Solana Breakpoint literally next week and decide yourself. Folks have said jump is gonna die for 20+ years. They’ve been around 30ish…    reply   Rumors of Jump’s demise are greatly exaggerated. Check the torrent of firedancer talks at Solana Breakpoint literally next week and decide yourself. Folks have said jump is gonna die for 20+ years. They’ve been around 30ish… Folks have said jump is gonna die for 20+ years. They’ve been around 30ish…   reply    reply    reply  reply reply        sangnoir  1 day ago    | root | parent | next  [–]      Parent asked a specific question about the survival of Firedancer and winding down of the crypto arm though. No demise of Jump mentioned.    reply           sangnoir  1 day ago    | root | parent | next  [–]      Parent asked a specific question about the survival of Firedancer and winding down of the crypto arm though. No demise of Jump mentioned.    reply           sangnoir  1 day ago    | root | parent | next  [–]      Parent asked a specific question about the survival of Firedancer and winding down of the crypto arm though. No demise of Jump mentioned.    reply          sangnoir  1 day ago    | root | parent | next  [–]      Parent asked a specific question about the survival of Firedancer and winding down of the crypto arm though. No demise of Jump mentioned.    reply          sangnoir  1 day ago    | root | parent | next  [–]      Parent asked a specific question about the survival of Firedancer and winding down of the crypto arm though. No demise of Jump mentioned.    reply          sangnoir  1 day ago    | root | parent | next  [–]      Parent asked a specific question about the survival of Firedancer and winding down of the crypto arm though. No demise of Jump mentioned.    reply    sangnoir  1 day ago    | root | parent | next  [–]     sangnoir  1 day ago    | root | parent | next  [–]    sangnoir 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  Parent asked a specific question about the survival of Firedancer and winding down of the crypto arm though. No demise of Jump mentioned.    reply   Parent asked a specific question about the survival of Firedancer and winding down of the crypto arm though. No demise of Jump mentioned. Firedancer crypto arm   reply    reply    reply  reply reply        SEJeff  1 day ago    | root | parent | next  [–]      You will see a half dozen or so talks about firedancer and probably 35-40 or so of us total (I’m at the company that does security for firedancer, Asymmetric Research. We were founded by former jumpers). You can make the determination on your own, but there will be an obvious large showing of firedancer folks and some exciting updates for the project.    reply           SEJeff  1 day ago    | root | parent | next  [–]      You will see a half dozen or so talks about firedancer and probably 35-40 or so of us total (I’m at the company that does security for firedancer, Asymmetric Research. We were founded by former jumpers). You can make the determination on your own, but there will be an obvious large showing of firedancer folks and some exciting updates for the project.    reply           SEJeff  1 day ago    | root | parent | next  [–]      You will see a half dozen or so talks about firedancer and probably 35-40 or so of us total (I’m at the company that does security for firedancer, Asymmetric Research. We were founded by former jumpers). You can make the determination on your own, but there will be an obvious large showing of firedancer folks and some exciting updates for the project.    reply          SEJeff  1 day ago    | root | parent | next  [–]      You will see a half dozen or so talks about firedancer and probably 35-40 or so of us total (I’m at the company that does security for firedancer, Asymmetric Research. We were founded by former jumpers). You can make the determination on your own, but there will be an obvious large showing of firedancer folks and some exciting updates for the project.    reply          SEJeff  1 day ago    | root | parent | next  [–]      You will see a half dozen or so talks about firedancer and probably 35-40 or so of us total (I’m at the company that does security for firedancer, Asymmetric Research. We were founded by former jumpers). You can make the determination on your own, but there will be an obvious large showing of firedancer folks and some exciting updates for the project.    reply          SEJeff  1 day ago    | root | parent | next  [–]      You will see a half dozen or so talks about firedancer and probably 35-40 or so of us total (I’m at the company that does security for firedancer, Asymmetric Research. We were founded by former jumpers). You can make the determination on your own, but there will be an obvious large showing of firedancer folks and some exciting updates for the project.    reply    SEJeff  1 day ago    | root | parent | next  [–]     SEJeff  1 day ago    | root | parent | next  [–]    SEJeff 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  You will see a half dozen or so talks about firedancer and probably 35-40 or so of us total (I’m at the company that does security for firedancer, Asymmetric Research. We were founded by former jumpers). You can make the determination on your own, but there will be an obvious large showing of firedancer folks and some exciting updates for the project.    reply   You will see a half dozen or so talks about firedancer and probably 35-40 or so of us total (I’m at the company that does security for firedancer, Asymmetric Research. We were founded by former jumpers). You can make the determination on your own, but there will be an obvious large showing of firedancer folks and some exciting updates for the project. You can make the determination on your own, but there will be an obvious large showing of firedancer folks and some exciting updates for the project.   reply    reply    reply  reply reply        caned  1 day ago    | root | parent | prev | next  [–]      > The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. For users that have AVX-512, which isn't widely available (AMD Zen 4 / Zen 5, Sapphire Rapids)...    reply           caned  1 day ago    | root | parent | prev | next  [–]      > The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. For users that have AVX-512, which isn't widely available (AMD Zen 4 / Zen 5, Sapphire Rapids)...    reply           caned  1 day ago    | root | parent | prev | next  [–]      > The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. For users that have AVX-512, which isn't widely available (AMD Zen 4 / Zen 5, Sapphire Rapids)...    reply          caned  1 day ago    | root | parent | prev | next  [–]      > The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. For users that have AVX-512, which isn't widely available (AMD Zen 4 / Zen 5, Sapphire Rapids)...    reply          caned  1 day ago    | root | parent | prev | next  [–]      > The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. For users that have AVX-512, which isn't widely available (AMD Zen 4 / Zen 5, Sapphire Rapids)...    reply          caned  1 day ago    | root | parent | prev | next  [–]      > The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. For users that have AVX-512, which isn't widely available (AMD Zen 4 / Zen 5, Sapphire Rapids)...    reply    caned  1 day ago    | root | parent | prev | next  [–]     caned  1 day ago    | root | parent | prev | next  [–]    caned 1 day ago 1 day ago | root | parent | prev | next  [–]   root parent prev next [–]  > The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. For users that have AVX-512, which isn't widely available (AMD Zen 4 / Zen 5, Sapphire Rapids)...    reply   > The beauty of this, despite the bad views on blockchain, is that they freaking sped up the cryptography of commonly used algorithms more than anything open or closed source that I personally am aware of. For users that have AVX-512, which isn't widely available (AMD Zen 4 / Zen 5, Sapphire Rapids)... For users that have AVX-512, which isn't widely available (AMD Zen 4 / Zen 5, Sapphire Rapids)...   reply    reply    reply  reply reply        SEJeff  1 day ago    | root | parent | next  [–]      Sure, and cpus supporting it will proliferate. Shockingly to no one reading hacker news... Both software and hardware continue to improve with time generally speaking. This was a huge software improvement on hardware that supports that functionality. It is a huge win for anyone wanting to use these algorithms where they can afford hardware that supports it. We should celebrate Amazon's improvements and we should celebrate these improvements. Both are great for the future of technology, regardless of why they were initially developed. Improving tech and keeping it open source is good for all.    reply           SEJeff  1 day ago    | root | parent | next  [–]      Sure, and cpus supporting it will proliferate. Shockingly to no one reading hacker news... Both software and hardware continue to improve with time generally speaking. This was a huge software improvement on hardware that supports that functionality. It is a huge win for anyone wanting to use these algorithms where they can afford hardware that supports it. We should celebrate Amazon's improvements and we should celebrate these improvements. Both are great for the future of technology, regardless of why they were initially developed. Improving tech and keeping it open source is good for all.    reply           SEJeff  1 day ago    | root | parent | next  [–]      Sure, and cpus supporting it will proliferate. Shockingly to no one reading hacker news... Both software and hardware continue to improve with time generally speaking. This was a huge software improvement on hardware that supports that functionality. It is a huge win for anyone wanting to use these algorithms where they can afford hardware that supports it. We should celebrate Amazon's improvements and we should celebrate these improvements. Both are great for the future of technology, regardless of why they were initially developed. Improving tech and keeping it open source is good for all.    reply          SEJeff  1 day ago    | root | parent | next  [–]      Sure, and cpus supporting it will proliferate. Shockingly to no one reading hacker news... Both software and hardware continue to improve with time generally speaking. This was a huge software improvement on hardware that supports that functionality. It is a huge win for anyone wanting to use these algorithms where they can afford hardware that supports it. We should celebrate Amazon's improvements and we should celebrate these improvements. Both are great for the future of technology, regardless of why they were initially developed. Improving tech and keeping it open source is good for all.    reply          SEJeff  1 day ago    | root | parent | next  [–]      Sure, and cpus supporting it will proliferate. Shockingly to no one reading hacker news... Both software and hardware continue to improve with time generally speaking. This was a huge software improvement on hardware that supports that functionality. It is a huge win for anyone wanting to use these algorithms where they can afford hardware that supports it. We should celebrate Amazon's improvements and we should celebrate these improvements. Both are great for the future of technology, regardless of why they were initially developed. Improving tech and keeping it open source is good for all.    reply          SEJeff  1 day ago    | root | parent | next  [–]      Sure, and cpus supporting it will proliferate. Shockingly to no one reading hacker news... Both software and hardware continue to improve with time generally speaking. This was a huge software improvement on hardware that supports that functionality. It is a huge win for anyone wanting to use these algorithms where they can afford hardware that supports it. We should celebrate Amazon's improvements and we should celebrate these improvements. Both are great for the future of technology, regardless of why they were initially developed. Improving tech and keeping it open source is good for all.    reply    SEJeff  1 day ago    | root | parent | next  [–]     SEJeff  1 day ago    | root | parent | next  [–]    SEJeff 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  Sure, and cpus supporting it will proliferate. Shockingly to no one reading hacker news... Both software and hardware continue to improve with time generally speaking. This was a huge software improvement on hardware that supports that functionality. It is a huge win for anyone wanting to use these algorithms where they can afford hardware that supports it. We should celebrate Amazon's improvements and we should celebrate these improvements. Both are great for the future of technology, regardless of why they were initially developed. Improving tech and keeping it open source is good for all.    reply   Sure, and cpus supporting it will proliferate. Shockingly to no one reading hacker news... Both software and hardware continue to improve with time generally speaking. This was a huge software improvement on hardware that supports that functionality. It is a huge win for anyone wanting to use these algorithms where they can afford hardware that supports it. We should celebrate Amazon's improvements and we should celebrate these improvements. Both are great for the future of technology, regardless of why they were initially developed. Improving tech and keeping it open source is good for all. We should celebrate Amazon's improvements and we should celebrate these improvements. Both are great for the future of technology, regardless of why they were initially developed. Improving tech and keeping it open source is good for all.   reply    reply    reply  reply reply        4gotunameagain  1 day ago    | parent | prev | next  [–]      So many manhours spent on finding better ways to shovel around money and pocket what falls from the cracks. What a wasteful and unproductive enterprise, considering the vast majority of the devised improvements never see the public eye. Still, impressive work. Imagine if those brilliant minds behind this were focused somewhere else.    reply           4gotunameagain  1 day ago    | parent | prev | next  [–]      So many manhours spent on finding better ways to shovel around money and pocket what falls from the cracks. What a wasteful and unproductive enterprise, considering the vast majority of the devised improvements never see the public eye. Still, impressive work. Imagine if those brilliant minds behind this were focused somewhere else.    reply           4gotunameagain  1 day ago    | parent | prev | next  [–]      So many manhours spent on finding better ways to shovel around money and pocket what falls from the cracks. What a wasteful and unproductive enterprise, considering the vast majority of the devised improvements never see the public eye. Still, impressive work. Imagine if those brilliant minds behind this were focused somewhere else.    reply          4gotunameagain  1 day ago    | parent | prev | next  [–]      So many manhours spent on finding better ways to shovel around money and pocket what falls from the cracks. What a wasteful and unproductive enterprise, considering the vast majority of the devised improvements never see the public eye. Still, impressive work. Imagine if those brilliant minds behind this were focused somewhere else.    reply          4gotunameagain  1 day ago    | parent | prev | next  [–]      So many manhours spent on finding better ways to shovel around money and pocket what falls from the cracks. What a wasteful and unproductive enterprise, considering the vast majority of the devised improvements never see the public eye. Still, impressive work. Imagine if those brilliant minds behind this were focused somewhere else.    reply          4gotunameagain  1 day ago    | parent | prev | next  [–]      So many manhours spent on finding better ways to shovel around money and pocket what falls from the cracks. What a wasteful and unproductive enterprise, considering the vast majority of the devised improvements never see the public eye. Still, impressive work. Imagine if those brilliant minds behind this were focused somewhere else.    reply    4gotunameagain  1 day ago    | parent | prev | next  [–]     4gotunameagain  1 day ago    | parent | prev | next  [–]    4gotunameagain 1 day ago 1 day ago | parent | prev | next  [–]   parent prev next [–]  So many manhours spent on finding better ways to shovel around money and pocket what falls from the cracks. What a wasteful and unproductive enterprise, considering the vast majority of the devised improvements never see the public eye. Still, impressive work. Imagine if those brilliant minds behind this were focused somewhere else.    reply   So many manhours spent on finding better ways to shovel around money and pocket what falls from the cracks. What a wasteful and unproductive enterprise, considering the vast majority of the devised improvements never see the public eye. Still, impressive work. Imagine if those brilliant minds behind this were focused somewhere else. What a wasteful and unproductive enterprise, considering the vast majority of the devised improvements never see the public eye. Still, impressive work. Imagine if those brilliant minds behind this were focused somewhere else.   reply    reply    reply  reply reply        posnet  1 day ago    | root | parent | next  [–]      The greatest minds of our generation spend their time thinking about how to: - make people click on ads - make trading algos faster - replace human artists - build more efficient killing machines - destroy any remaining concept of privacy    reply           posnet  1 day ago    | root | parent | next  [–]      The greatest minds of our generation spend their time thinking about how to: - make people click on ads - make trading algos faster - replace human artists - build more efficient killing machines - destroy any remaining concept of privacy    reply           posnet  1 day ago    | root | parent | next  [–]      The greatest minds of our generation spend their time thinking about how to: - make people click on ads - make trading algos faster - replace human artists - build more efficient killing machines - destroy any remaining concept of privacy    reply          posnet  1 day ago    | root | parent | next  [–]      The greatest minds of our generation spend their time thinking about how to: - make people click on ads - make trading algos faster - replace human artists - build more efficient killing machines - destroy any remaining concept of privacy    reply          posnet  1 day ago    | root | parent | next  [–]      The greatest minds of our generation spend their time thinking about how to: - make people click on ads - make trading algos faster - replace human artists - build more efficient killing machines - destroy any remaining concept of privacy    reply          posnet  1 day ago    | root | parent | next  [–]      The greatest minds of our generation spend their time thinking about how to: - make people click on ads - make trading algos faster - replace human artists - build more efficient killing machines - destroy any remaining concept of privacy    reply    posnet  1 day ago    | root | parent | next  [–]     posnet  1 day ago    | root | parent | next  [–]    posnet 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  The greatest minds of our generation spend their time thinking about how to: - make people click on ads - make trading algos faster - replace human artists - build more efficient killing machines - destroy any remaining concept of privacy    reply   The greatest minds of our generation spend their time thinking about how to: - make people click on ads - make trading algos faster - replace human artists - build more efficient killing machines - destroy any remaining concept of privacy - make people click on ads - make trading algos faster - replace human artists - build more efficient killing machines - destroy any remaining concept of privacy   reply    reply    reply  reply reply        geodel  23 hours ago    | root | parent | next  [–]      Greatest mind of previous generation made nuclear bombs and other deadly things.    reply           geodel  23 hours ago    | root | parent | next  [–]      Greatest mind of previous generation made nuclear bombs and other deadly things.    reply           geodel  23 hours ago    | root | parent | next  [–]      Greatest mind of previous generation made nuclear bombs and other deadly things.    reply          geodel  23 hours ago    | root | parent | next  [–]      Greatest mind of previous generation made nuclear bombs and other deadly things.    reply          geodel  23 hours ago    | root | parent | next  [–]      Greatest mind of previous generation made nuclear bombs and other deadly things.    reply          geodel  23 hours ago    | root | parent | next  [–]      Greatest mind of previous generation made nuclear bombs and other deadly things.    reply    geodel  23 hours ago    | root | parent | next  [–]     geodel  23 hours ago    | root | parent | next  [–]    geodel 23 hours ago 23 hours ago | root | parent | next  [–]   root parent next [–]  Greatest mind of previous generation made nuclear bombs and other deadly things.    reply   Greatest mind of previous generation made nuclear bombs and other deadly things.   reply    reply    reply  reply reply        astrange  1 day ago    | root | parent | prev | next  [–]      Aren't the greatest mind(s) of our generation writing Terry Tao's blog posts?    reply           astrange  1 day ago    | root | parent | prev | next  [–]      Aren't the greatest mind(s) of our generation writing Terry Tao's blog posts?    reply           astrange  1 day ago    | root | parent | prev | next  [–]      Aren't the greatest mind(s) of our generation writing Terry Tao's blog posts?    reply          astrange  1 day ago    | root | parent | prev | next  [–]      Aren't the greatest mind(s) of our generation writing Terry Tao's blog posts?    reply          astrange  1 day ago    | root | parent | prev | next  [–]      Aren't the greatest mind(s) of our generation writing Terry Tao's blog posts?    reply          astrange  1 day ago    | root | parent | prev | next  [–]      Aren't the greatest mind(s) of our generation writing Terry Tao's blog posts?    reply    astrange  1 day ago    | root | parent | prev | next  [–]     astrange  1 day ago    | root | parent | prev | next  [–]    astrange 1 day ago 1 day ago | root | parent | prev | next  [–]   root parent prev next [–]  Aren't the greatest mind(s) of our generation writing Terry Tao's blog posts?    reply   Aren't the greatest mind(s) of our generation writing Terry Tao's blog posts?   reply    reply    reply  reply reply        vladms  1 day ago    | root | parent | prev | next  [–]      This directly implies that all the people that did useful stuff (improving cancer survivability, new vaccines, renewable energy, and others) are all \"below\" the \"greatest minds of our generation\". Not to mention it also suggests there is a way to \"compare\" minds. I would not choose myself to do somethings, but that does not mean I despise automatically people choosing to.    reply           vladms  1 day ago    | root | parent | prev | next  [–]      This directly implies that all the people that did useful stuff (improving cancer survivability, new vaccines, renewable energy, and others) are all \"below\" the \"greatest minds of our generation\". Not to mention it also suggests there is a way to \"compare\" minds. I would not choose myself to do somethings, but that does not mean I despise automatically people choosing to.    reply           vladms  1 day ago    | root | parent | prev | next  [–]      This directly implies that all the people that did useful stuff (improving cancer survivability, new vaccines, renewable energy, and others) are all \"below\" the \"greatest minds of our generation\". Not to mention it also suggests there is a way to \"compare\" minds. I would not choose myself to do somethings, but that does not mean I despise automatically people choosing to.    reply          vladms  1 day ago    | root | parent | prev | next  [–]      This directly implies that all the people that did useful stuff (improving cancer survivability, new vaccines, renewable energy, and others) are all \"below\" the \"greatest minds of our generation\". Not to mention it also suggests there is a way to \"compare\" minds. I would not choose myself to do somethings, but that does not mean I despise automatically people choosing to.    reply          vladms  1 day ago    | root | parent | prev | next  [–]      This directly implies that all the people that did useful stuff (improving cancer survivability, new vaccines, renewable energy, and others) are all \"below\" the \"greatest minds of our generation\". Not to mention it also suggests there is a way to \"compare\" minds. I would not choose myself to do somethings, but that does not mean I despise automatically people choosing to.    reply          vladms  1 day ago    | root | parent | prev | next  [–]      This directly implies that all the people that did useful stuff (improving cancer survivability, new vaccines, renewable energy, and others) are all \"below\" the \"greatest minds of our generation\". Not to mention it also suggests there is a way to \"compare\" minds. I would not choose myself to do somethings, but that does not mean I despise automatically people choosing to.    reply    vladms  1 day ago    | root | parent | prev | next  [–]     vladms  1 day ago    | root | parent | prev | next  [–]    vladms 1 day ago 1 day ago | root | parent | prev | next  [–]   root parent prev next [–]  This directly implies that all the people that did useful stuff (improving cancer survivability, new vaccines, renewable energy, and others) are all \"below\" the \"greatest minds of our generation\". Not to mention it also suggests there is a way to \"compare\" minds. I would not choose myself to do somethings, but that does not mean I despise automatically people choosing to.    reply   This directly implies that all the people that did useful stuff (improving cancer survivability, new vaccines, renewable energy, and others) are all \"below\" the \"greatest minds of our generation\". Not to mention it also suggests there is a way to \"compare\" minds. I would not choose myself to do somethings, but that does not mean I despise automatically people choosing to. Not to mention it also suggests there is a way to \"compare\" minds. I would not choose myself to do somethings, but that does not mean I despise automatically people choosing to.   reply    reply    reply  reply reply        geodel  23 hours ago    | root | parent | next  [–]      I think they meant greatest minds have to be greatest money earners also. Else they are not greatest minds.    reply           geodel  23 hours ago    | root | parent | next  [–]      I think they meant greatest minds have to be greatest money earners also. Else they are not greatest minds.    reply           geodel  23 hours ago    | root | parent | next  [–]      I think they meant greatest minds have to be greatest money earners also. Else they are not greatest minds.    reply          geodel  23 hours ago    | root | parent | next  [–]      I think they meant greatest minds have to be greatest money earners also. Else they are not greatest minds.    reply          geodel  23 hours ago    | root | parent | next  [–]      I think they meant greatest minds have to be greatest money earners also. Else they are not greatest minds.    reply          geodel  23 hours ago    | root | parent | next  [–]      I think they meant greatest minds have to be greatest money earners also. Else they are not greatest minds.    reply    geodel  23 hours ago    | root | parent | next  [–]     geodel  23 hours ago    | root | parent | next  [–]    geodel 23 hours ago 23 hours ago | root | parent | next  [–]   root parent next [–]  I think they meant greatest minds have to be greatest money earners also. Else they are not greatest minds.    reply   I think they meant greatest minds have to be greatest money earners also. Else they are not greatest minds.   reply    reply    reply  reply reply        4gotunameagain  1 day ago    | root | parent | prev | next  [–]      Hey, at least we had one of them working on TempleOS.    reply           4gotunameagain  1 day ago    | root | parent | prev | next  [–]      Hey, at least we had one of them working on TempleOS.    reply           4gotunameagain  1 day ago    | root | parent | prev | next  [–]      Hey, at least we had one of them working on TempleOS.    reply          4gotunameagain  1 day ago    | root | parent | prev | next  [–]      Hey, at least we had one of them working on TempleOS.    reply          4gotunameagain  1 day ago    | root | parent | prev | next  [–]      Hey, at least we had one of them working on TempleOS.    reply          4gotunameagain  1 day ago    | root | parent | prev | next  [–]      Hey, at least we had one of them working on TempleOS.    reply    4gotunameagain  1 day ago    | root | parent | prev | next  [–]     4gotunameagain  1 day ago    | root | parent | prev | next  [–]    4gotunameagain 1 day ago 1 day ago | root | parent | prev | next  [–]   root parent prev next [–]  Hey, at least we had one of them working on TempleOS.    reply   Hey, at least we had one of them working on TempleOS.   reply    reply    reply  reply reply        toast0  1 day ago    | root | parent | prev | next  [–]      It doesn't seem wasteful and unproductive, given that the result of the HFT industry is smaller bid/ask spreads (lowering costs for all trades) and payment for order flow which is the mechanism that eliminated retail commissions and provides price improvement on many retail trades. And even so, HFT firms are making money. It might not seem like real work, but making money by reducing costs of market participants sounds like a good thing. I admit though, block trades might be harder now than before the rise of HFT. If you could do warehousing/distributing/coordinating fresh foods in a way that reduced the difference in price between the farmer and the consumer and make money doing it, that would clearly be good work.    reply           toast0  1 day ago    | root | parent | prev | next  [–]      It doesn't seem wasteful and unproductive, given that the result of the HFT industry is smaller bid/ask spreads (lowering costs for all trades) and payment for order flow which is the mechanism that eliminated retail commissions and provides price improvement on many retail trades. And even so, HFT firms are making money. It might not seem like real work, but making money by reducing costs of market participants sounds like a good thing. I admit though, block trades might be harder now than before the rise of HFT. If you could do warehousing/distributing/coordinating fresh foods in a way that reduced the difference in price between the farmer and the consumer and make money doing it, that would clearly be good work.    reply           toast0  1 day ago    | root | parent | prev | next  [–]      It doesn't seem wasteful and unproductive, given that the result of the HFT industry is smaller bid/ask spreads (lowering costs for all trades) and payment for order flow which is the mechanism that eliminated retail commissions and provides price improvement on many retail trades. And even so, HFT firms are making money. It might not seem like real work, but making money by reducing costs of market participants sounds like a good thing. I admit though, block trades might be harder now than before the rise of HFT. If you could do warehousing/distributing/coordinating fresh foods in a way that reduced the difference in price between the farmer and the consumer and make money doing it, that would clearly be good work.    reply          toast0  1 day ago    | root | parent | prev | next  [–]      It doesn't seem wasteful and unproductive, given that the result of the HFT industry is smaller bid/ask spreads (lowering costs for all trades) and payment for order flow which is the mechanism that eliminated retail commissions and provides price improvement on many retail trades. And even so, HFT firms are making money. It might not seem like real work, but making money by reducing costs of market participants sounds like a good thing. I admit though, block trades might be harder now than before the rise of HFT. If you could do warehousing/distributing/coordinating fresh foods in a way that reduced the difference in price between the farmer and the consumer and make money doing it, that would clearly be good work.    reply          toast0  1 day ago    | root | parent | prev | next  [–]      It doesn't seem wasteful and unproductive, given that the result of the HFT industry is smaller bid/ask spreads (lowering costs for all trades) and payment for order flow which is the mechanism that eliminated retail commissions and provides price improvement on many retail trades. And even so, HFT firms are making money. It might not seem like real work, but making money by reducing costs of market participants sounds like a good thing. I admit though, block trades might be harder now than before the rise of HFT. If you could do warehousing/distributing/coordinating fresh foods in a way that reduced the difference in price between the farmer and the consumer and make money doing it, that would clearly be good work.    reply          toast0  1 day ago    | root | parent | prev | next  [–]      It doesn't seem wasteful and unproductive, given that the result of the HFT industry is smaller bid/ask spreads (lowering costs for all trades) and payment for order flow which is the mechanism that eliminated retail commissions and provides price improvement on many retail trades. And even so, HFT firms are making money. It might not seem like real work, but making money by reducing costs of market participants sounds like a good thing. I admit though, block trades might be harder now than before the rise of HFT. If you could do warehousing/distributing/coordinating fresh foods in a way that reduced the difference in price between the farmer and the consumer and make money doing it, that would clearly be good work.    reply    toast0  1 day ago    | root | parent | prev | next  [–]     toast0  1 day ago    | root | parent | prev | next  [–]    toast0 1 day ago 1 day ago | root | parent | prev | next  [–]   root parent prev next [–]  It doesn't seem wasteful and unproductive, given that the result of the HFT industry is smaller bid/ask spreads (lowering costs for all trades) and payment for order flow which is the mechanism that eliminated retail commissions and provides price improvement on many retail trades. And even so, HFT firms are making money. It might not seem like real work, but making money by reducing costs of market participants sounds like a good thing. I admit though, block trades might be harder now than before the rise of HFT. If you could do warehousing/distributing/coordinating fresh foods in a way that reduced the difference in price between the farmer and the consumer and make money doing it, that would clearly be good work.    reply   It doesn't seem wasteful and unproductive, given that the result of the HFT industry is smaller bid/ask spreads (lowering costs for all trades) and payment for order flow which is the mechanism that eliminated retail commissions and provides price improvement on many retail trades. And even so, HFT firms are making money. It might not seem like real work, but making money by reducing costs of market participants sounds like a good thing. I admit though, block trades might be harder now than before the rise of HFT. If you could do warehousing/distributing/coordinating fresh foods in a way that reduced the difference in price between the farmer and the consumer and make money doing it, that would clearly be good work. It might not seem like real work, but making money by reducing costs of market participants sounds like a good thing. I admit though, block trades might be harder now than before the rise of HFT. If you could do warehousing/distributing/coordinating fresh foods in a way that reduced the difference in price between the farmer and the consumer and make money doing it, that would clearly be good work.   reply    reply    reply  reply reply        appendix-rock  1 day ago    | root | parent | prev | next  [–]      What do you work on?    reply           appendix-rock  1 day ago    | root | parent | prev | next  [–]      What do you work on?    reply           appendix-rock  1 day ago    | root | parent | prev | next  [–]      What do you work on?    reply          appendix-rock  1 day ago    | root | parent | prev | next  [–]      What do you work on?    reply          appendix-rock  1 day ago    | root | parent | prev | next  [–]      What do you work on?    reply          appendix-rock  1 day ago    | root | parent | prev | next  [–]      What do you work on?    reply    appendix-rock  1 day ago    | root | parent | prev | next  [–]     appendix-rock  1 day ago    | root | parent | prev | next  [–]    appendix-rock 1 day ago 1 day ago | root | parent | prev | next  [–]   root parent prev next [–]  What do you work on?    reply   What do you work on?   reply    reply    reply  reply reply        almostgotcaught  1 day ago    | root | parent | prev | next  [–]      I'll never be able to figure out what people get from repeating the same thing over and over. I've seen this same exact comment 1000 times on hn and I'm 100% sure you have too (indeed I believe the reason you repeat is because you've seen it and agree with it).    reply           almostgotcaught  1 day ago    | root | parent | prev | next  [–]      I'll never be able to figure out what people get from repeating the same thing over and over. I've seen this same exact comment 1000 times on hn and I'm 100% sure you have too (indeed I believe the reason you repeat is because you've seen it and agree with it).    reply           almostgotcaught  1 day ago    | root | parent | prev | next  [–]      I'll never be able to figure out what people get from repeating the same thing over and over. I've seen this same exact comment 1000 times on hn and I'm 100% sure you have too (indeed I believe the reason you repeat is because you've seen it and agree with it).    reply          almostgotcaught  1 day ago    | root | parent | prev | next  [–]      I'll never be able to figure out what people get from repeating the same thing over and over. I've seen this same exact comment 1000 times on hn and I'm 100% sure you have too (indeed I believe the reason you repeat is because you've seen it and agree with it).    reply          almostgotcaught  1 day ago    | root | parent | prev | next  [–]      I'll never be able to figure out what people get from repeating the same thing over and over. I've seen this same exact comment 1000 times on hn and I'm 100% sure you have too (indeed I believe the reason you repeat is because you've seen it and agree with it).    reply          almostgotcaught  1 day ago    | root | parent | prev | next  [–]      I'll never be able to figure out what people get from repeating the same thing over and over. I've seen this same exact comment 1000 times on hn and I'm 100% sure you have too (indeed I believe the reason you repeat is because you've seen it and agree with it).    reply    almostgotcaught  1 day ago    | root | parent | prev | next  [–]     almostgotcaught  1 day ago    | root | parent | prev | next  [–]    almostgotcaught 1 day ago 1 day ago | root | parent | prev | next  [–]   root parent prev next [–]  I'll never be able to figure out what people get from repeating the same thing over and over. I've seen this same exact comment 1000 times on hn and I'm 100% sure you have too (indeed I believe the reason you repeat is because you've seen it and agree with it).    reply   I'll never be able to figure out what people get from repeating the same thing over and over. I've seen this same exact comment 1000 times on hn and I'm 100% sure you have too (indeed I believe the reason you repeat is because you've seen it and agree with it). reason   reply    reply    reply  reply reply        XorNot  1 day ago    | root | parent | next  [–]      It's virtue signalling.    reply           XorNot  1 day ago    | root | parent | next  [–]      It's virtue signalling.    reply           XorNot  1 day ago    | root | parent | next  [–]      It's virtue signalling.    reply          XorNot  1 day ago    | root | parent | next  [–]      It's virtue signalling.    reply          XorNot  1 day ago    | root | parent | next  [–]      It's virtue signalling.    reply          XorNot  1 day ago    | root | parent | next  [–]      It's virtue signalling.    reply    XorNot  1 day ago    | root | parent | next  [–]     XorNot  1 day ago    | root | parent | next  [–]    XorNot 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  It's virtue signalling.    reply   It's virtue signalling.   reply    reply    reply  reply reply        slt2021  1 day ago    | parent | prev | next  [–]      wow amazing, nobody is gonna edit that code ever again...    reply           slt2021  1 day ago    | parent | prev | next  [–]      wow amazing, nobody is gonna edit that code ever again...    reply           slt2021  1 day ago    | parent | prev | next  [–]      wow amazing, nobody is gonna edit that code ever again...    reply          slt2021  1 day ago    | parent | prev | next  [–]      wow amazing, nobody is gonna edit that code ever again...    reply          slt2021  1 day ago    | parent | prev | next  [–]      wow amazing, nobody is gonna edit that code ever again...    reply          slt2021  1 day ago    | parent | prev | next  [–]      wow amazing, nobody is gonna edit that code ever again...    reply    slt2021  1 day ago    | parent | prev | next  [–]     slt2021  1 day ago    | parent | prev | next  [–]    slt2021 1 day ago 1 day ago | parent | prev | next  [–]   parent prev next [–]  wow amazing, nobody is gonna edit that code ever again...    reply   wow amazing, nobody is gonna edit that code ever again...   reply    reply    reply  reply reply        notfed  1 day ago    | prev | next  [–]      > The x25519 algorithm also plays a role in post-quantum safe cryptographic solutions, having been included as the classical algorithm in the TLS 1.3 and SSH hybrid scheme specifications for post-quantum key agreement. Really though? This mostly-untrue statement is the line that warrants adding hashtag #post-quantum-cryptography to the blogpost?    reply           notfed  1 day ago    | prev | next  [–]      > The x25519 algorithm also plays a role in post-quantum safe cryptographic solutions, having been included as the classical algorithm in the TLS 1.3 and SSH hybrid scheme specifications for post-quantum key agreement. Really though? This mostly-untrue statement is the line that warrants adding hashtag #post-quantum-cryptography to the blogpost?    reply           notfed  1 day ago    | prev | next  [–]      > The x25519 algorithm also plays a role in post-quantum safe cryptographic solutions, having been included as the classical algorithm in the TLS 1.3 and SSH hybrid scheme specifications for post-quantum key agreement. Really though? This mostly-untrue statement is the line that warrants adding hashtag #post-quantum-cryptography to the blogpost?    reply          notfed  1 day ago    | prev | next  [–]      > The x25519 algorithm also plays a role in post-quantum safe cryptographic solutions, having been included as the classical algorithm in the TLS 1.3 and SSH hybrid scheme specifications for post-quantum key agreement. Really though? This mostly-untrue statement is the line that warrants adding hashtag #post-quantum-cryptography to the blogpost?    reply          notfed  1 day ago    | prev | next  [–]      > The x25519 algorithm also plays a role in post-quantum safe cryptographic solutions, having been included as the classical algorithm in the TLS 1.3 and SSH hybrid scheme specifications for post-quantum key agreement. Really though? This mostly-untrue statement is the line that warrants adding hashtag #post-quantum-cryptography to the blogpost?    reply          notfed  1 day ago    | prev | next  [–]      > The x25519 algorithm also plays a role in post-quantum safe cryptographic solutions, having been included as the classical algorithm in the TLS 1.3 and SSH hybrid scheme specifications for post-quantum key agreement. Really though? This mostly-untrue statement is the line that warrants adding hashtag #post-quantum-cryptography to the blogpost?    reply    notfed  1 day ago    | prev | next  [–]     notfed  1 day ago    | prev | next  [–]    notfed 1 day ago 1 day ago | prev | next  [–]   prev next [–]  > The x25519 algorithm also plays a role in post-quantum safe cryptographic solutions, having been included as the classical algorithm in the TLS 1.3 and SSH hybrid scheme specifications for post-quantum key agreement. Really though? This mostly-untrue statement is the line that warrants adding hashtag #post-quantum-cryptography to the blogpost?    reply   > The x25519 algorithm also plays a role in post-quantum safe cryptographic solutions, having been included as the classical algorithm in the TLS 1.3 and SSH hybrid scheme specifications for post-quantum key agreement. Really though? This mostly-untrue statement is the line that warrants adding hashtag #post-quantum-cryptography to the blogpost? Really though? This mostly-untrue statement is the line that warrants adding hashtag #post-quantum-cryptography to the blogpost?   reply    reply    reply  reply reply        westurner  1 day ago    | parent | next  [–]      Actually, e.g. rustls added X25519Kyber768Draft00 support this year: https://news.ycombinator.com/item?id=41534500 /?q X25519Kyber768Draft00: https://www.google.com/search?q=X25519Kyber768Draft00    reply           westurner  1 day ago    | parent | next  [–]      Actually, e.g. rustls added X25519Kyber768Draft00 support this year: https://news.ycombinator.com/item?id=41534500 /?q X25519Kyber768Draft00: https://www.google.com/search?q=X25519Kyber768Draft00    reply           westurner  1 day ago    | parent | next  [–]      Actually, e.g. rustls added X25519Kyber768Draft00 support this year: https://news.ycombinator.com/item?id=41534500 /?q X25519Kyber768Draft00: https://www.google.com/search?q=X25519Kyber768Draft00    reply          westurner  1 day ago    | parent | next  [–]      Actually, e.g. rustls added X25519Kyber768Draft00 support this year: https://news.ycombinator.com/item?id=41534500 /?q X25519Kyber768Draft00: https://www.google.com/search?q=X25519Kyber768Draft00    reply          westurner  1 day ago    | parent | next  [–]      Actually, e.g. rustls added X25519Kyber768Draft00 support this year: https://news.ycombinator.com/item?id=41534500 /?q X25519Kyber768Draft00: https://www.google.com/search?q=X25519Kyber768Draft00    reply          westurner  1 day ago    | parent | next  [–]      Actually, e.g. rustls added X25519Kyber768Draft00 support this year: https://news.ycombinator.com/item?id=41534500 /?q X25519Kyber768Draft00: https://www.google.com/search?q=X25519Kyber768Draft00    reply    westurner  1 day ago    | parent | next  [–]     westurner  1 day ago    | parent | next  [–]    westurner 1 day ago 1 day ago | parent | next  [–]   parent next [–]  Actually, e.g. rustls added X25519Kyber768Draft00 support this year: https://news.ycombinator.com/item?id=41534500 /?q X25519Kyber768Draft00: https://www.google.com/search?q=X25519Kyber768Draft00    reply   Actually, e.g. rustls added X25519Kyber768Draft00 support this year: https://news.ycombinator.com/item?id=41534500 /?q X25519Kyber768Draft00: https://www.google.com/search?q=X25519Kyber768Draft00 https://news.ycombinator.com/item?id=41534500 /?q X25519Kyber768Draft00: https://www.google.com/search?q=X25519Kyber768Draft00 https://www.google.com/search?q=X25519Kyber768Draft00   reply    reply    reply  reply reply        notfed  1 day ago    | root | parent | next  [–]      Kyber768 is the post-quantum algorithm in that example, not x25519.    reply           notfed  1 day ago    | root | parent | next  [–]      Kyber768 is the post-quantum algorithm in that example, not x25519.    reply           notfed  1 day ago    | root | parent | next  [–]      Kyber768 is the post-quantum algorithm in that example, not x25519.    reply          notfed  1 day ago    | root | parent | next  [–]      Kyber768 is the post-quantum algorithm in that example, not x25519.    reply          notfed  1 day ago    | root | parent | next  [–]      Kyber768 is the post-quantum algorithm in that example, not x25519.    reply          notfed  1 day ago    | root | parent | next  [–]      Kyber768 is the post-quantum algorithm in that example, not x25519.    reply    notfed  1 day ago    | root | parent | next  [–]     notfed  1 day ago    | root | parent | next  [–]    notfed 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  Kyber768 is the post-quantum algorithm in that example, not x25519.    reply   Kyber768 is the post-quantum algorithm in that example, not x25519.   reply    reply    reply  reply reply        westurner  1 day ago    | root | parent | next  [–]      From \"OpenSSL 3.4 Alpha 1 Released with New Features\" (8 days ago) https://news.ycombinator.com/item?id=41456447#41456774 : > Someday there will probably be a TLS1.4/2.0 with PQ, and also FIPS-140 -4? > Are there additional ways to implement NIST PQ finalist algos with openssl? - open-quantum-safe/oqs-provider [implements mlkem512 through mlkem1024 and x25519_mlkem768]    reply           westurner  1 day ago    | root | parent | next  [–]      From \"OpenSSL 3.4 Alpha 1 Released with New Features\" (8 days ago) https://news.ycombinator.com/item?id=41456447#41456774 : > Someday there will probably be a TLS1.4/2.0 with PQ, and also FIPS-140 -4? > Are there additional ways to implement NIST PQ finalist algos with openssl? - open-quantum-safe/oqs-provider [implements mlkem512 through mlkem1024 and x25519_mlkem768]    reply           westurner  1 day ago    | root | parent | next  [–]      From \"OpenSSL 3.4 Alpha 1 Released with New Features\" (8 days ago) https://news.ycombinator.com/item?id=41456447#41456774 : > Someday there will probably be a TLS1.4/2.0 with PQ, and also FIPS-140 -4? > Are there additional ways to implement NIST PQ finalist algos with openssl? - open-quantum-safe/oqs-provider [implements mlkem512 through mlkem1024 and x25519_mlkem768]    reply          westurner  1 day ago    | root | parent | next  [–]      From \"OpenSSL 3.4 Alpha 1 Released with New Features\" (8 days ago) https://news.ycombinator.com/item?id=41456447#41456774 : > Someday there will probably be a TLS1.4/2.0 with PQ, and also FIPS-140 -4? > Are there additional ways to implement NIST PQ finalist algos with openssl? - open-quantum-safe/oqs-provider [implements mlkem512 through mlkem1024 and x25519_mlkem768]    reply          westurner  1 day ago    | root | parent | next  [–]      From \"OpenSSL 3.4 Alpha 1 Released with New Features\" (8 days ago) https://news.ycombinator.com/item?id=41456447#41456774 : > Someday there will probably be a TLS1.4/2.0 with PQ, and also FIPS-140 -4? > Are there additional ways to implement NIST PQ finalist algos with openssl? - open-quantum-safe/oqs-provider [implements mlkem512 through mlkem1024 and x25519_mlkem768]    reply          westurner  1 day ago    | root | parent | next  [–]      From \"OpenSSL 3.4 Alpha 1 Released with New Features\" (8 days ago) https://news.ycombinator.com/item?id=41456447#41456774 : > Someday there will probably be a TLS1.4/2.0 with PQ, and also FIPS-140 -4? > Are there additional ways to implement NIST PQ finalist algos with openssl? - open-quantum-safe/oqs-provider [implements mlkem512 through mlkem1024 and x25519_mlkem768]    reply    westurner  1 day ago    | root | parent | next  [–]     westurner  1 day ago    | root | parent | next  [–]    westurner 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  From \"OpenSSL 3.4 Alpha 1 Released with New Features\" (8 days ago) https://news.ycombinator.com/item?id=41456447#41456774 : > Someday there will probably be a TLS1.4/2.0 with PQ, and also FIPS-140 -4? > Are there additional ways to implement NIST PQ finalist algos with openssl? - open-quantum-safe/oqs-provider [implements mlkem512 through mlkem1024 and x25519_mlkem768]    reply   From \"OpenSSL 3.4 Alpha 1 Released with New Features\" (8 days ago) https://news.ycombinator.com/item?id=41456447#41456774 : > Someday there will probably be a TLS1.4/2.0 with PQ, and also FIPS-140 -4? > Are there additional ways to implement NIST PQ finalist algos with openssl? - open-quantum-safe/oqs-provider [implements mlkem512 through mlkem1024 and x25519_mlkem768] https://news.ycombinator.com/item?id=41456447#41456774 > Someday there will probably be a TLS1.4/2.0 with PQ, and also FIPS-140 -4? Someday there will probably be a TLS1.4/2.0 with PQ, and also FIPS-140 -4? > Are there additional ways to implement NIST PQ finalist algos with openssl? Are there additional ways to implement NIST PQ finalist algos with openssl? - open-quantum-safe/oqs-provider [implements mlkem512 through mlkem1024 and x25519_mlkem768]   reply    reply    reply  reply reply        notfed  7 hours ago    | root | parent | next  [–]      Not sure what you're trying to say here . x25519 is objectively not PQC and never claimed to be, and this isn't debatable.    reply           notfed  7 hours ago    | root | parent | next  [–]      Not sure what you're trying to say here . x25519 is objectively not PQC and never claimed to be, and this isn't debatable.    reply           notfed  7 hours ago    | root | parent | next  [–]      Not sure what you're trying to say here . x25519 is objectively not PQC and never claimed to be, and this isn't debatable.    reply          notfed  7 hours ago    | root | parent | next  [–]      Not sure what you're trying to say here . x25519 is objectively not PQC and never claimed to be, and this isn't debatable.    reply          notfed  7 hours ago    | root | parent | next  [–]      Not sure what you're trying to say here . x25519 is objectively not PQC and never claimed to be, and this isn't debatable.    reply          notfed  7 hours ago    | root | parent | next  [–]      Not sure what you're trying to say here . x25519 is objectively not PQC and never claimed to be, and this isn't debatable.    reply    notfed  7 hours ago    | root | parent | next  [–]     notfed  7 hours ago    | root | parent | next  [–]    notfed 7 hours ago 7 hours ago | root | parent | next  [–]   root parent next [–]  Not sure what you're trying to say here . x25519 is objectively not PQC and never claimed to be, and this isn't debatable.    reply   Not sure what you're trying to say here . x25519 is objectively not PQC and never claimed to be, and this isn't debatable.   reply    reply    reply  reply reply        westurner  6 hours ago    | root | parent | next  [–]      In this case, hybrid means \"not entirely PQ\".    reply           westurner  6 hours ago    | root | parent | next  [–]      In this case, hybrid means \"not entirely PQ\".    reply           westurner  6 hours ago    | root | parent | next  [–]      In this case, hybrid means \"not entirely PQ\".    reply          westurner  6 hours ago    | root | parent | next  [–]      In this case, hybrid means \"not entirely PQ\".    reply          westurner  6 hours ago    | root | parent | next  [–]      In this case, hybrid means \"not entirely PQ\".    reply          westurner  6 hours ago    | root | parent | next  [–]      In this case, hybrid means \"not entirely PQ\".    reply    westurner  6 hours ago    | root | parent | next  [–]     westurner  6 hours ago    | root | parent | next  [–]    westurner 6 hours ago 6 hours ago | root | parent | next  [–]   root parent next [–]  In this case, hybrid means \"not entirely PQ\".    reply   In this case, hybrid means \"not entirely PQ\".   reply    reply    reply  reply reply        nanolith  1 day ago    | prev | next  [–]      The formal methods nerd in me is happy to see HOL Light being used to formally verify this implementation. I'm curious to see how closely their abstract machine models follow specific machine implementations. OOO, speculation, and deep pipelining have non-trivial impacts on potential side channels, and these vary quite a bit by stepping and architecture.    reply           nanolith  1 day ago    | prev | next  [–]      The formal methods nerd in me is happy to see HOL Light being used to formally verify this implementation. I'm curious to see how closely their abstract machine models follow specific machine implementations. OOO, speculation, and deep pipelining have non-trivial impacts on potential side channels, and these vary quite a bit by stepping and architecture.    reply           nanolith  1 day ago    | prev | next  [–]      The formal methods nerd in me is happy to see HOL Light being used to formally verify this implementation. I'm curious to see how closely their abstract machine models follow specific machine implementations. OOO, speculation, and deep pipelining have non-trivial impacts on potential side channels, and these vary quite a bit by stepping and architecture.    reply          nanolith  1 day ago    | prev | next  [–]      The formal methods nerd in me is happy to see HOL Light being used to formally verify this implementation. I'm curious to see how closely their abstract machine models follow specific machine implementations. OOO, speculation, and deep pipelining have non-trivial impacts on potential side channels, and these vary quite a bit by stepping and architecture.    reply          nanolith  1 day ago    | prev | next  [–]      The formal methods nerd in me is happy to see HOL Light being used to formally verify this implementation. I'm curious to see how closely their abstract machine models follow specific machine implementations. OOO, speculation, and deep pipelining have non-trivial impacts on potential side channels, and these vary quite a bit by stepping and architecture.    reply          nanolith  1 day ago    | prev | next  [–]      The formal methods nerd in me is happy to see HOL Light being used to formally verify this implementation. I'm curious to see how closely their abstract machine models follow specific machine implementations. OOO, speculation, and deep pipelining have non-trivial impacts on potential side channels, and these vary quite a bit by stepping and architecture.    reply    nanolith  1 day ago    | prev | next  [–]     nanolith  1 day ago    | prev | next  [–]    nanolith 1 day ago 1 day ago | prev | next  [–]   prev next [–]  The formal methods nerd in me is happy to see HOL Light being used to formally verify this implementation. I'm curious to see how closely their abstract machine models follow specific machine implementations. OOO, speculation, and deep pipelining have non-trivial impacts on potential side channels, and these vary quite a bit by stepping and architecture.    reply   The formal methods nerd in me is happy to see HOL Light being used to formally verify this implementation. I'm curious to see how closely their abstract machine models follow specific machine implementations. OOO, speculation, and deep pipelining have non-trivial impacts on potential side channels, and these vary quite a bit by stepping and architecture.   reply    reply    reply  reply reply        holowoodman  1 day ago    | parent | next  [–]      Even worse: Each new CPU generation will need a new machine model and a reevaluation. Because OOO, speculation and all the timing behaviour are non-functional properties that frequently change due to new optimizations, different internal structuring, etc.    reply           holowoodman  1 day ago    | parent | next  [–]      Even worse: Each new CPU generation will need a new machine model and a reevaluation. Because OOO, speculation and all the timing behaviour are non-functional properties that frequently change due to new optimizations, different internal structuring, etc.    reply           holowoodman  1 day ago    | parent | next  [–]      Even worse: Each new CPU generation will need a new machine model and a reevaluation. Because OOO, speculation and all the timing behaviour are non-functional properties that frequently change due to new optimizations, different internal structuring, etc.    reply          holowoodman  1 day ago    | parent | next  [–]      Even worse: Each new CPU generation will need a new machine model and a reevaluation. Because OOO, speculation and all the timing behaviour are non-functional properties that frequently change due to new optimizations, different internal structuring, etc.    reply          holowoodman  1 day ago    | parent | next  [–]      Even worse: Each new CPU generation will need a new machine model and a reevaluation. Because OOO, speculation and all the timing behaviour are non-functional properties that frequently change due to new optimizations, different internal structuring, etc.    reply          holowoodman  1 day ago    | parent | next  [–]      Even worse: Each new CPU generation will need a new machine model and a reevaluation. Because OOO, speculation and all the timing behaviour are non-functional properties that frequently change due to new optimizations, different internal structuring, etc.    reply    holowoodman  1 day ago    | parent | next  [–]     holowoodman  1 day ago    | parent | next  [–]    holowoodman 1 day ago 1 day ago | parent | next  [–]   parent next [–]  Even worse: Each new CPU generation will need a new machine model and a reevaluation. Because OOO, speculation and all the timing behaviour are non-functional properties that frequently change due to new optimizations, different internal structuring, etc.    reply   Even worse: Each new CPU generation will need a new machine model and a reevaluation. Because OOO, speculation and all the timing behaviour are non-functional properties that frequently change due to new optimizations, different internal structuring, etc.   reply    reply    reply  reply reply        aseipp  1 day ago    | prev | next  [–]      I was aware of s2n-bignum which is a very cool project, but apparently there is a larger sister project, aws-lc, that aims for broader set of APIs including OpenSSL compatibility, while retaining the general approach and vibe (lots of formal verification + performance work): https://github.com/aws/aws-lc That's pretty sweet. I'm currently using BoringSSL in a project as a supplement to OpenSSL (mostly because it is much easier to build for Windows users than requiring them to fiddle with msys2/vcpkg etc; the alternative is to rely on the Windows CNG API, but it lacks features like ed25519 support.) I wonder how much effort it would take to use aws-lc instead... Not that I'm that interested, BSSL is pretty good, but free performance and heavy automated verification is always nice :) Related: one of the authors of this post, John Harrison, wrote a really good book about automated theorm proving about 15 years ago while working on floating point verification at Intel -- there's still no other book quite like this one, I think https://www.cl.cam.ac.uk/~jrh13/    reply           aseipp  1 day ago    | prev | next  [–]      I was aware of s2n-bignum which is a very cool project, but apparently there is a larger sister project, aws-lc, that aims for broader set of APIs including OpenSSL compatibility, while retaining the general approach and vibe (lots of formal verification + performance work): https://github.com/aws/aws-lc That's pretty sweet. I'm currently using BoringSSL in a project as a supplement to OpenSSL (mostly because it is much easier to build for Windows users than requiring them to fiddle with msys2/vcpkg etc; the alternative is to rely on the Windows CNG API, but it lacks features like ed25519 support.) I wonder how much effort it would take to use aws-lc instead... Not that I'm that interested, BSSL is pretty good, but free performance and heavy automated verification is always nice :) Related: one of the authors of this post, John Harrison, wrote a really good book about automated theorm proving about 15 years ago while working on floating point verification at Intel -- there's still no other book quite like this one, I think https://www.cl.cam.ac.uk/~jrh13/    reply           aseipp  1 day ago    | prev | next  [–]      I was aware of s2n-bignum which is a very cool project, but apparently there is a larger sister project, aws-lc, that aims for broader set of APIs including OpenSSL compatibility, while retaining the general approach and vibe (lots of formal verification + performance work): https://github.com/aws/aws-lc That's pretty sweet. I'm currently using BoringSSL in a project as a supplement to OpenSSL (mostly because it is much easier to build for Windows users than requiring them to fiddle with msys2/vcpkg etc; the alternative is to rely on the Windows CNG API, but it lacks features like ed25519 support.) I wonder how much effort it would take to use aws-lc instead... Not that I'm that interested, BSSL is pretty good, but free performance and heavy automated verification is always nice :) Related: one of the authors of this post, John Harrison, wrote a really good book about automated theorm proving about 15 years ago while working on floating point verification at Intel -- there's still no other book quite like this one, I think https://www.cl.cam.ac.uk/~jrh13/    reply          aseipp  1 day ago    | prev | next  [–]      I was aware of s2n-bignum which is a very cool project, but apparently there is a larger sister project, aws-lc, that aims for broader set of APIs including OpenSSL compatibility, while retaining the general approach and vibe (lots of formal verification + performance work): https://github.com/aws/aws-lc That's pretty sweet. I'm currently using BoringSSL in a project as a supplement to OpenSSL (mostly because it is much easier to build for Windows users than requiring them to fiddle with msys2/vcpkg etc; the alternative is to rely on the Windows CNG API, but it lacks features like ed25519 support.) I wonder how much effort it would take to use aws-lc instead... Not that I'm that interested, BSSL is pretty good, but free performance and heavy automated verification is always nice :) Related: one of the authors of this post, John Harrison, wrote a really good book about automated theorm proving about 15 years ago while working on floating point verification at Intel -- there's still no other book quite like this one, I think https://www.cl.cam.ac.uk/~jrh13/    reply          aseipp  1 day ago    | prev | next  [–]      I was aware of s2n-bignum which is a very cool project, but apparently there is a larger sister project, aws-lc, that aims for broader set of APIs including OpenSSL compatibility, while retaining the general approach and vibe (lots of formal verification + performance work): https://github.com/aws/aws-lc That's pretty sweet. I'm currently using BoringSSL in a project as a supplement to OpenSSL (mostly because it is much easier to build for Windows users than requiring them to fiddle with msys2/vcpkg etc; the alternative is to rely on the Windows CNG API, but it lacks features like ed25519 support.) I wonder how much effort it would take to use aws-lc instead... Not that I'm that interested, BSSL is pretty good, but free performance and heavy automated verification is always nice :) Related: one of the authors of this post, John Harrison, wrote a really good book about automated theorm proving about 15 years ago while working on floating point verification at Intel -- there's still no other book quite like this one, I think https://www.cl.cam.ac.uk/~jrh13/    reply          aseipp  1 day ago    | prev | next  [–]      I was aware of s2n-bignum which is a very cool project, but apparently there is a larger sister project, aws-lc, that aims for broader set of APIs including OpenSSL compatibility, while retaining the general approach and vibe (lots of formal verification + performance work): https://github.com/aws/aws-lc That's pretty sweet. I'm currently using BoringSSL in a project as a supplement to OpenSSL (mostly because it is much easier to build for Windows users than requiring them to fiddle with msys2/vcpkg etc; the alternative is to rely on the Windows CNG API, but it lacks features like ed25519 support.) I wonder how much effort it would take to use aws-lc instead... Not that I'm that interested, BSSL is pretty good, but free performance and heavy automated verification is always nice :) Related: one of the authors of this post, John Harrison, wrote a really good book about automated theorm proving about 15 years ago while working on floating point verification at Intel -- there's still no other book quite like this one, I think https://www.cl.cam.ac.uk/~jrh13/    reply    aseipp  1 day ago    | prev | next  [–]     aseipp  1 day ago    | prev | next  [–]    aseipp 1 day ago 1 day ago | prev | next  [–]   prev next [–]  I was aware of s2n-bignum which is a very cool project, but apparently there is a larger sister project, aws-lc, that aims for broader set of APIs including OpenSSL compatibility, while retaining the general approach and vibe (lots of formal verification + performance work): https://github.com/aws/aws-lc That's pretty sweet. I'm currently using BoringSSL in a project as a supplement to OpenSSL (mostly because it is much easier to build for Windows users than requiring them to fiddle with msys2/vcpkg etc; the alternative is to rely on the Windows CNG API, but it lacks features like ed25519 support.) I wonder how much effort it would take to use aws-lc instead... Not that I'm that interested, BSSL is pretty good, but free performance and heavy automated verification is always nice :) Related: one of the authors of this post, John Harrison, wrote a really good book about automated theorm proving about 15 years ago while working on floating point verification at Intel -- there's still no other book quite like this one, I think https://www.cl.cam.ac.uk/~jrh13/    reply   I was aware of s2n-bignum which is a very cool project, but apparently there is a larger sister project, aws-lc, that aims for broader set of APIs including OpenSSL compatibility, while retaining the general approach and vibe (lots of formal verification + performance work): https://github.com/aws/aws-lc That's pretty sweet. I'm currently using BoringSSL in a project as a supplement to OpenSSL (mostly because it is much easier to build for Windows users than requiring them to fiddle with msys2/vcpkg etc; the alternative is to rely on the Windows CNG API, but it lacks features like ed25519 support.) I wonder how much effort it would take to use aws-lc instead... Not that I'm that interested, BSSL is pretty good, but free performance and heavy automated verification is always nice :) Related: one of the authors of this post, John Harrison, wrote a really good book about automated theorm proving about 15 years ago while working on floating point verification at Intel -- there's still no other book quite like this one, I think https://www.cl.cam.ac.uk/~jrh13/ https://github.com/aws/aws-lc That's pretty sweet. I'm currently using BoringSSL in a project as a supplement to OpenSSL (mostly because it is much easier to build for Windows users than requiring them to fiddle with msys2/vcpkg etc; the alternative is to rely on the Windows CNG API, but it lacks features like ed25519 support.) I wonder how much effort it would take to use aws-lc instead... Not that I'm that interested, BSSL is pretty good, but free performance and heavy automated verification is always nice :) Related: one of the authors of this post, John Harrison, wrote a really good book about automated theorm proving about 15 years ago while working on floating point verification at Intel -- there's still no other book quite like this one, I think https://www.cl.cam.ac.uk/~jrh13/ https://www.cl.cam.ac.uk/~jrh13/   reply    reply    reply  reply reply        newman314  1 day ago    | parent | next  [–]      Upon hearing about AWS-LC, I immediately thought about tying it to nginx to see if it will work. Turns out someone else has already tried: https://github.com/aws/aws-lc/issues/1827    reply           newman314  1 day ago    | parent | next  [–]      Upon hearing about AWS-LC, I immediately thought about tying it to nginx to see if it will work. Turns out someone else has already tried: https://github.com/aws/aws-lc/issues/1827    reply           newman314  1 day ago    | parent | next  [–]      Upon hearing about AWS-LC, I immediately thought about tying it to nginx to see if it will work. Turns out someone else has already tried: https://github.com/aws/aws-lc/issues/1827    reply          newman314  1 day ago    | parent | next  [–]      Upon hearing about AWS-LC, I immediately thought about tying it to nginx to see if it will work. Turns out someone else has already tried: https://github.com/aws/aws-lc/issues/1827    reply          newman314  1 day ago    | parent | next  [–]      Upon hearing about AWS-LC, I immediately thought about tying it to nginx to see if it will work. Turns out someone else has already tried: https://github.com/aws/aws-lc/issues/1827    reply          newman314  1 day ago    | parent | next  [–]      Upon hearing about AWS-LC, I immediately thought about tying it to nginx to see if it will work. Turns out someone else has already tried: https://github.com/aws/aws-lc/issues/1827    reply    newman314  1 day ago    | parent | next  [–]     newman314  1 day ago    | parent | next  [–]    newman314 1 day ago 1 day ago | parent | next  [–]   parent next [–]  Upon hearing about AWS-LC, I immediately thought about tying it to nginx to see if it will work. Turns out someone else has already tried: https://github.com/aws/aws-lc/issues/1827    reply   Upon hearing about AWS-LC, I immediately thought about tying it to nginx to see if it will work. Turns out someone else has already tried: https://github.com/aws/aws-lc/issues/1827 Turns out someone else has already tried: https://github.com/aws/aws-lc/issues/1827 https://github.com/aws/aws-lc/issues/1827   reply    reply    reply  reply reply        saghm  1 day ago    | prev | next  [–]      My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. At times I've run into places that require me to use RSA keys though (ironically, I seem to remember first experiencing this with AWS years back, although I honestly can't recall if this is still the case or not). If this further improvement becomes widely used, it would be interesting to see if it's enough to tip the scales towards ed25519 being more of the de facto \"default\" ssh key algorithm. My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that.    reply           saghm  1 day ago    | prev | next  [–]      My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. At times I've run into places that require me to use RSA keys though (ironically, I seem to remember first experiencing this with AWS years back, although I honestly can't recall if this is still the case or not). If this further improvement becomes widely used, it would be interesting to see if it's enough to tip the scales towards ed25519 being more of the de facto \"default\" ssh key algorithm. My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that.    reply           saghm  1 day ago    | prev | next  [–]      My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. At times I've run into places that require me to use RSA keys though (ironically, I seem to remember first experiencing this with AWS years back, although I honestly can't recall if this is still the case or not). If this further improvement becomes widely used, it would be interesting to see if it's enough to tip the scales towards ed25519 being more of the de facto \"default\" ssh key algorithm. My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that.    reply          saghm  1 day ago    | prev | next  [–]      My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. At times I've run into places that require me to use RSA keys though (ironically, I seem to remember first experiencing this with AWS years back, although I honestly can't recall if this is still the case or not). If this further improvement becomes widely used, it would be interesting to see if it's enough to tip the scales towards ed25519 being more of the de facto \"default\" ssh key algorithm. My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that.    reply          saghm  1 day ago    | prev | next  [–]      My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. At times I've run into places that require me to use RSA keys though (ironically, I seem to remember first experiencing this with AWS years back, although I honestly can't recall if this is still the case or not). If this further improvement becomes widely used, it would be interesting to see if it's enough to tip the scales towards ed25519 being more of the de facto \"default\" ssh key algorithm. My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that.    reply          saghm  1 day ago    | prev | next  [–]      My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. At times I've run into places that require me to use RSA keys though (ironically, I seem to remember first experiencing this with AWS years back, although I honestly can't recall if this is still the case or not). If this further improvement becomes widely used, it would be interesting to see if it's enough to tip the scales towards ed25519 being more of the de facto \"default\" ssh key algorithm. My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that.    reply    saghm  1 day ago    | prev | next  [–]     saghm  1 day ago    | prev | next  [–]    saghm 1 day ago 1 day ago | prev | next  [–]   prev next [–]  My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. At times I've run into places that require me to use RSA keys though (ironically, I seem to remember first experiencing this with AWS years back, although I honestly can't recall if this is still the case or not). If this further improvement becomes widely used, it would be interesting to see if it's enough to tip the scales towards ed25519 being more of the de facto \"default\" ssh key algorithm. My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that.    reply   My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. At times I've run into places that require me to use RSA keys though (ironically, I seem to remember first experiencing this with AWS years back, although I honestly can't recall if this is still the case or not). If this further improvement becomes widely used, it would be interesting to see if it's enough to tip the scales towards ed25519 being more of the de facto \"default\" ssh key algorithm. My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that. If this further improvement becomes widely used, it would be interesting to see if it's enough to tip the scales towards ed25519 being more of the de facto \"default\" ssh key algorithm. My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that.   reply    reply    reply  reply reply        scrapheap  1 day ago    | parent | next  [–]      > My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that. I wouldn't be surprised if a lot of people still use RSA for SSH keys for one or more of the following reasons: 1. A lot of tutorials about generating SSH Keys were written before ed25519, so if they follow an old tutorial they'll probably be generating an RSA key. 2. Older versions of OpenSSH, that you'd find on CentOS 7 and below, would default to RSA if you didn't specify a key type when running ssh-keygen. 3. There are some systems out there that don't support ed25519, though they are becoming rarer.  If you have to deal with those systems then you're forced to use RSA (at least for that system). 4. Some of us have been using SSH keys from way before OpenSSH add support for ed25519 keys in 2014, so any long lived SSH keys won't be ed25519 keys (wow, ed25519 has now been about in OpenSSH for over 10 years).    reply           scrapheap  1 day ago    | parent | next  [–]      > My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that. I wouldn't be surprised if a lot of people still use RSA for SSH keys for one or more of the following reasons: 1. A lot of tutorials about generating SSH Keys were written before ed25519, so if they follow an old tutorial they'll probably be generating an RSA key. 2. Older versions of OpenSSH, that you'd find on CentOS 7 and below, would default to RSA if you didn't specify a key type when running ssh-keygen. 3. There are some systems out there that don't support ed25519, though they are becoming rarer.  If you have to deal with those systems then you're forced to use RSA (at least for that system). 4. Some of us have been using SSH keys from way before OpenSSH add support for ed25519 keys in 2014, so any long lived SSH keys won't be ed25519 keys (wow, ed25519 has now been about in OpenSSH for over 10 years).    reply           scrapheap  1 day ago    | parent | next  [–]      > My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that. I wouldn't be surprised if a lot of people still use RSA for SSH keys for one or more of the following reasons: 1. A lot of tutorials about generating SSH Keys were written before ed25519, so if they follow an old tutorial they'll probably be generating an RSA key. 2. Older versions of OpenSSH, that you'd find on CentOS 7 and below, would default to RSA if you didn't specify a key type when running ssh-keygen. 3. There are some systems out there that don't support ed25519, though they are becoming rarer.  If you have to deal with those systems then you're forced to use RSA (at least for that system). 4. Some of us have been using SSH keys from way before OpenSSH add support for ed25519 keys in 2014, so any long lived SSH keys won't be ed25519 keys (wow, ed25519 has now been about in OpenSSH for over 10 years).    reply          scrapheap  1 day ago    | parent | next  [–]      > My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that. I wouldn't be surprised if a lot of people still use RSA for SSH keys for one or more of the following reasons: 1. A lot of tutorials about generating SSH Keys were written before ed25519, so if they follow an old tutorial they'll probably be generating an RSA key. 2. Older versions of OpenSSH, that you'd find on CentOS 7 and below, would default to RSA if you didn't specify a key type when running ssh-keygen. 3. There are some systems out there that don't support ed25519, though they are becoming rarer.  If you have to deal with those systems then you're forced to use RSA (at least for that system). 4. Some of us have been using SSH keys from way before OpenSSH add support for ed25519 keys in 2014, so any long lived SSH keys won't be ed25519 keys (wow, ed25519 has now been about in OpenSSH for over 10 years).    reply          scrapheap  1 day ago    | parent | next  [–]      > My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that. I wouldn't be surprised if a lot of people still use RSA for SSH keys for one or more of the following reasons: 1. A lot of tutorials about generating SSH Keys were written before ed25519, so if they follow an old tutorial they'll probably be generating an RSA key. 2. Older versions of OpenSSH, that you'd find on CentOS 7 and below, would default to RSA if you didn't specify a key type when running ssh-keygen. 3. There are some systems out there that don't support ed25519, though they are becoming rarer.  If you have to deal with those systems then you're forced to use RSA (at least for that system). 4. Some of us have been using SSH keys from way before OpenSSH add support for ed25519 keys in 2014, so any long lived SSH keys won't be ed25519 keys (wow, ed25519 has now been about in OpenSSH for over 10 years).    reply          scrapheap  1 day ago    | parent | next  [–]      > My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that. I wouldn't be surprised if a lot of people still use RSA for SSH keys for one or more of the following reasons: 1. A lot of tutorials about generating SSH Keys were written before ed25519, so if they follow an old tutorial they'll probably be generating an RSA key. 2. Older versions of OpenSSH, that you'd find on CentOS 7 and below, would default to RSA if you didn't specify a key type when running ssh-keygen. 3. There are some systems out there that don't support ed25519, though they are becoming rarer.  If you have to deal with those systems then you're forced to use RSA (at least for that system). 4. Some of us have been using SSH keys from way before OpenSSH add support for ed25519 keys in 2014, so any long lived SSH keys won't be ed25519 keys (wow, ed25519 has now been about in OpenSSH for over 10 years).    reply    scrapheap  1 day ago    | parent | next  [–]     scrapheap  1 day ago    | parent | next  [–]    scrapheap 1 day ago 1 day ago | parent | next  [–]   parent next [–]  > My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that. I wouldn't be surprised if a lot of people still use RSA for SSH keys for one or more of the following reasons: 1. A lot of tutorials about generating SSH Keys were written before ed25519, so if they follow an old tutorial they'll probably be generating an RSA key. 2. Older versions of OpenSSH, that you'd find on CentOS 7 and below, would default to RSA if you didn't specify a key type when running ssh-keygen. 3. There are some systems out there that don't support ed25519, though they are becoming rarer.  If you have to deal with those systems then you're forced to use RSA (at least for that system). 4. Some of us have been using SSH keys from way before OpenSSH add support for ed25519 keys in 2014, so any long lived SSH keys won't be ed25519 keys (wow, ed25519 has now been about in OpenSSH for over 10 years).    reply   > My experience is that a decent number of people still use RSA keys most of the time, but I don't feel like I have nearly enough of a sample size to conclude anything significant from that. I wouldn't be surprised if a lot of people still use RSA for SSH keys for one or more of the following reasons: 1. A lot of tutorials about generating SSH Keys were written before ed25519, so if they follow an old tutorial they'll probably be generating an RSA key. 2. Older versions of OpenSSH, that you'd find on CentOS 7 and below, would default to RSA if you didn't specify a key type when running ssh-keygen. 3. There are some systems out there that don't support ed25519, though they are becoming rarer.  If you have to deal with those systems then you're forced to use RSA (at least for that system). 4. Some of us have been using SSH keys from way before OpenSSH add support for ed25519 keys in 2014, so any long lived SSH keys won't be ed25519 keys (wow, ed25519 has now been about in OpenSSH for over 10 years). I wouldn't be surprised if a lot of people still use RSA for SSH keys for one or more of the following reasons: 1. A lot of tutorials about generating SSH Keys were written before ed25519, so if they follow an old tutorial they'll probably be generating an RSA key. 2. Older versions of OpenSSH, that you'd find on CentOS 7 and below, would default to RSA if you didn't specify a key type when running ssh-keygen. 3. There are some systems out there that don't support ed25519, though they are becoming rarer.  If you have to deal with those systems then you're forced to use RSA (at least for that system). 4. Some of us have been using SSH keys from way before OpenSSH add support for ed25519 keys in 2014, so any long lived SSH keys won't be ed25519 keys (wow, ed25519 has now been about in OpenSSH for over 10 years).   reply    reply    reply  reply reply        miki123211  1 day ago    | root | parent | next  [–]      5. a lot of people (especially older people I suspect) think \"RSA\" when they hear \"public key cryptography\". I'm in my twenties and still have that reaction. I know elliptic curves exist, I even sort-of-kind-of have an awareness of how they work, but if I was asked to name one cryptosystem that used public and private keys, I'd definitely say RSA first and not elliptic curves.    reply           miki123211  1 day ago    | root | parent | next  [–]      5. a lot of people (especially older people I suspect) think \"RSA\" when they hear \"public key cryptography\". I'm in my twenties and still have that reaction. I know elliptic curves exist, I even sort-of-kind-of have an awareness of how they work, but if I was asked to name one cryptosystem that used public and private keys, I'd definitely say RSA first and not elliptic curves.    reply           miki123211  1 day ago    | root | parent | next  [–]      5. a lot of people (especially older people I suspect) think \"RSA\" when they hear \"public key cryptography\". I'm in my twenties and still have that reaction. I know elliptic curves exist, I even sort-of-kind-of have an awareness of how they work, but if I was asked to name one cryptosystem that used public and private keys, I'd definitely say RSA first and not elliptic curves.    reply          miki123211  1 day ago    | root | parent | next  [–]      5. a lot of people (especially older people I suspect) think \"RSA\" when they hear \"public key cryptography\". I'm in my twenties and still have that reaction. I know elliptic curves exist, I even sort-of-kind-of have an awareness of how they work, but if I was asked to name one cryptosystem that used public and private keys, I'd definitely say RSA first and not elliptic curves.    reply          miki123211  1 day ago    | root | parent | next  [–]      5. a lot of people (especially older people I suspect) think \"RSA\" when they hear \"public key cryptography\". I'm in my twenties and still have that reaction. I know elliptic curves exist, I even sort-of-kind-of have an awareness of how they work, but if I was asked to name one cryptosystem that used public and private keys, I'd definitely say RSA first and not elliptic curves.    reply          miki123211  1 day ago    | root | parent | next  [–]      5. a lot of people (especially older people I suspect) think \"RSA\" when they hear \"public key cryptography\". I'm in my twenties and still have that reaction. I know elliptic curves exist, I even sort-of-kind-of have an awareness of how they work, but if I was asked to name one cryptosystem that used public and private keys, I'd definitely say RSA first and not elliptic curves.    reply    miki123211  1 day ago    | root | parent | next  [–]     miki123211  1 day ago    | root | parent | next  [–]    miki123211 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  5. a lot of people (especially older people I suspect) think \"RSA\" when they hear \"public key cryptography\". I'm in my twenties and still have that reaction. I know elliptic curves exist, I even sort-of-kind-of have an awareness of how they work, but if I was asked to name one cryptosystem that used public and private keys, I'd definitely say RSA first and not elliptic curves.    reply   5. a lot of people (especially older people I suspect) think \"RSA\" when they hear \"public key cryptography\". I'm in my twenties and still have that reaction. I know elliptic curves exist, I even sort-of-kind-of have an awareness of how they work, but if I was asked to name one cryptosystem that used public and private keys, I'd definitely say RSA first and not elliptic curves. I'm in my twenties and still have that reaction. I know elliptic curves exist, I even sort-of-kind-of have an awareness of how they work, but if I was asked to name one cryptosystem that used public and private keys, I'd definitely say RSA first and not elliptic curves.   reply    reply    reply  reply reply        vitus  1 day ago    | root | parent | next  [–]      This is likely in no small part due to CS education only really teaching the mechanics of RSA (modular arithmetic, Fermat's little theorem, etc), or at least, that still seems to be the case at Berkeley. I'd guess because elliptic curve crypto requires more advanced math to reason about (more advanced group theory, at least) and doesn't map as cleanly to existing concepts that non-math-major undergrads have. cryptopals.com also doesn't cover any elliptive curve crypto until you get into the last set.    reply           vitus  1 day ago    | root | parent | next  [–]      This is likely in no small part due to CS education only really teaching the mechanics of RSA (modular arithmetic, Fermat's little theorem, etc), or at least, that still seems to be the case at Berkeley. I'd guess because elliptic curve crypto requires more advanced math to reason about (more advanced group theory, at least) and doesn't map as cleanly to existing concepts that non-math-major undergrads have. cryptopals.com also doesn't cover any elliptive curve crypto until you get into the last set.    reply           vitus  1 day ago    | root | parent | next  [–]      This is likely in no small part due to CS education only really teaching the mechanics of RSA (modular arithmetic, Fermat's little theorem, etc), or at least, that still seems to be the case at Berkeley. I'd guess because elliptic curve crypto requires more advanced math to reason about (more advanced group theory, at least) and doesn't map as cleanly to existing concepts that non-math-major undergrads have. cryptopals.com also doesn't cover any elliptive curve crypto until you get into the last set.    reply          vitus  1 day ago    | root | parent | next  [–]      This is likely in no small part due to CS education only really teaching the mechanics of RSA (modular arithmetic, Fermat's little theorem, etc), or at least, that still seems to be the case at Berkeley. I'd guess because elliptic curve crypto requires more advanced math to reason about (more advanced group theory, at least) and doesn't map as cleanly to existing concepts that non-math-major undergrads have. cryptopals.com also doesn't cover any elliptive curve crypto until you get into the last set.    reply          vitus  1 day ago    | root | parent | next  [–]      This is likely in no small part due to CS education only really teaching the mechanics of RSA (modular arithmetic, Fermat's little theorem, etc), or at least, that still seems to be the case at Berkeley. I'd guess because elliptic curve crypto requires more advanced math to reason about (more advanced group theory, at least) and doesn't map as cleanly to existing concepts that non-math-major undergrads have. cryptopals.com also doesn't cover any elliptive curve crypto until you get into the last set.    reply          vitus  1 day ago    | root | parent | next  [–]      This is likely in no small part due to CS education only really teaching the mechanics of RSA (modular arithmetic, Fermat's little theorem, etc), or at least, that still seems to be the case at Berkeley. I'd guess because elliptic curve crypto requires more advanced math to reason about (more advanced group theory, at least) and doesn't map as cleanly to existing concepts that non-math-major undergrads have. cryptopals.com also doesn't cover any elliptive curve crypto until you get into the last set.    reply    vitus  1 day ago    | root | parent | next  [–]     vitus  1 day ago    | root | parent | next  [–]    vitus 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  This is likely in no small part due to CS education only really teaching the mechanics of RSA (modular arithmetic, Fermat's little theorem, etc), or at least, that still seems to be the case at Berkeley. I'd guess because elliptic curve crypto requires more advanced math to reason about (more advanced group theory, at least) and doesn't map as cleanly to existing concepts that non-math-major undergrads have. cryptopals.com also doesn't cover any elliptive curve crypto until you get into the last set.    reply   This is likely in no small part due to CS education only really teaching the mechanics of RSA (modular arithmetic, Fermat's little theorem, etc), or at least, that still seems to be the case at Berkeley. I'd guess because elliptic curve crypto requires more advanced math to reason about (more advanced group theory, at least) and doesn't map as cleanly to existing concepts that non-math-major undergrads have. cryptopals.com also doesn't cover any elliptive curve crypto until you get into the last set. cryptopals.com also doesn't cover any elliptive curve crypto until you get into the last set.   reply    reply    reply  reply reply        tptacek  1 day ago    | root | parent | next  [–]      We didn't even cover RSA until the original last set. It's a build-up. :)    reply           tptacek  1 day ago    | root | parent | next  [–]      We didn't even cover RSA until the original last set. It's a build-up. :)    reply           tptacek  1 day ago    | root | parent | next  [–]      We didn't even cover RSA until the original last set. It's a build-up. :)    reply          tptacek  1 day ago    | root | parent | next  [–]      We didn't even cover RSA until the original last set. It's a build-up. :)    reply          tptacek  1 day ago    | root | parent | next  [–]      We didn't even cover RSA until the original last set. It's a build-up. :)    reply          tptacek  1 day ago    | root | parent | next  [–]      We didn't even cover RSA until the original last set. It's a build-up. :)    reply    tptacek  1 day ago    | root | parent | next  [–]     tptacek  1 day ago    | root | parent | next  [–]    tptacek 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  We didn't even cover RSA until the original last set. It's a build-up. :)    reply   We didn't even cover RSA until the original last set. It's a build-up. :)   reply    reply    reply  reply reply        throw0101b  1 day ago    | root | parent | prev | next  [–]      I would think that the (non-EC) Diffie-Hellman would also be easy enough to teach as well: exponentials and discrete log problem aren't any/much complicated than explaining factorization.    reply           throw0101b  1 day ago    | root | parent | prev | next  [–]      I would think that the (non-EC) Diffie-Hellman would also be easy enough to teach as well: exponentials and discrete log problem aren't any/much complicated than explaining factorization.    reply           throw0101b  1 day ago    | root | parent | prev | next  [–]      I would think that the (non-EC) Diffie-Hellman would also be easy enough to teach as well: exponentials and discrete log problem aren't any/much complicated than explaining factorization.    reply          throw0101b  1 day ago    | root | parent | prev | next  [–]      I would think that the (non-EC) Diffie-Hellman would also be easy enough to teach as well: exponentials and discrete log problem aren't any/much complicated than explaining factorization.    reply          throw0101b  1 day ago    | root | parent | prev | next  [–]      I would think that the (non-EC) Diffie-Hellman would also be easy enough to teach as well: exponentials and discrete log problem aren't any/much complicated than explaining factorization.    reply          throw0101b  1 day ago    | root | parent | prev | next  [–]      I would think that the (non-EC) Diffie-Hellman would also be easy enough to teach as well: exponentials and discrete log problem aren't any/much complicated than explaining factorization.    reply    throw0101b  1 day ago    | root | parent | prev | next  [–]     throw0101b  1 day ago    | root | parent | prev | next  [–]    throw0101b 1 day ago 1 day ago | root | parent | prev | next  [–]   root parent prev next [–]  I would think that the (non-EC) Diffie-Hellman would also be easy enough to teach as well: exponentials and discrete log problem aren't any/much complicated than explaining factorization.    reply   I would think that the (non-EC) Diffie-Hellman would also be easy enough to teach as well: exponentials and discrete log problem aren't any/much complicated than explaining factorization. log   reply    reply    reply  reply reply        pantalaimon  1 day ago    | root | parent | prev | next  [–]      > 3. There are some systems out there that don't support ed25519, though they are becoming rarer. If you have to deal with those systems then you're forced to use RSA (at least for that system). Azure Devops is a big one.    reply           pantalaimon  1 day ago    | root | parent | prev | next  [–]      > 3. There are some systems out there that don't support ed25519, though they are becoming rarer. If you have to deal with those systems then you're forced to use RSA (at least for that system). Azure Devops is a big one.    reply           pantalaimon  1 day ago    | root | parent | prev | next  [–]      > 3. There are some systems out there that don't support ed25519, though they are becoming rarer. If you have to deal with those systems then you're forced to use RSA (at least for that system). Azure Devops is a big one.    reply          pantalaimon  1 day ago    | root | parent | prev | next  [–]      > 3. There are some systems out there that don't support ed25519, though they are becoming rarer. If you have to deal with those systems then you're forced to use RSA (at least for that system). Azure Devops is a big one.    reply          pantalaimon  1 day ago    | root | parent | prev | next  [–]      > 3. There are some systems out there that don't support ed25519, though they are becoming rarer. If you have to deal with those systems then you're forced to use RSA (at least for that system). Azure Devops is a big one.    reply          pantalaimon  1 day ago    | root | parent | prev | next  [–]      > 3. There are some systems out there that don't support ed25519, though they are becoming rarer. If you have to deal with those systems then you're forced to use RSA (at least for that system). Azure Devops is a big one.    reply    pantalaimon  1 day ago    | root | parent | prev | next  [–]     pantalaimon  1 day ago    | root | parent | prev | next  [–]    pantalaimon 1 day ago 1 day ago | root | parent | prev | next  [–]   root parent prev next [–]  > 3. There are some systems out there that don't support ed25519, though they are becoming rarer. If you have to deal with those systems then you're forced to use RSA (at least for that system). Azure Devops is a big one.    reply   > 3. There are some systems out there that don't support ed25519, though they are becoming rarer. If you have to deal with those systems then you're forced to use RSA (at least for that system). Azure Devops is a big one. Azure Devops is a big one.   reply    reply    reply  reply reply        Spooky23  1 day ago    | root | parent | prev | next  [–]      If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519.    reply           Spooky23  1 day ago    | root | parent | prev | next  [–]      If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519.    reply           Spooky23  1 day ago    | root | parent | prev | next  [–]      If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519.    reply          Spooky23  1 day ago    | root | parent | prev | next  [–]      If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519.    reply          Spooky23  1 day ago    | root | parent | prev | next  [–]      If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519.    reply          Spooky23  1 day ago    | root | parent | prev | next  [–]      If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519.    reply    Spooky23  1 day ago    | root | parent | prev | next  [–]     Spooky23  1 day ago    | root | parent | prev | next  [–]    Spooky23 1 day ago 1 day ago | root | parent | prev | next  [–]   root parent prev next [–]  If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519.    reply   If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519.   reply    reply    reply  reply reply        vitus  1 day ago    | root | parent | next  [–]      > If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519. Not even when FIPS 140-3 was (finally) finalized in 2019, and testing began in 2020? https://csrc.nist.gov/projects/cryptographic-module-validati... includes mentions of EdDSA, and Curve25519 is listed among the \"Recommended Curves for U.S. Federal Government Use\" on page 15 of https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.S... . (I guess the problem is that various crypto implementations need to get recertified under the new standard...) edit: it looks like AWS-LC [0] and boringcrypto [1] have both been validated under FIPS 140-3. Azure's OpenSSL crypto [2] has only been validated under FIPS 140-2 as far as I can tell. [0] https://csrc.nist.gov/projects/cryptographic-module-validati... [1] https://csrc.nist.gov/projects/cryptographic-module-validati... [2] https://csrc.nist.gov/projects/cryptographic-module-validati...    reply           vitus  1 day ago    | root | parent | next  [–]      > If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519. Not even when FIPS 140-3 was (finally) finalized in 2019, and testing began in 2020? https://csrc.nist.gov/projects/cryptographic-module-validati... includes mentions of EdDSA, and Curve25519 is listed among the \"Recommended Curves for U.S. Federal Government Use\" on page 15 of https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.S... . (I guess the problem is that various crypto implementations need to get recertified under the new standard...) edit: it looks like AWS-LC [0] and boringcrypto [1] have both been validated under FIPS 140-3. Azure's OpenSSL crypto [2] has only been validated under FIPS 140-2 as far as I can tell. [0] https://csrc.nist.gov/projects/cryptographic-module-validati... [1] https://csrc.nist.gov/projects/cryptographic-module-validati... [2] https://csrc.nist.gov/projects/cryptographic-module-validati...    reply           vitus  1 day ago    | root | parent | next  [–]      > If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519. Not even when FIPS 140-3 was (finally) finalized in 2019, and testing began in 2020? https://csrc.nist.gov/projects/cryptographic-module-validati... includes mentions of EdDSA, and Curve25519 is listed among the \"Recommended Curves for U.S. Federal Government Use\" on page 15 of https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.S... . (I guess the problem is that various crypto implementations need to get recertified under the new standard...) edit: it looks like AWS-LC [0] and boringcrypto [1] have both been validated under FIPS 140-3. Azure's OpenSSL crypto [2] has only been validated under FIPS 140-2 as far as I can tell. [0] https://csrc.nist.gov/projects/cryptographic-module-validati... [1] https://csrc.nist.gov/projects/cryptographic-module-validati... [2] https://csrc.nist.gov/projects/cryptographic-module-validati...    reply          vitus  1 day ago    | root | parent | next  [–]      > If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519. Not even when FIPS 140-3 was (finally) finalized in 2019, and testing began in 2020? https://csrc.nist.gov/projects/cryptographic-module-validati... includes mentions of EdDSA, and Curve25519 is listed among the \"Recommended Curves for U.S. Federal Government Use\" on page 15 of https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.S... . (I guess the problem is that various crypto implementations need to get recertified under the new standard...) edit: it looks like AWS-LC [0] and boringcrypto [1] have both been validated under FIPS 140-3. Azure's OpenSSL crypto [2] has only been validated under FIPS 140-2 as far as I can tell. [0] https://csrc.nist.gov/projects/cryptographic-module-validati... [1] https://csrc.nist.gov/projects/cryptographic-module-validati... [2] https://csrc.nist.gov/projects/cryptographic-module-validati...    reply          vitus  1 day ago    | root | parent | next  [–]      > If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519. Not even when FIPS 140-3 was (finally) finalized in 2019, and testing began in 2020? https://csrc.nist.gov/projects/cryptographic-module-validati... includes mentions of EdDSA, and Curve25519 is listed among the \"Recommended Curves for U.S. Federal Government Use\" on page 15 of https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.S... . (I guess the problem is that various crypto implementations need to get recertified under the new standard...) edit: it looks like AWS-LC [0] and boringcrypto [1] have both been validated under FIPS 140-3. Azure's OpenSSL crypto [2] has only been validated under FIPS 140-2 as far as I can tell. [0] https://csrc.nist.gov/projects/cryptographic-module-validati... [1] https://csrc.nist.gov/projects/cryptographic-module-validati... [2] https://csrc.nist.gov/projects/cryptographic-module-validati...    reply          vitus  1 day ago    | root | parent | next  [–]      > If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519. Not even when FIPS 140-3 was (finally) finalized in 2019, and testing began in 2020? https://csrc.nist.gov/projects/cryptographic-module-validati... includes mentions of EdDSA, and Curve25519 is listed among the \"Recommended Curves for U.S. Federal Government Use\" on page 15 of https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.S... . (I guess the problem is that various crypto implementations need to get recertified under the new standard...) edit: it looks like AWS-LC [0] and boringcrypto [1] have both been validated under FIPS 140-3. Azure's OpenSSL crypto [2] has only been validated under FIPS 140-2 as far as I can tell. [0] https://csrc.nist.gov/projects/cryptographic-module-validati... [1] https://csrc.nist.gov/projects/cryptographic-module-validati... [2] https://csrc.nist.gov/projects/cryptographic-module-validati...    reply    vitus  1 day ago    | root | parent | next  [–]     vitus  1 day ago    | root | parent | next  [–]    vitus 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  > If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519. Not even when FIPS 140-3 was (finally) finalized in 2019, and testing began in 2020? https://csrc.nist.gov/projects/cryptographic-module-validati... includes mentions of EdDSA, and Curve25519 is listed among the \"Recommended Curves for U.S. Federal Government Use\" on page 15 of https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.S... . (I guess the problem is that various crypto implementations need to get recertified under the new standard...) edit: it looks like AWS-LC [0] and boringcrypto [1] have both been validated under FIPS 140-3. Azure's OpenSSL crypto [2] has only been validated under FIPS 140-2 as far as I can tell. [0] https://csrc.nist.gov/projects/cryptographic-module-validati... [1] https://csrc.nist.gov/projects/cryptographic-module-validati... [2] https://csrc.nist.gov/projects/cryptographic-module-validati...    reply   > If you interact with government or some large entities that do business with government, they have to comply with FIPS 140-2, and cannot use ed25519. Not even when FIPS 140-3 was (finally) finalized in 2019, and testing began in 2020? https://csrc.nist.gov/projects/cryptographic-module-validati... includes mentions of EdDSA, and Curve25519 is listed among the \"Recommended Curves for U.S. Federal Government Use\" on page 15 of https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.S... . (I guess the problem is that various crypto implementations need to get recertified under the new standard...) edit: it looks like AWS-LC [0] and boringcrypto [1] have both been validated under FIPS 140-3. Azure's OpenSSL crypto [2] has only been validated under FIPS 140-2 as far as I can tell. [0] https://csrc.nist.gov/projects/cryptographic-module-validati... [1] https://csrc.nist.gov/projects/cryptographic-module-validati... [2] https://csrc.nist.gov/projects/cryptographic-module-validati... Not even when FIPS 140-3 was (finally) finalized in 2019, and testing began in 2020? https://csrc.nist.gov/projects/cryptographic-module-validati... includes mentions of EdDSA, and Curve25519 is listed among the \"Recommended Curves for U.S. Federal Government Use\" on page 15 of https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.S... . https://csrc.nist.gov/projects/cryptographic-module-validati... https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.S... (I guess the problem is that various crypto implementations need to get recertified under the new standard...) edit: it looks like AWS-LC [0] and boringcrypto [1] have both been validated under FIPS 140-3. Azure's OpenSSL crypto [2] has only been validated under FIPS 140-2 as far as I can tell. [0] https://csrc.nist.gov/projects/cryptographic-module-validati... https://csrc.nist.gov/projects/cryptographic-module-validati... [1] https://csrc.nist.gov/projects/cryptographic-module-validati... https://csrc.nist.gov/projects/cryptographic-module-validati... [2] https://csrc.nist.gov/projects/cryptographic-module-validati... https://csrc.nist.gov/projects/cryptographic-module-validati...   reply    reply    reply  reply reply        devman0  1 day ago    | root | parent | prev | next  [–]      ed25519 is in FIPS 186-5 which meets criteria (a) for Approved Security Functions in FIPS 140-2.    reply           devman0  1 day ago    | root | parent | prev | next  [–]      ed25519 is in FIPS 186-5 which meets criteria (a) for Approved Security Functions in FIPS 140-2.    reply           devman0  1 day ago    | root | parent | prev | next  [–]      ed25519 is in FIPS 186-5 which meets criteria (a) for Approved Security Functions in FIPS 140-2.    reply          devman0  1 day ago    | root | parent | prev | next  [–]      ed25519 is in FIPS 186-5 which meets criteria (a) for Approved Security Functions in FIPS 140-2.    reply          devman0  1 day ago    | root | parent | prev | next  [–]      ed25519 is in FIPS 186-5 which meets criteria (a) for Approved Security Functions in FIPS 140-2.    reply          devman0  1 day ago    | root | parent | prev | next  [–]      ed25519 is in FIPS 186-5 which meets criteria (a) for Approved Security Functions in FIPS 140-2.    reply    devman0  1 day ago    | root | parent | prev | next  [–]     devman0  1 day ago    | root | parent | prev | next  [–]    devman0 1 day ago 1 day ago | root | parent | prev | next  [–]   root parent prev next [–]  ed25519 is in FIPS 186-5 which meets criteria (a) for Approved Security Functions in FIPS 140-2.    reply   ed25519 is in FIPS 186-5 which meets criteria (a) for Approved Security Functions in FIPS 140-2.   reply    reply    reply  reply reply        loudmax  1 day ago    | root | parent | prev | next  [–]      When I run `ssh-keygen`, I can remember the options `-t rsa` or `-t dsa`.  I simply cannot remember the flag `-t ed25519`.  I have to look it up every time. I just remember the flag as being vaguely similar the name of the monster robot from RoboCop.    reply           loudmax  1 day ago    | root | parent | prev | next  [–]      When I run `ssh-keygen`, I can remember the options `-t rsa` or `-t dsa`.  I simply cannot remember the flag `-t ed25519`.  I have to look it up every time. I just remember the flag as being vaguely similar the name of the monster robot from RoboCop.    reply           loudmax  1 day ago    | root | parent | prev | next  [–]      When I run `ssh-keygen`, I can remember the options `-t rsa` or `-t dsa`.  I simply cannot remember the flag `-t ed25519`.  I have to look it up every time. I just remember the flag as being vaguely similar the name of the monster robot from RoboCop.    reply          loudmax  1 day ago    | root | parent | prev | next  [–]      When I run `ssh-keygen`, I can remember the options `-t rsa` or `-t dsa`.  I simply cannot remember the flag `-t ed25519`.  I have to look it up every time. I just remember the flag as being vaguely similar the name of the monster robot from RoboCop.    reply          loudmax  1 day ago    | root | parent | prev | next  [–]      When I run `ssh-keygen`, I can remember the options `-t rsa` or `-t dsa`.  I simply cannot remember the flag `-t ed25519`.  I have to look it up every time. I just remember the flag as being vaguely similar the name of the monster robot from RoboCop.    reply          loudmax  1 day ago    | root | parent | prev | next  [–]      When I run `ssh-keygen`, I can remember the options `-t rsa` or `-t dsa`.  I simply cannot remember the flag `-t ed25519`.  I have to look it up every time. I just remember the flag as being vaguely similar the name of the monster robot from RoboCop.    reply    loudmax  1 day ago    | root | parent | prev | next  [–]     loudmax  1 day ago    | root | parent | prev | next  [–]    loudmax 1 day ago 1 day ago | root | parent | prev | next  [–]   root parent prev next [–]  When I run `ssh-keygen`, I can remember the options `-t rsa` or `-t dsa`.  I simply cannot remember the flag `-t ed25519`.  I have to look it up every time. I just remember the flag as being vaguely similar the name of the monster robot from RoboCop.    reply   When I run `ssh-keygen`, I can remember the options `-t rsa` or `-t dsa`.  I simply cannot remember the flag `-t ed25519`.  I have to look it up every time. I just remember the flag as being vaguely similar the name of the monster robot from RoboCop. I just remember the flag as being vaguely similar the name of the monster robot from RoboCop.   reply    reply    reply  reply reply        homebrewer  1 day ago    | root | parent | next  [–]      Use shell autocomplete. Even `bash-completion` suggests arguments for the key type these days:  $ ssh-keygen -t <TAB>\n  dsa   ecdsa   ecdsa-sk   ed25519   ed25519-sk  rsa `-sk` is short for \"security key\" if memory serves me right, and is used with FIDO2 hardware tokens.    reply           homebrewer  1 day ago    | root | parent | next  [–]      Use shell autocomplete. Even `bash-completion` suggests arguments for the key type these days:  $ ssh-keygen -t <TAB>\n  dsa   ecdsa   ecdsa-sk   ed25519   ed25519-sk  rsa `-sk` is short for \"security key\" if memory serves me right, and is used with FIDO2 hardware tokens.    reply           homebrewer  1 day ago    | root | parent | next  [–]      Use shell autocomplete. Even `bash-completion` suggests arguments for the key type these days:  $ ssh-keygen -t <TAB>\n  dsa   ecdsa   ecdsa-sk   ed25519   ed25519-sk  rsa `-sk` is short for \"security key\" if memory serves me right, and is used with FIDO2 hardware tokens.    reply          homebrewer  1 day ago    | root | parent | next  [–]      Use shell autocomplete. Even `bash-completion` suggests arguments for the key type these days:  $ ssh-keygen -t <TAB>\n  dsa   ecdsa   ecdsa-sk   ed25519   ed25519-sk  rsa `-sk` is short for \"security key\" if memory serves me right, and is used with FIDO2 hardware tokens.    reply          homebrewer  1 day ago    | root | parent | next  [–]      Use shell autocomplete. Even `bash-completion` suggests arguments for the key type these days:  $ ssh-keygen -t <TAB>\n  dsa   ecdsa   ecdsa-sk   ed25519   ed25519-sk  rsa `-sk` is short for \"security key\" if memory serves me right, and is used with FIDO2 hardware tokens.    reply          homebrewer  1 day ago    | root | parent | next  [–]      Use shell autocomplete. Even `bash-completion` suggests arguments for the key type these days:  $ ssh-keygen -t <TAB>\n  dsa   ecdsa   ecdsa-sk   ed25519   ed25519-sk  rsa `-sk` is short for \"security key\" if memory serves me right, and is used with FIDO2 hardware tokens.    reply    homebrewer  1 day ago    | root | parent | next  [–]     homebrewer  1 day ago    | root | parent | next  [–]    homebrewer 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  Use shell autocomplete. Even `bash-completion` suggests arguments for the key type these days:  $ ssh-keygen -t <TAB>\n  dsa   ecdsa   ecdsa-sk   ed25519   ed25519-sk  rsa `-sk` is short for \"security key\" if memory serves me right, and is used with FIDO2 hardware tokens.    reply   Use shell autocomplete. Even `bash-completion` suggests arguments for the key type these days:  $ ssh-keygen -t <TAB>\n  dsa   ecdsa   ecdsa-sk   ed25519   ed25519-sk  rsa `-sk` is short for \"security key\" if memory serves me right, and is used with FIDO2 hardware tokens. $ ssh-keygen -t <TAB>\n  dsa   ecdsa   ecdsa-sk   ed25519   ed25519-sk  rsa $ ssh-keygen -t <TAB>\n  dsa   ecdsa   ecdsa-sk   ed25519   ed25519-sk  rsa   reply    reply    reply  reply reply        throw0101b  1 day ago    | root | parent | prev | next  [–]      > When I run `ssh-keygen` As of OpenSSH 9.5 the default has changed, so you don't have to specify anything:  * ssh-keygen(1): generate Ed25519 keys by default. Ed25519 public keys\n     are very convenient due to their small size. Ed25519 keys are\n     specified in RFC 8709 and OpenSSH has supported them since version 6.5\n     (January 2014). * https://www.openssh.com/txt/release-9.5    reply           throw0101b  1 day ago    | root | parent | prev | next  [–]      > When I run `ssh-keygen` As of OpenSSH 9.5 the default has changed, so you don't have to specify anything:  * ssh-keygen(1): generate Ed25519 keys by default. Ed25519 public keys\n     are very convenient due to their small size. Ed25519 keys are\n     specified in RFC 8709 and OpenSSH has supported them since version 6.5\n     (January 2014). * https://www.openssh.com/txt/release-9.5    reply           throw0101b  1 day ago    | root | parent | prev | next  [–]      > When I run `ssh-keygen` As of OpenSSH 9.5 the default has changed, so you don't have to specify anything:  * ssh-keygen(1): generate Ed25519 keys by default. Ed25519 public keys\n     are very convenient due to their small size. Ed25519 keys are\n     specified in RFC 8709 and OpenSSH has supported them since version 6.5\n     (January 2014). * https://www.openssh.com/txt/release-9.5    reply          throw0101b  1 day ago    | root | parent | prev | next  [–]      > When I run `ssh-keygen` As of OpenSSH 9.5 the default has changed, so you don't have to specify anything:  * ssh-keygen(1): generate Ed25519 keys by default. Ed25519 public keys\n     are very convenient due to their small size. Ed25519 keys are\n     specified in RFC 8709 and OpenSSH has supported them since version 6.5\n     (January 2014). * https://www.openssh.com/txt/release-9.5    reply          throw0101b  1 day ago    | root | parent | prev | next  [–]      > When I run `ssh-keygen` As of OpenSSH 9.5 the default has changed, so you don't have to specify anything:  * ssh-keygen(1): generate Ed25519 keys by default. Ed25519 public keys\n     are very convenient due to their small size. Ed25519 keys are\n     specified in RFC 8709 and OpenSSH has supported them since version 6.5\n     (January 2014). * https://www.openssh.com/txt/release-9.5    reply          throw0101b  1 day ago    | root | parent | prev | next  [–]      > When I run `ssh-keygen` As of OpenSSH 9.5 the default has changed, so you don't have to specify anything:  * ssh-keygen(1): generate Ed25519 keys by default. Ed25519 public keys\n     are very convenient due to their small size. Ed25519 keys are\n     specified in RFC 8709 and OpenSSH has supported them since version 6.5\n     (January 2014). * https://www.openssh.com/txt/release-9.5    reply    throw0101b  1 day ago    | root | parent | prev | next  [–]     throw0101b  1 day ago    | root | parent | prev | next  [–]    throw0101b 1 day ago 1 day ago | root | parent | prev | next  [–]   root parent prev next [–]  > When I run `ssh-keygen` As of OpenSSH 9.5 the default has changed, so you don't have to specify anything:  * ssh-keygen(1): generate Ed25519 keys by default. Ed25519 public keys\n     are very convenient due to their small size. Ed25519 keys are\n     specified in RFC 8709 and OpenSSH has supported them since version 6.5\n     (January 2014). * https://www.openssh.com/txt/release-9.5    reply   > When I run `ssh-keygen` As of OpenSSH 9.5 the default has changed, so you don't have to specify anything:  * ssh-keygen(1): generate Ed25519 keys by default. Ed25519 public keys\n     are very convenient due to their small size. Ed25519 keys are\n     specified in RFC 8709 and OpenSSH has supported them since version 6.5\n     (January 2014). * https://www.openssh.com/txt/release-9.5 When I run `ssh-keygen` As of OpenSSH 9.5 the default has changed, so you don't have to specify anything: * ssh-keygen(1): generate Ed25519 keys by default. Ed25519 public keys\n     are very convenient due to their small size. Ed25519 keys are\n     specified in RFC 8709 and OpenSSH has supported them since version 6.5\n     (January 2014). * ssh-keygen(1): generate Ed25519 keys by default. Ed25519 public keys\n     are very convenient due to their small size. Ed25519 keys are\n     specified in RFC 8709 and OpenSSH has supported them since version 6.5\n     (January 2014). https://www.openssh.com/txt/release-9.5   reply    reply    reply  reply reply        saghm  1 day ago    | root | parent | next  [–]      Oh wow, I didn't know that one! I still manually type `-t ed25519` from muscle memory, I guess I don't have to now    reply           saghm  1 day ago    | root | parent | next  [–]      Oh wow, I didn't know that one! I still manually type `-t ed25519` from muscle memory, I guess I don't have to now    reply           saghm  1 day ago    | root | parent | next  [–]      Oh wow, I didn't know that one! I still manually type `-t ed25519` from muscle memory, I guess I don't have to now    reply          saghm  1 day ago    | root | parent | next  [–]      Oh wow, I didn't know that one! I still manually type `-t ed25519` from muscle memory, I guess I don't have to now    reply          saghm  1 day ago    | root | parent | next  [–]      Oh wow, I didn't know that one! I still manually type `-t ed25519` from muscle memory, I guess I don't have to now    reply          saghm  1 day ago    | root | parent | next  [–]      Oh wow, I didn't know that one! I still manually type `-t ed25519` from muscle memory, I guess I don't have to now    reply    saghm  1 day ago    | root | parent | next  [–]     saghm  1 day ago    | root | parent | next  [–]    saghm 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  Oh wow, I didn't know that one! I still manually type `-t ed25519` from muscle memory, I guess I don't have to now    reply   Oh wow, I didn't know that one! I still manually type `-t ed25519` from muscle memory, I guess I don't have to now   reply    reply    reply  reply reply        toast0  1 day ago    | parent | prev | next  [–]      > My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though.    reply           toast0  1 day ago    | parent | prev | next  [–]      > My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though.    reply           toast0  1 day ago    | parent | prev | next  [–]      > My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though.    reply          toast0  1 day ago    | parent | prev | next  [–]      > My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though.    reply          toast0  1 day ago    | parent | prev | next  [–]      > My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though.    reply          toast0  1 day ago    | parent | prev | next  [–]      > My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though.    reply    toast0  1 day ago    | parent | prev | next  [–]     toast0  1 day ago    | parent | prev | next  [–]    toast0 1 day ago 1 day ago | parent | prev | next  [–]   parent prev next [–]  > My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though.    reply   > My (probably naive) understanding is that 25519 already provided better performance than other algorithms used for similar purposes (e.g. RSA) when tuned for a roughly similar level of security; anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519. My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though. My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though.   reply    reply    reply  reply reply        saghm  1 day ago    | root | parent | next  [–]      > My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though. Interesting! I wonder if this new algorithm is intended to help with that. I'm super curious if the smaller payload does indeed make a difference (with the current algorithm) like you mention; I know that with databases and filesystems, compression is commonly used to shift the balance from I/O to CPU due to disk writes being slow (with reduced storage size being a side benefit but not usually the main motivation), but I also know that cryptographic verification being too slow can be an anti-feature if it makes brute forcing feasible, so the amount of CPU work needed might be pretty high still.    reply           saghm  1 day ago    | root | parent | next  [–]      > My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though. Interesting! I wonder if this new algorithm is intended to help with that. I'm super curious if the smaller payload does indeed make a difference (with the current algorithm) like you mention; I know that with databases and filesystems, compression is commonly used to shift the balance from I/O to CPU due to disk writes being slow (with reduced storage size being a side benefit but not usually the main motivation), but I also know that cryptographic verification being too slow can be an anti-feature if it makes brute forcing feasible, so the amount of CPU work needed might be pretty high still.    reply           saghm  1 day ago    | root | parent | next  [–]      > My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though. Interesting! I wonder if this new algorithm is intended to help with that. I'm super curious if the smaller payload does indeed make a difference (with the current algorithm) like you mention; I know that with databases and filesystems, compression is commonly used to shift the balance from I/O to CPU due to disk writes being slow (with reduced storage size being a side benefit but not usually the main motivation), but I also know that cryptographic verification being too slow can be an anti-feature if it makes brute forcing feasible, so the amount of CPU work needed might be pretty high still.    reply          saghm  1 day ago    | root | parent | next  [–]      > My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though. Interesting! I wonder if this new algorithm is intended to help with that. I'm super curious if the smaller payload does indeed make a difference (with the current algorithm) like you mention; I know that with databases and filesystems, compression is commonly used to shift the balance from I/O to CPU due to disk writes being slow (with reduced storage size being a side benefit but not usually the main motivation), but I also know that cryptographic verification being too slow can be an anti-feature if it makes brute forcing feasible, so the amount of CPU work needed might be pretty high still.    reply          saghm  1 day ago    | root | parent | next  [–]      > My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though. Interesting! I wonder if this new algorithm is intended to help with that. I'm super curious if the smaller payload does indeed make a difference (with the current algorithm) like you mention; I know that with databases and filesystems, compression is commonly used to shift the balance from I/O to CPU due to disk writes being slow (with reduced storage size being a side benefit but not usually the main motivation), but I also know that cryptographic verification being too slow can be an anti-feature if it makes brute forcing feasible, so the amount of CPU work needed might be pretty high still.    reply          saghm  1 day ago    | root | parent | next  [–]      > My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though. Interesting! I wonder if this new algorithm is intended to help with that. I'm super curious if the smaller payload does indeed make a difference (with the current algorithm) like you mention; I know that with databases and filesystems, compression is commonly used to shift the balance from I/O to CPU due to disk writes being slow (with reduced storage size being a side benefit but not usually the main motivation), but I also know that cryptographic verification being too slow can be an anti-feature if it makes brute forcing feasible, so the amount of CPU work needed might be pretty high still.    reply    saghm  1 day ago    | root | parent | next  [–]     saghm  1 day ago    | root | parent | next  [–]    saghm 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  > My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though. Interesting! I wonder if this new algorithm is intended to help with that. I'm super curious if the smaller payload does indeed make a difference (with the current algorithm) like you mention; I know that with databases and filesystems, compression is commonly used to shift the balance from I/O to CPU due to disk writes being slow (with reduced storage size being a side benefit but not usually the main motivation), but I also know that cryptographic verification being too slow can be an anti-feature if it makes brute forcing feasible, so the amount of CPU work needed might be pretty high still.    reply   > My also naive (an possibly out of date) understanding is key generation is much faster in with ecc, and that signing is faster too, but verifying is faster for rsa. So switching from a RSA to an ECC server certificate saves bytes on the wire, because keys are smaller, and saves server cpu because signing is faster, but may increase client cpu because verification is slower. The byte savings may make up for the increase in cpu though. Interesting! I wonder if this new algorithm is intended to help with that. I'm super curious if the smaller payload does indeed make a difference (with the current algorithm) like you mention; I know that with databases and filesystems, compression is commonly used to shift the balance from I/O to CPU due to disk writes being slow (with reduced storage size being a side benefit but not usually the main motivation), but I also know that cryptographic verification being too slow can be an anti-feature if it makes brute forcing feasible, so the amount of CPU work needed might be pretty high still. Interesting! I wonder if this new algorithm is intended to help with that. I'm super curious if the smaller payload does indeed make a difference (with the current algorithm) like you mention; I know that with databases and filesystems, compression is commonly used to shift the balance from I/O to CPU due to disk writes being slow (with reduced storage size being a side benefit but not usually the main motivation), but I also know that cryptographic verification being too slow can be an anti-feature if it makes brute forcing feasible, so the amount of CPU work needed might be pretty high still.   reply    reply    reply  reply reply        toast0  23 hours ago    | root | parent | next  [–]      On my ancient box, only including a few lines of output:  $ openssl speed rsa ecdsa\n\n                     sign    verify    sign/s verify/s\n   rsa 1024 bits 0.000117s 0.000008s   8518.7 132449.2\n   rsa 2048 bits 0.000884s 0.000025s   1130.6  39499.3\n\n                                 sign    verify    sign/s verify/s\n    256 bits ecdsa (nistp256)   0.0000s   0.0001s  33210.9  11483.0\n    384 bits ecdsa (nistp384)   0.0009s   0.0008s   1070.6   1268.9 It's 11 k verify/s for ecda vs 39k verify/s for rsa-2048. A TLS handshake needs at least one sign and verify from the server cert, plus some verifies for the signature on the cert chain (but those signatures are used over and over).    reply           toast0  23 hours ago    | root | parent | next  [–]      On my ancient box, only including a few lines of output:  $ openssl speed rsa ecdsa\n\n                     sign    verify    sign/s verify/s\n   rsa 1024 bits 0.000117s 0.000008s   8518.7 132449.2\n   rsa 2048 bits 0.000884s 0.000025s   1130.6  39499.3\n\n                                 sign    verify    sign/s verify/s\n    256 bits ecdsa (nistp256)   0.0000s   0.0001s  33210.9  11483.0\n    384 bits ecdsa (nistp384)   0.0009s   0.0008s   1070.6   1268.9 It's 11 k verify/s for ecda vs 39k verify/s for rsa-2048. A TLS handshake needs at least one sign and verify from the server cert, plus some verifies for the signature on the cert chain (but those signatures are used over and over).    reply           toast0  23 hours ago    | root | parent | next  [–]      On my ancient box, only including a few lines of output:  $ openssl speed rsa ecdsa\n\n                     sign    verify    sign/s verify/s\n   rsa 1024 bits 0.000117s 0.000008s   8518.7 132449.2\n   rsa 2048 bits 0.000884s 0.000025s   1130.6  39499.3\n\n                                 sign    verify    sign/s verify/s\n    256 bits ecdsa (nistp256)   0.0000s   0.0001s  33210.9  11483.0\n    384 bits ecdsa (nistp384)   0.0009s   0.0008s   1070.6   1268.9 It's 11 k verify/s for ecda vs 39k verify/s for rsa-2048. A TLS handshake needs at least one sign and verify from the server cert, plus some verifies for the signature on the cert chain (but those signatures are used over and over).    reply          toast0  23 hours ago    | root | parent | next  [–]      On my ancient box, only including a few lines of output:  $ openssl speed rsa ecdsa\n\n                     sign    verify    sign/s verify/s\n   rsa 1024 bits 0.000117s 0.000008s   8518.7 132449.2\n   rsa 2048 bits 0.000884s 0.000025s   1130.6  39499.3\n\n                                 sign    verify    sign/s verify/s\n    256 bits ecdsa (nistp256)   0.0000s   0.0001s  33210.9  11483.0\n    384 bits ecdsa (nistp384)   0.0009s   0.0008s   1070.6   1268.9 It's 11 k verify/s for ecda vs 39k verify/s for rsa-2048. A TLS handshake needs at least one sign and verify from the server cert, plus some verifies for the signature on the cert chain (but those signatures are used over and over).    reply          toast0  23 hours ago    | root | parent | next  [–]      On my ancient box, only including a few lines of output:  $ openssl speed rsa ecdsa\n\n                     sign    verify    sign/s verify/s\n   rsa 1024 bits 0.000117s 0.000008s   8518.7 132449.2\n   rsa 2048 bits 0.000884s 0.000025s   1130.6  39499.3\n\n                                 sign    verify    sign/s verify/s\n    256 bits ecdsa (nistp256)   0.0000s   0.0001s  33210.9  11483.0\n    384 bits ecdsa (nistp384)   0.0009s   0.0008s   1070.6   1268.9 It's 11 k verify/s for ecda vs 39k verify/s for rsa-2048. A TLS handshake needs at least one sign and verify from the server cert, plus some verifies for the signature on the cert chain (but those signatures are used over and over).    reply          toast0  23 hours ago    | root | parent | next  [–]      On my ancient box, only including a few lines of output:  $ openssl speed rsa ecdsa\n\n                     sign    verify    sign/s verify/s\n   rsa 1024 bits 0.000117s 0.000008s   8518.7 132449.2\n   rsa 2048 bits 0.000884s 0.000025s   1130.6  39499.3\n\n                                 sign    verify    sign/s verify/s\n    256 bits ecdsa (nistp256)   0.0000s   0.0001s  33210.9  11483.0\n    384 bits ecdsa (nistp384)   0.0009s   0.0008s   1070.6   1268.9 It's 11 k verify/s for ecda vs 39k verify/s for rsa-2048. A TLS handshake needs at least one sign and verify from the server cert, plus some verifies for the signature on the cert chain (but those signatures are used over and over).    reply    toast0  23 hours ago    | root | parent | next  [–]     toast0  23 hours ago    | root | parent | next  [–]    toast0 23 hours ago 23 hours ago | root | parent | next  [–]   root parent next [–]  On my ancient box, only including a few lines of output:  $ openssl speed rsa ecdsa\n\n                     sign    verify    sign/s verify/s\n   rsa 1024 bits 0.000117s 0.000008s   8518.7 132449.2\n   rsa 2048 bits 0.000884s 0.000025s   1130.6  39499.3\n\n                                 sign    verify    sign/s verify/s\n    256 bits ecdsa (nistp256)   0.0000s   0.0001s  33210.9  11483.0\n    384 bits ecdsa (nistp384)   0.0009s   0.0008s   1070.6   1268.9 It's 11 k verify/s for ecda vs 39k verify/s for rsa-2048. A TLS handshake needs at least one sign and verify from the server cert, plus some verifies for the signature on the cert chain (but those signatures are used over and over).    reply   On my ancient box, only including a few lines of output:  $ openssl speed rsa ecdsa\n\n                     sign    verify    sign/s verify/s\n   rsa 1024 bits 0.000117s 0.000008s   8518.7 132449.2\n   rsa 2048 bits 0.000884s 0.000025s   1130.6  39499.3\n\n                                 sign    verify    sign/s verify/s\n    256 bits ecdsa (nistp256)   0.0000s   0.0001s  33210.9  11483.0\n    384 bits ecdsa (nistp384)   0.0009s   0.0008s   1070.6   1268.9 It's 11 k verify/s for ecda vs 39k verify/s for rsa-2048. A TLS handshake needs at least one sign and verify from the server cert, plus some verifies for the signature on the cert chain (but those signatures are used over and over). $ openssl speed rsa ecdsa\n\n                     sign    verify    sign/s verify/s\n   rsa 1024 bits 0.000117s 0.000008s   8518.7 132449.2\n   rsa 2048 bits 0.000884s 0.000025s   1130.6  39499.3\n\n                                 sign    verify    sign/s verify/s\n    256 bits ecdsa (nistp256)   0.0000s   0.0001s  33210.9  11483.0\n    384 bits ecdsa (nistp384)   0.0009s   0.0008s   1070.6   1268.9 $ openssl speed rsa ecdsa\n\n                     sign    verify    sign/s verify/s\n   rsa 1024 bits 0.000117s 0.000008s   8518.7 132449.2\n   rsa 2048 bits 0.000884s 0.000025s   1130.6  39499.3\n\n                                 sign    verify    sign/s verify/s\n    256 bits ecdsa (nistp256)   0.0000s   0.0001s  33210.9  11483.0\n    384 bits ecdsa (nistp384)   0.0009s   0.0008s   1070.6   1268.9   reply    reply    reply  reply reply        stouset  1 day ago    | parent | prev | next  [–]      > anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519 That’s not really anecdotal. Generating an ed25519 key is barely more than generating a random 256-bit value. Generating an RSA key is significantly more work.    reply           stouset  1 day ago    | parent | prev | next  [–]      > anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519 That’s not really anecdotal. Generating an ed25519 key is barely more than generating a random 256-bit value. Generating an RSA key is significantly more work.    reply           stouset  1 day ago    | parent | prev | next  [–]      > anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519 That’s not really anecdotal. Generating an ed25519 key is barely more than generating a random 256-bit value. Generating an RSA key is significantly more work.    reply          stouset  1 day ago    | parent | prev | next  [–]      > anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519 That’s not really anecdotal. Generating an ed25519 key is barely more than generating a random 256-bit value. Generating an RSA key is significantly more work.    reply          stouset  1 day ago    | parent | prev | next  [–]      > anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519 That’s not really anecdotal. Generating an ed25519 key is barely more than generating a random 256-bit value. Generating an RSA key is significantly more work.    reply          stouset  1 day ago    | parent | prev | next  [–]      > anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519 That’s not really anecdotal. Generating an ed25519 key is barely more than generating a random 256-bit value. Generating an RSA key is significantly more work.    reply    stouset  1 day ago    | parent | prev | next  [–]     stouset  1 day ago    | parent | prev | next  [–]    stouset 1 day ago 1 day ago | parent | prev | next  [–]   parent prev next [–]  > anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519 That’s not really anecdotal. Generating an ed25519 key is barely more than generating a random 256-bit value. Generating an RSA key is significantly more work.    reply   > anecdotally, generating 2048-bit or larger RSA keys for me tends to be a lot slower than ed25519 That’s not really anecdotal. Generating an ed25519 key is barely more than generating a random 256-bit value. Generating an RSA key is significantly more work. That’s not really anecdotal. Generating an ed25519 key is barely more than generating a random 256-bit value. Generating an RSA key is significantly more work. significantly   reply    reply    reply  reply reply        saghm  1 day ago    | root | parent | next  [–]      I did say my understanding was probably naive; I didn't know the details to be able to assert anything beyond my own observation!    reply           saghm  1 day ago    | root | parent | next  [–]      I did say my understanding was probably naive; I didn't know the details to be able to assert anything beyond my own observation!    reply           saghm  1 day ago    | root | parent | next  [–]      I did say my understanding was probably naive; I didn't know the details to be able to assert anything beyond my own observation!    reply          saghm  1 day ago    | root | parent | next  [–]      I did say my understanding was probably naive; I didn't know the details to be able to assert anything beyond my own observation!    reply          saghm  1 day ago    | root | parent | next  [–]      I did say my understanding was probably naive; I didn't know the details to be able to assert anything beyond my own observation!    reply          saghm  1 day ago    | root | parent | next  [–]      I did say my understanding was probably naive; I didn't know the details to be able to assert anything beyond my own observation!    reply    saghm  1 day ago    | root | parent | next  [–]     saghm  1 day ago    | root | parent | next  [–]    saghm 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  I did say my understanding was probably naive; I didn't know the details to be able to assert anything beyond my own observation!    reply   I did say my understanding was probably naive; I didn't know the details to be able to assert anything beyond my own observation!   reply    reply    reply  reply reply        stouset  1 day ago    | root | parent | next  [–]      Yep, not faulting you at all! I too was surprised when I found out that it’s a straight 256-bit random value with a few bits masked.    reply           stouset  1 day ago    | root | parent | next  [–]      Yep, not faulting you at all! I too was surprised when I found out that it’s a straight 256-bit random value with a few bits masked.    reply           stouset  1 day ago    | root | parent | next  [–]      Yep, not faulting you at all! I too was surprised when I found out that it’s a straight 256-bit random value with a few bits masked.    reply          stouset  1 day ago    | root | parent | next  [–]      Yep, not faulting you at all! I too was surprised when I found out that it’s a straight 256-bit random value with a few bits masked.    reply          stouset  1 day ago    | root | parent | next  [–]      Yep, not faulting you at all! I too was surprised when I found out that it’s a straight 256-bit random value with a few bits masked.    reply          stouset  1 day ago    | root | parent | next  [–]      Yep, not faulting you at all! I too was surprised when I found out that it’s a straight 256-bit random value with a few bits masked.    reply    stouset  1 day ago    | root | parent | next  [–]     stouset  1 day ago    | root | parent | next  [–]    stouset 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  Yep, not faulting you at all! I too was surprised when I found out that it’s a straight 256-bit random value with a few bits masked.    reply   Yep, not faulting you at all! I too was surprised when I found out that it’s a straight 256-bit random value with a few bits masked.   reply    reply    reply  reply reply        saghm  1 day ago    | root | parent | next  [–]      I pretty quickly realized in college when learning about this stuff that the math was well over my head, and I shifted my focus more to understanding how to properly use cryptography rather than implement it (which turned out to be more important as a software engineer anyhow). In retrospect, I really appreciate how the professor I had in a security-focused course explicitly told us it was okay if we didn't understand the math and wouldn't be tested on it when going over how it worked.    reply           saghm  1 day ago    | root | parent | next  [–]      I pretty quickly realized in college when learning about this stuff that the math was well over my head, and I shifted my focus more to understanding how to properly use cryptography rather than implement it (which turned out to be more important as a software engineer anyhow). In retrospect, I really appreciate how the professor I had in a security-focused course explicitly told us it was okay if we didn't understand the math and wouldn't be tested on it when going over how it worked.    reply           saghm  1 day ago    | root | parent | next  [–]      I pretty quickly realized in college when learning about this stuff that the math was well over my head, and I shifted my focus more to understanding how to properly use cryptography rather than implement it (which turned out to be more important as a software engineer anyhow). In retrospect, I really appreciate how the professor I had in a security-focused course explicitly told us it was okay if we didn't understand the math and wouldn't be tested on it when going over how it worked.    reply          saghm  1 day ago    | root | parent | next  [–]      I pretty quickly realized in college when learning about this stuff that the math was well over my head, and I shifted my focus more to understanding how to properly use cryptography rather than implement it (which turned out to be more important as a software engineer anyhow). In retrospect, I really appreciate how the professor I had in a security-focused course explicitly told us it was okay if we didn't understand the math and wouldn't be tested on it when going over how it worked.    reply          saghm  1 day ago    | root | parent | next  [–]      I pretty quickly realized in college when learning about this stuff that the math was well over my head, and I shifted my focus more to understanding how to properly use cryptography rather than implement it (which turned out to be more important as a software engineer anyhow). In retrospect, I really appreciate how the professor I had in a security-focused course explicitly told us it was okay if we didn't understand the math and wouldn't be tested on it when going over how it worked.    reply          saghm  1 day ago    | root | parent | next  [–]      I pretty quickly realized in college when learning about this stuff that the math was well over my head, and I shifted my focus more to understanding how to properly use cryptography rather than implement it (which turned out to be more important as a software engineer anyhow). In retrospect, I really appreciate how the professor I had in a security-focused course explicitly told us it was okay if we didn't understand the math and wouldn't be tested on it when going over how it worked.    reply    saghm  1 day ago    | root | parent | next  [–]     saghm  1 day ago    | root | parent | next  [–]    saghm 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  I pretty quickly realized in college when learning about this stuff that the math was well over my head, and I shifted my focus more to understanding how to properly use cryptography rather than implement it (which turned out to be more important as a software engineer anyhow). In retrospect, I really appreciate how the professor I had in a security-focused course explicitly told us it was okay if we didn't understand the math and wouldn't be tested on it when going over how it worked.    reply   I pretty quickly realized in college when learning about this stuff that the math was well over my head, and I shifted my focus more to understanding how to properly use cryptography rather than implement it (which turned out to be more important as a software engineer anyhow). In retrospect, I really appreciate how the professor I had in a security-focused course explicitly told us it was okay if we didn't understand the math and wouldn't be tested on it when going over how it worked.   reply    reply    reply  reply reply        tptacek  1 day ago    | root | parent | next  [–]      Counterpoint: it's not OK to skip the math with cryptography. You may not need to power through all of Silverman's curve book (though: I don't know for sure that's true, which is why I don't call myself a cryptography engineer), but you have to get as deep into the math as you can in order to safely use cryptographic algorithms. If you're math-avoidant, stick with high-level abstractions like NaCL and TLS. There's nothing wrong with that! A professor talking about and demonstrating cryptography at the level of individual algorithms is doing their class a disservice if they say \"none of the math will be on the test\". The algorithms are enough to put something together that seems like it works; the math is what you need to find out if your resulting system actually does work. It's where many of the fun bug classes live.    reply           tptacek  1 day ago    | root | parent | next  [–]      Counterpoint: it's not OK to skip the math with cryptography. You may not need to power through all of Silverman's curve book (though: I don't know for sure that's true, which is why I don't call myself a cryptography engineer), but you have to get as deep into the math as you can in order to safely use cryptographic algorithms. If you're math-avoidant, stick with high-level abstractions like NaCL and TLS. There's nothing wrong with that! A professor talking about and demonstrating cryptography at the level of individual algorithms is doing their class a disservice if they say \"none of the math will be on the test\". The algorithms are enough to put something together that seems like it works; the math is what you need to find out if your resulting system actually does work. It's where many of the fun bug classes live.    reply           tptacek  1 day ago    | root | parent | next  [–]      Counterpoint: it's not OK to skip the math with cryptography. You may not need to power through all of Silverman's curve book (though: I don't know for sure that's true, which is why I don't call myself a cryptography engineer), but you have to get as deep into the math as you can in order to safely use cryptographic algorithms. If you're math-avoidant, stick with high-level abstractions like NaCL and TLS. There's nothing wrong with that! A professor talking about and demonstrating cryptography at the level of individual algorithms is doing their class a disservice if they say \"none of the math will be on the test\". The algorithms are enough to put something together that seems like it works; the math is what you need to find out if your resulting system actually does work. It's where many of the fun bug classes live.    reply          tptacek  1 day ago    | root | parent | next  [–]      Counterpoint: it's not OK to skip the math with cryptography. You may not need to power through all of Silverman's curve book (though: I don't know for sure that's true, which is why I don't call myself a cryptography engineer), but you have to get as deep into the math as you can in order to safely use cryptographic algorithms. If you're math-avoidant, stick with high-level abstractions like NaCL and TLS. There's nothing wrong with that! A professor talking about and demonstrating cryptography at the level of individual algorithms is doing their class a disservice if they say \"none of the math will be on the test\". The algorithms are enough to put something together that seems like it works; the math is what you need to find out if your resulting system actually does work. It's where many of the fun bug classes live.    reply          tptacek  1 day ago    | root | parent | next  [–]      Counterpoint: it's not OK to skip the math with cryptography. You may not need to power through all of Silverman's curve book (though: I don't know for sure that's true, which is why I don't call myself a cryptography engineer), but you have to get as deep into the math as you can in order to safely use cryptographic algorithms. If you're math-avoidant, stick with high-level abstractions like NaCL and TLS. There's nothing wrong with that! A professor talking about and demonstrating cryptography at the level of individual algorithms is doing their class a disservice if they say \"none of the math will be on the test\". The algorithms are enough to put something together that seems like it works; the math is what you need to find out if your resulting system actually does work. It's where many of the fun bug classes live.    reply          tptacek  1 day ago    | root | parent | next  [–]      Counterpoint: it's not OK to skip the math with cryptography. You may not need to power through all of Silverman's curve book (though: I don't know for sure that's true, which is why I don't call myself a cryptography engineer), but you have to get as deep into the math as you can in order to safely use cryptographic algorithms. If you're math-avoidant, stick with high-level abstractions like NaCL and TLS. There's nothing wrong with that! A professor talking about and demonstrating cryptography at the level of individual algorithms is doing their class a disservice if they say \"none of the math will be on the test\". The algorithms are enough to put something together that seems like it works; the math is what you need to find out if your resulting system actually does work. It's where many of the fun bug classes live.    reply    tptacek  1 day ago    | root | parent | next  [–]     tptacek  1 day ago    | root | parent | next  [–]    tptacek 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  Counterpoint: it's not OK to skip the math with cryptography. You may not need to power through all of Silverman's curve book (though: I don't know for sure that's true, which is why I don't call myself a cryptography engineer), but you have to get as deep into the math as you can in order to safely use cryptographic algorithms. If you're math-avoidant, stick with high-level abstractions like NaCL and TLS. There's nothing wrong with that! A professor talking about and demonstrating cryptography at the level of individual algorithms is doing their class a disservice if they say \"none of the math will be on the test\". The algorithms are enough to put something together that seems like it works; the math is what you need to find out if your resulting system actually does work. It's where many of the fun bug classes live.    reply   Counterpoint: it's not OK to skip the math with cryptography. You may not need to power through all of Silverman's curve book (though: I don't know for sure that's true, which is why I don't call myself a cryptography engineer), but you have to get as deep into the math as you can in order to safely use cryptographic algorithms. If you're math-avoidant, stick with high-level abstractions like NaCL and TLS. There's nothing wrong with that! A professor talking about and demonstrating cryptography at the level of individual algorithms is doing their class a disservice if they say \"none of the math will be on the test\". The algorithms are enough to put something together that seems like it works; the math is what you need to find out if your resulting system actually does work. It's where many of the fun bug classes live. If you're math-avoidant, stick with high-level abstractions like NaCL and TLS. There's nothing wrong with that! A professor talking about and demonstrating cryptography at the level of individual algorithms is doing their class a disservice if they say \"none of the math will be on the test\". The algorithms are enough to put something together that seems like it works; the math is what you need to find out if your resulting system actually does work. It's where many of the fun bug classes live.   reply    reply    reply  reply reply        saghm  1 day ago    | root | parent | next  [–]      I'm not sure if you're reading more into what I said than I intended, but I'm not convinced by this argument. You might have missed that this course was on security in general, not cryptography; not everything in the course was cryptographic related. That said, I'd argue that for the vast majority of software engineers the type of stuff they're dealing with can be dealt with without needing to know the math. For example, you don't need to understand the math to behind the algorithms to know that bcrypt is a reasonable password hashing algorithm and that sha1 and md5 are not, or that salts are used to mitigate issues when users reuse passwords. These are principles that you can understand at a high level without fully understanding the underlying details. If anything, I think that overemphasis on requiring people to learn and understand the math has the effect of over-focusing on simpler algorithms that aren't actually what people want to be using in practice due to the fact that they're easier to teach and often foundational in conveying concepts that would need to be learned to understand the more complicated algorithms. If using cryptographic algorithms directly requires knowing the math, then I'd agree that most people shouldn't be using them directly, but I'd go further and say that a lack of libraries that are safe for people to use for software engineering without understanding the implementation is a failing of the ecosystem; as much as \"regular\" software engineering people (like myself!) can struggle with the math behind cryptography, I think that a lot of people developing cryptographic libraries struggle with building reasonable abstractions and making user-friendly APIs (which is a skill I think in general is not emphasized enough for most software engineers, to the detriment of everyone).    reply           saghm  1 day ago    | root | parent | next  [–]      I'm not sure if you're reading more into what I said than I intended, but I'm not convinced by this argument. You might have missed that this course was on security in general, not cryptography; not everything in the course was cryptographic related. That said, I'd argue that for the vast majority of software engineers the type of stuff they're dealing with can be dealt with without needing to know the math. For example, you don't need to understand the math to behind the algorithms to know that bcrypt is a reasonable password hashing algorithm and that sha1 and md5 are not, or that salts are used to mitigate issues when users reuse passwords. These are principles that you can understand at a high level without fully understanding the underlying details. If anything, I think that overemphasis on requiring people to learn and understand the math has the effect of over-focusing on simpler algorithms that aren't actually what people want to be using in practice due to the fact that they're easier to teach and often foundational in conveying concepts that would need to be learned to understand the more complicated algorithms. If using cryptographic algorithms directly requires knowing the math, then I'd agree that most people shouldn't be using them directly, but I'd go further and say that a lack of libraries that are safe for people to use for software engineering without understanding the implementation is a failing of the ecosystem; as much as \"regular\" software engineering people (like myself!) can struggle with the math behind cryptography, I think that a lot of people developing cryptographic libraries struggle with building reasonable abstractions and making user-friendly APIs (which is a skill I think in general is not emphasized enough for most software engineers, to the detriment of everyone).    reply           saghm  1 day ago    | root | parent | next  [–]      I'm not sure if you're reading more into what I said than I intended, but I'm not convinced by this argument. You might have missed that this course was on security in general, not cryptography; not everything in the course was cryptographic related. That said, I'd argue that for the vast majority of software engineers the type of stuff they're dealing with can be dealt with without needing to know the math. For example, you don't need to understand the math to behind the algorithms to know that bcrypt is a reasonable password hashing algorithm and that sha1 and md5 are not, or that salts are used to mitigate issues when users reuse passwords. These are principles that you can understand at a high level without fully understanding the underlying details. If anything, I think that overemphasis on requiring people to learn and understand the math has the effect of over-focusing on simpler algorithms that aren't actually what people want to be using in practice due to the fact that they're easier to teach and often foundational in conveying concepts that would need to be learned to understand the more complicated algorithms. If using cryptographic algorithms directly requires knowing the math, then I'd agree that most people shouldn't be using them directly, but I'd go further and say that a lack of libraries that are safe for people to use for software engineering without understanding the implementation is a failing of the ecosystem; as much as \"regular\" software engineering people (like myself!) can struggle with the math behind cryptography, I think that a lot of people developing cryptographic libraries struggle with building reasonable abstractions and making user-friendly APIs (which is a skill I think in general is not emphasized enough for most software engineers, to the detriment of everyone).    reply          saghm  1 day ago    | root | parent | next  [–]      I'm not sure if you're reading more into what I said than I intended, but I'm not convinced by this argument. You might have missed that this course was on security in general, not cryptography; not everything in the course was cryptographic related. That said, I'd argue that for the vast majority of software engineers the type of stuff they're dealing with can be dealt with without needing to know the math. For example, you don't need to understand the math to behind the algorithms to know that bcrypt is a reasonable password hashing algorithm and that sha1 and md5 are not, or that salts are used to mitigate issues when users reuse passwords. These are principles that you can understand at a high level without fully understanding the underlying details. If anything, I think that overemphasis on requiring people to learn and understand the math has the effect of over-focusing on simpler algorithms that aren't actually what people want to be using in practice due to the fact that they're easier to teach and often foundational in conveying concepts that would need to be learned to understand the more complicated algorithms. If using cryptographic algorithms directly requires knowing the math, then I'd agree that most people shouldn't be using them directly, but I'd go further and say that a lack of libraries that are safe for people to use for software engineering without understanding the implementation is a failing of the ecosystem; as much as \"regular\" software engineering people (like myself!) can struggle with the math behind cryptography, I think that a lot of people developing cryptographic libraries struggle with building reasonable abstractions and making user-friendly APIs (which is a skill I think in general is not emphasized enough for most software engineers, to the detriment of everyone).    reply          saghm  1 day ago    | root | parent | next  [–]      I'm not sure if you're reading more into what I said than I intended, but I'm not convinced by this argument. You might have missed that this course was on security in general, not cryptography; not everything in the course was cryptographic related. That said, I'd argue that for the vast majority of software engineers the type of stuff they're dealing with can be dealt with without needing to know the math. For example, you don't need to understand the math to behind the algorithms to know that bcrypt is a reasonable password hashing algorithm and that sha1 and md5 are not, or that salts are used to mitigate issues when users reuse passwords. These are principles that you can understand at a high level without fully understanding the underlying details. If anything, I think that overemphasis on requiring people to learn and understand the math has the effect of over-focusing on simpler algorithms that aren't actually what people want to be using in practice due to the fact that they're easier to teach and often foundational in conveying concepts that would need to be learned to understand the more complicated algorithms. If using cryptographic algorithms directly requires knowing the math, then I'd agree that most people shouldn't be using them directly, but I'd go further and say that a lack of libraries that are safe for people to use for software engineering without understanding the implementation is a failing of the ecosystem; as much as \"regular\" software engineering people (like myself!) can struggle with the math behind cryptography, I think that a lot of people developing cryptographic libraries struggle with building reasonable abstractions and making user-friendly APIs (which is a skill I think in general is not emphasized enough for most software engineers, to the detriment of everyone).    reply          saghm  1 day ago    | root | parent | next  [–]      I'm not sure if you're reading more into what I said than I intended, but I'm not convinced by this argument. You might have missed that this course was on security in general, not cryptography; not everything in the course was cryptographic related. That said, I'd argue that for the vast majority of software engineers the type of stuff they're dealing with can be dealt with without needing to know the math. For example, you don't need to understand the math to behind the algorithms to know that bcrypt is a reasonable password hashing algorithm and that sha1 and md5 are not, or that salts are used to mitigate issues when users reuse passwords. These are principles that you can understand at a high level without fully understanding the underlying details. If anything, I think that overemphasis on requiring people to learn and understand the math has the effect of over-focusing on simpler algorithms that aren't actually what people want to be using in practice due to the fact that they're easier to teach and often foundational in conveying concepts that would need to be learned to understand the more complicated algorithms. If using cryptographic algorithms directly requires knowing the math, then I'd agree that most people shouldn't be using them directly, but I'd go further and say that a lack of libraries that are safe for people to use for software engineering without understanding the implementation is a failing of the ecosystem; as much as \"regular\" software engineering people (like myself!) can struggle with the math behind cryptography, I think that a lot of people developing cryptographic libraries struggle with building reasonable abstractions and making user-friendly APIs (which is a skill I think in general is not emphasized enough for most software engineers, to the detriment of everyone).    reply    saghm  1 day ago    | root | parent | next  [–]     saghm  1 day ago    | root | parent | next  [–]    saghm 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  I'm not sure if you're reading more into what I said than I intended, but I'm not convinced by this argument. You might have missed that this course was on security in general, not cryptography; not everything in the course was cryptographic related. That said, I'd argue that for the vast majority of software engineers the type of stuff they're dealing with can be dealt with without needing to know the math. For example, you don't need to understand the math to behind the algorithms to know that bcrypt is a reasonable password hashing algorithm and that sha1 and md5 are not, or that salts are used to mitigate issues when users reuse passwords. These are principles that you can understand at a high level without fully understanding the underlying details. If anything, I think that overemphasis on requiring people to learn and understand the math has the effect of over-focusing on simpler algorithms that aren't actually what people want to be using in practice due to the fact that they're easier to teach and often foundational in conveying concepts that would need to be learned to understand the more complicated algorithms. If using cryptographic algorithms directly requires knowing the math, then I'd agree that most people shouldn't be using them directly, but I'd go further and say that a lack of libraries that are safe for people to use for software engineering without understanding the implementation is a failing of the ecosystem; as much as \"regular\" software engineering people (like myself!) can struggle with the math behind cryptography, I think that a lot of people developing cryptographic libraries struggle with building reasonable abstractions and making user-friendly APIs (which is a skill I think in general is not emphasized enough for most software engineers, to the detriment of everyone).    reply   I'm not sure if you're reading more into what I said than I intended, but I'm not convinced by this argument. You might have missed that this course was on security in general, not cryptography; not everything in the course was cryptographic related. That said, I'd argue that for the vast majority of software engineers the type of stuff they're dealing with can be dealt with without needing to know the math. For example, you don't need to understand the math to behind the algorithms to know that bcrypt is a reasonable password hashing algorithm and that sha1 and md5 are not, or that salts are used to mitigate issues when users reuse passwords. These are principles that you can understand at a high level without fully understanding the underlying details. If anything, I think that overemphasis on requiring people to learn and understand the math has the effect of over-focusing on simpler algorithms that aren't actually what people want to be using in practice due to the fact that they're easier to teach and often foundational in conveying concepts that would need to be learned to understand the more complicated algorithms. If using cryptographic algorithms directly requires knowing the math, then I'd agree that most people shouldn't be using them directly, but I'd go further and say that a lack of libraries that are safe for people to use for software engineering without understanding the implementation is a failing of the ecosystem; as much as \"regular\" software engineering people (like myself!) can struggle with the math behind cryptography, I think that a lot of people developing cryptographic libraries struggle with building reasonable abstractions and making user-friendly APIs (which is a skill I think in general is not emphasized enough for most software engineers, to the detriment of everyone). That said, I'd argue that for the vast majority of software engineers the type of stuff they're dealing with can be dealt with without needing to know the math. For example, you don't need to understand the math to behind the algorithms to know that bcrypt is a reasonable password hashing algorithm and that sha1 and md5 are not, or that salts are used to mitigate issues when users reuse passwords. These are principles that you can understand at a high level without fully understanding the underlying details. If anything, I think that overemphasis on requiring people to learn and understand the math has the effect of over-focusing on simpler algorithms that aren't actually what people want to be using in practice due to the fact that they're easier to teach and often foundational in conveying concepts that would need to be learned to understand the more complicated algorithms. If using cryptographic algorithms directly requires knowing the math, then I'd agree that most people shouldn't be using them directly, but I'd go further and say that a lack of libraries that are safe for people to use for software engineering without understanding the implementation is a failing of the ecosystem; as much as \"regular\" software engineering people (like myself!) can struggle with the math behind cryptography, I think that a lot of people developing cryptographic libraries struggle with building reasonable abstractions and making user-friendly APIs (which is a skill I think in general is not emphasized enough for most software engineers, to the detriment of everyone).   reply    reply    reply  reply reply        tptacek  1 day ago    | root | parent | next  [–]      Sure. It's a failing of the ecosystem. That observation, a cup of coffee, and 1-3 years will get you a Kenny Paterson paper stunt-breaking your system. I feel where you're coming from, but, respectfully: it does not matter. My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry.    reply           tptacek  1 day ago    | root | parent | next  [–]      Sure. It's a failing of the ecosystem. That observation, a cup of coffee, and 1-3 years will get you a Kenny Paterson paper stunt-breaking your system. I feel where you're coming from, but, respectfully: it does not matter. My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry.    reply           tptacek  1 day ago    | root | parent | next  [–]      Sure. It's a failing of the ecosystem. That observation, a cup of coffee, and 1-3 years will get you a Kenny Paterson paper stunt-breaking your system. I feel where you're coming from, but, respectfully: it does not matter. My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry.    reply          tptacek  1 day ago    | root | parent | next  [–]      Sure. It's a failing of the ecosystem. That observation, a cup of coffee, and 1-3 years will get you a Kenny Paterson paper stunt-breaking your system. I feel where you're coming from, but, respectfully: it does not matter. My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry.    reply          tptacek  1 day ago    | root | parent | next  [–]      Sure. It's a failing of the ecosystem. That observation, a cup of coffee, and 1-3 years will get you a Kenny Paterson paper stunt-breaking your system. I feel where you're coming from, but, respectfully: it does not matter. My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry.    reply          tptacek  1 day ago    | root | parent | next  [–]      Sure. It's a failing of the ecosystem. That observation, a cup of coffee, and 1-3 years will get you a Kenny Paterson paper stunt-breaking your system. I feel where you're coming from, but, respectfully: it does not matter. My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry.    reply    tptacek  1 day ago    | root | parent | next  [–]     tptacek  1 day ago    | root | parent | next  [–]    tptacek 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  Sure. It's a failing of the ecosystem. That observation, a cup of coffee, and 1-3 years will get you a Kenny Paterson paper stunt-breaking your system. I feel where you're coming from, but, respectfully: it does not matter. My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry.    reply   Sure. It's a failing of the ecosystem. That observation, a cup of coffee, and 1-3 years will get you a Kenny Paterson paper stunt-breaking your system. I feel where you're coming from, but, respectfully: it does not matter. My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry. My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry. so much to do   reply    reply    reply  reply reply        saghm  1 day ago    | root | parent | next  [–]      > My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry. I'm not sure I understand what you mean here by \"something else in our industry\". Are you arguing that I'm not qualified to be a software engineer due to not understanding the math behind elliptic curves, or did you miss my repeated use of phrases like \"the vast majority of software engineers\" rather than some specialty where cryptography implementation details details are more important? If the latter, I can reassure you that I don't work in cryptography, work on any cryptographic libraries, or have any specific responsibilities related to security beyond the general idea that all software being written should be secure. If the former, I'll have to respectfully disagree, and suggest that maybe even if you aren't willing to consider that you're wrong about the math being a hard requirement for someone being qualified as a software engineer, it's worth considering that you almost certainly don't have enough information to conclude whether a stranger on the internet is qualified based on reading some of their comments.    reply           saghm  1 day ago    | root | parent | next  [–]      > My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry. I'm not sure I understand what you mean here by \"something else in our industry\". Are you arguing that I'm not qualified to be a software engineer due to not understanding the math behind elliptic curves, or did you miss my repeated use of phrases like \"the vast majority of software engineers\" rather than some specialty where cryptography implementation details details are more important? If the latter, I can reassure you that I don't work in cryptography, work on any cryptographic libraries, or have any specific responsibilities related to security beyond the general idea that all software being written should be secure. If the former, I'll have to respectfully disagree, and suggest that maybe even if you aren't willing to consider that you're wrong about the math being a hard requirement for someone being qualified as a software engineer, it's worth considering that you almost certainly don't have enough information to conclude whether a stranger on the internet is qualified based on reading some of their comments.    reply           saghm  1 day ago    | root | parent | next  [–]      > My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry. I'm not sure I understand what you mean here by \"something else in our industry\". Are you arguing that I'm not qualified to be a software engineer due to not understanding the math behind elliptic curves, or did you miss my repeated use of phrases like \"the vast majority of software engineers\" rather than some specialty where cryptography implementation details details are more important? If the latter, I can reassure you that I don't work in cryptography, work on any cryptographic libraries, or have any specific responsibilities related to security beyond the general idea that all software being written should be secure. If the former, I'll have to respectfully disagree, and suggest that maybe even if you aren't willing to consider that you're wrong about the math being a hard requirement for someone being qualified as a software engineer, it's worth considering that you almost certainly don't have enough information to conclude whether a stranger on the internet is qualified based on reading some of their comments.    reply          saghm  1 day ago    | root | parent | next  [–]      > My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry. I'm not sure I understand what you mean here by \"something else in our industry\". Are you arguing that I'm not qualified to be a software engineer due to not understanding the math behind elliptic curves, or did you miss my repeated use of phrases like \"the vast majority of software engineers\" rather than some specialty where cryptography implementation details details are more important? If the latter, I can reassure you that I don't work in cryptography, work on any cryptographic libraries, or have any specific responsibilities related to security beyond the general idea that all software being written should be secure. If the former, I'll have to respectfully disagree, and suggest that maybe even if you aren't willing to consider that you're wrong about the math being a hard requirement for someone being qualified as a software engineer, it's worth considering that you almost certainly don't have enough information to conclude whether a stranger on the internet is qualified based on reading some of their comments.    reply          saghm  1 day ago    | root | parent | next  [–]      > My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry. I'm not sure I understand what you mean here by \"something else in our industry\". Are you arguing that I'm not qualified to be a software engineer due to not understanding the math behind elliptic curves, or did you miss my repeated use of phrases like \"the vast majority of software engineers\" rather than some specialty where cryptography implementation details details are more important? If the latter, I can reassure you that I don't work in cryptography, work on any cryptographic libraries, or have any specific responsibilities related to security beyond the general idea that all software being written should be secure. If the former, I'll have to respectfully disagree, and suggest that maybe even if you aren't willing to consider that you're wrong about the math being a hard requirement for someone being qualified as a software engineer, it's worth considering that you almost certainly don't have enough information to conclude whether a stranger on the internet is qualified based on reading some of their comments.    reply          saghm  1 day ago    | root | parent | next  [–]      > My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry. I'm not sure I understand what you mean here by \"something else in our industry\". Are you arguing that I'm not qualified to be a software engineer due to not understanding the math behind elliptic curves, or did you miss my repeated use of phrases like \"the vast majority of software engineers\" rather than some specialty where cryptography implementation details details are more important? If the latter, I can reassure you that I don't work in cryptography, work on any cryptographic libraries, or have any specific responsibilities related to security beyond the general idea that all software being written should be secure. If the former, I'll have to respectfully disagree, and suggest that maybe even if you aren't willing to consider that you're wrong about the math being a hard requirement for someone being qualified as a software engineer, it's worth considering that you almost certainly don't have enough information to conclude whether a stranger on the internet is qualified based on reading some of their comments.    reply    saghm  1 day ago    | root | parent | next  [–]     saghm  1 day ago    | root | parent | next  [–]    saghm 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  > My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry. I'm not sure I understand what you mean here by \"something else in our industry\". Are you arguing that I'm not qualified to be a software engineer due to not understanding the math behind elliptic curves, or did you miss my repeated use of phrases like \"the vast majority of software engineers\" rather than some specialty where cryptography implementation details details are more important? If the latter, I can reassure you that I don't work in cryptography, work on any cryptographic libraries, or have any specific responsibilities related to security beyond the general idea that all software being written should be secure. If the former, I'll have to respectfully disagree, and suggest that maybe even if you aren't willing to consider that you're wrong about the math being a hard requirement for someone being qualified as a software engineer, it's worth considering that you almost certainly don't have enough information to conclude whether a stranger on the internet is qualified based on reading some of their comments.    reply   > My thing here is just: learn the math! Or do something else. I did! There is so much to do in our industry. I'm not sure I understand what you mean here by \"something else in our industry\". Are you arguing that I'm not qualified to be a software engineer due to not understanding the math behind elliptic curves, or did you miss my repeated use of phrases like \"the vast majority of software engineers\" rather than some specialty where cryptography implementation details details are more important? If the latter, I can reassure you that I don't work in cryptography, work on any cryptographic libraries, or have any specific responsibilities related to security beyond the general idea that all software being written should be secure. If the former, I'll have to respectfully disagree, and suggest that maybe even if you aren't willing to consider that you're wrong about the math being a hard requirement for someone being qualified as a software engineer, it's worth considering that you almost certainly don't have enough information to conclude whether a stranger on the internet is qualified based on reading some of their comments. I'm not sure I understand what you mean here by \"something else in our industry\". Are you arguing that I'm not qualified to be a software engineer due to not understanding the math behind elliptic curves, or did you miss my repeated use of phrases like \"the vast majority of software engineers\" rather than some specialty where cryptography implementation details details are more important? If the latter, I can reassure you that I don't work in cryptography, work on any cryptographic libraries, or have any specific responsibilities related to security beyond the general idea that all software being written should be secure. If the former, I'll have to respectfully disagree, and suggest that maybe even if you aren't willing to consider that you're wrong about the math being a hard requirement for someone being qualified as a software engineer, it's worth considering that you almost certainly don't have enough information to conclude whether a stranger on the internet is qualified based on reading some of their comments.   reply    reply    reply  reply reply        tptacek  3 hours ago    | root | parent | next  [–]      I'm certainly not saying you're not qualified to be a software engineer.    reply           tptacek  3 hours ago    | root | parent | next  [–]      I'm certainly not saying you're not qualified to be a software engineer.    reply           tptacek  3 hours ago    | root | parent | next  [–]      I'm certainly not saying you're not qualified to be a software engineer.    reply          tptacek  3 hours ago    | root | parent | next  [–]      I'm certainly not saying you're not qualified to be a software engineer.    reply          tptacek  3 hours ago    | root | parent | next  [–]      I'm certainly not saying you're not qualified to be a software engineer.    reply          tptacek  3 hours ago    | root | parent | next  [–]      I'm certainly not saying you're not qualified to be a software engineer.    reply    tptacek  3 hours ago    | root | parent | next  [–]     tptacek  3 hours ago    | root | parent | next  [–]    tptacek 3 hours ago 3 hours ago | root | parent | next  [–]   root parent next [–]  I'm certainly not saying you're not qualified to be a software engineer.    reply   I'm certainly not saying you're not qualified to be a software engineer.   reply    reply    reply  reply reply        syncsynchalt  1 day ago    | root | parent | prev | next  [–]      Learning X25519 isn't too hard!  See https://curves.xargs.org for the basics and https://x25519.xargs.org for some refining details.    reply           syncsynchalt  1 day ago    | root | parent | prev | next  [–]      Learning X25519 isn't too hard!  See https://curves.xargs.org for the basics and https://x25519.xargs.org for some refining details.    reply           syncsynchalt  1 day ago    | root | parent | prev | next  [–]      Learning X25519 isn't too hard!  See https://curves.xargs.org for the basics and https://x25519.xargs.org for some refining details.    reply          syncsynchalt  1 day ago    | root | parent | prev | next  [–]      Learning X25519 isn't too hard!  See https://curves.xargs.org for the basics and https://x25519.xargs.org for some refining details.    reply          syncsynchalt  1 day ago    | root | parent | prev | next  [–]      Learning X25519 isn't too hard!  See https://curves.xargs.org for the basics and https://x25519.xargs.org for some refining details.    reply          syncsynchalt  1 day ago    | root | parent | prev | next  [–]      Learning X25519 isn't too hard!  See https://curves.xargs.org for the basics and https://x25519.xargs.org for some refining details.    reply    syncsynchalt  1 day ago    | root | parent | prev | next  [–]     syncsynchalt  1 day ago    | root | parent | prev | next  [–]    syncsynchalt 1 day ago 1 day ago | root | parent | prev | next  [–]   root parent prev next [–]  Learning X25519 isn't too hard!  See https://curves.xargs.org for the basics and https://x25519.xargs.org for some refining details.    reply   Learning X25519 isn't too hard!  See https://curves.xargs.org for the basics and https://x25519.xargs.org for some refining details. https://curves.xargs.org https://x25519.xargs.org   reply    reply    reply  reply reply        upofadown  1 day ago    | parent | prev | next  [–]      Another article from the same blog about optimizing RSA: * https://www.amazon.science/blog/formal-verification-makes-rs... RSA signature verification is already very fast and TLS doesn't use RSA for encryption anymore so the problem reduces to optimizing signing operations.    reply           upofadown  1 day ago    | parent | prev | next  [–]      Another article from the same blog about optimizing RSA: * https://www.amazon.science/blog/formal-verification-makes-rs... RSA signature verification is already very fast and TLS doesn't use RSA for encryption anymore so the problem reduces to optimizing signing operations.    reply           upofadown  1 day ago    | parent | prev | next  [–]      Another article from the same blog about optimizing RSA: * https://www.amazon.science/blog/formal-verification-makes-rs... RSA signature verification is already very fast and TLS doesn't use RSA for encryption anymore so the problem reduces to optimizing signing operations.    reply          upofadown  1 day ago    | parent | prev | next  [–]      Another article from the same blog about optimizing RSA: * https://www.amazon.science/blog/formal-verification-makes-rs... RSA signature verification is already very fast and TLS doesn't use RSA for encryption anymore so the problem reduces to optimizing signing operations.    reply          upofadown  1 day ago    | parent | prev | next  [–]      Another article from the same blog about optimizing RSA: * https://www.amazon.science/blog/formal-verification-makes-rs... RSA signature verification is already very fast and TLS doesn't use RSA for encryption anymore so the problem reduces to optimizing signing operations.    reply          upofadown  1 day ago    | parent | prev | next  [–]      Another article from the same blog about optimizing RSA: * https://www.amazon.science/blog/formal-verification-makes-rs... RSA signature verification is already very fast and TLS doesn't use RSA for encryption anymore so the problem reduces to optimizing signing operations.    reply    upofadown  1 day ago    | parent | prev | next  [–]     upofadown  1 day ago    | parent | prev | next  [–]    upofadown 1 day ago 1 day ago | parent | prev | next  [–]   parent prev next [–]  Another article from the same blog about optimizing RSA: * https://www.amazon.science/blog/formal-verification-makes-rs... RSA signature verification is already very fast and TLS doesn't use RSA for encryption anymore so the problem reduces to optimizing signing operations.    reply   Another article from the same blog about optimizing RSA: * https://www.amazon.science/blog/formal-verification-makes-rs... RSA signature verification is already very fast and TLS doesn't use RSA for encryption anymore so the problem reduces to optimizing signing operations. * https://www.amazon.science/blog/formal-verification-makes-rs... https://www.amazon.science/blog/formal-verification-makes-rs... RSA signature verification is already very fast and TLS doesn't use RSA for encryption anymore so the problem reduces to optimizing signing operations.   reply    reply    reply  reply reply        fefe23  1 day ago    | prev | next  [–]      Holy shit these claims are wild!\nIt's not just a percent more performance here and there, the graphs look more like 50% more throughput on the same hardware (depending on the cpu architecture). My immediate fear was that they optimized away the security features like absence of timing side channels, but they say they still have those. They also claim to have formal proof of correctness, which is even more amazing, because they are not doing it on a symbolic level but on a machine instruction level. Apparently they tought their reasoning system the semantics of all the CPU instructions used in the assembler implementation. I'll still wait what djb has to say about this, but it looks freaking amazing to me.    reply           fefe23  1 day ago    | prev | next  [–]      Holy shit these claims are wild!\nIt's not just a percent more performance here and there, the graphs look more like 50% more throughput on the same hardware (depending on the cpu architecture). My immediate fear was that they optimized away the security features like absence of timing side channels, but they say they still have those. They also claim to have formal proof of correctness, which is even more amazing, because they are not doing it on a symbolic level but on a machine instruction level. Apparently they tought their reasoning system the semantics of all the CPU instructions used in the assembler implementation. I'll still wait what djb has to say about this, but it looks freaking amazing to me.    reply           fefe23  1 day ago    | prev | next  [–]      Holy shit these claims are wild!\nIt's not just a percent more performance here and there, the graphs look more like 50% more throughput on the same hardware (depending on the cpu architecture). My immediate fear was that they optimized away the security features like absence of timing side channels, but they say they still have those. They also claim to have formal proof of correctness, which is even more amazing, because they are not doing it on a symbolic level but on a machine instruction level. Apparently they tought their reasoning system the semantics of all the CPU instructions used in the assembler implementation. I'll still wait what djb has to say about this, but it looks freaking amazing to me.    reply          fefe23  1 day ago    | prev | next  [–]      Holy shit these claims are wild!\nIt's not just a percent more performance here and there, the graphs look more like 50% more throughput on the same hardware (depending on the cpu architecture). My immediate fear was that they optimized away the security features like absence of timing side channels, but they say they still have those. They also claim to have formal proof of correctness, which is even more amazing, because they are not doing it on a symbolic level but on a machine instruction level. Apparently they tought their reasoning system the semantics of all the CPU instructions used in the assembler implementation. I'll still wait what djb has to say about this, but it looks freaking amazing to me.    reply          fefe23  1 day ago    | prev | next  [–]      Holy shit these claims are wild!\nIt's not just a percent more performance here and there, the graphs look more like 50% more throughput on the same hardware (depending on the cpu architecture). My immediate fear was that they optimized away the security features like absence of timing side channels, but they say they still have those. They also claim to have formal proof of correctness, which is even more amazing, because they are not doing it on a symbolic level but on a machine instruction level. Apparently they tought their reasoning system the semantics of all the CPU instructions used in the assembler implementation. I'll still wait what djb has to say about this, but it looks freaking amazing to me.    reply          fefe23  1 day ago    | prev | next  [–]      Holy shit these claims are wild!\nIt's not just a percent more performance here and there, the graphs look more like 50% more throughput on the same hardware (depending on the cpu architecture). My immediate fear was that they optimized away the security features like absence of timing side channels, but they say they still have those. They also claim to have formal proof of correctness, which is even more amazing, because they are not doing it on a symbolic level but on a machine instruction level. Apparently they tought their reasoning system the semantics of all the CPU instructions used in the assembler implementation. I'll still wait what djb has to say about this, but it looks freaking amazing to me.    reply    fefe23  1 day ago    | prev | next  [–]     fefe23  1 day ago    | prev | next  [–]    fefe23 1 day ago 1 day ago | prev | next  [–]   prev next [–]  Holy shit these claims are wild!\nIt's not just a percent more performance here and there, the graphs look more like 50% more throughput on the same hardware (depending on the cpu architecture). My immediate fear was that they optimized away the security features like absence of timing side channels, but they say they still have those. They also claim to have formal proof of correctness, which is even more amazing, because they are not doing it on a symbolic level but on a machine instruction level. Apparently they tought their reasoning system the semantics of all the CPU instructions used in the assembler implementation. I'll still wait what djb has to say about this, but it looks freaking amazing to me.    reply   Holy shit these claims are wild!\nIt's not just a percent more performance here and there, the graphs look more like 50% more throughput on the same hardware (depending on the cpu architecture). My immediate fear was that they optimized away the security features like absence of timing side channels, but they say they still have those. They also claim to have formal proof of correctness, which is even more amazing, because they are not doing it on a symbolic level but on a machine instruction level. Apparently they tought their reasoning system the semantics of all the CPU instructions used in the assembler implementation. I'll still wait what djb has to say about this, but it looks freaking amazing to me. My immediate fear was that they optimized away the security features like absence of timing side channels, but they say they still have those. They also claim to have formal proof of correctness, which is even more amazing, because they are not doing it on a symbolic level but on a machine instruction level. Apparently they tought their reasoning system the semantics of all the CPU instructions used in the assembler implementation. I'll still wait what djb has to say about this, but it looks freaking amazing to me.   reply    reply    reply  reply reply        jonmon6691  1 day ago    | prev | next  [–]      I'm assuming when they say that this improves user experience, that it implies the use case is primarily TLS. In which case store-now-decrypt-later attacks are already considered an urgent threat with regard to post quantum crypto. With FIPS 203 being released and Chrome is already using an implementation based on the draft standard, this seems like this algo (at least for TLS) should be on its way out.    reply           jonmon6691  1 day ago    | prev | next  [–]      I'm assuming when they say that this improves user experience, that it implies the use case is primarily TLS. In which case store-now-decrypt-later attacks are already considered an urgent threat with regard to post quantum crypto. With FIPS 203 being released and Chrome is already using an implementation based on the draft standard, this seems like this algo (at least for TLS) should be on its way out.    reply           jonmon6691  1 day ago    | prev | next  [–]      I'm assuming when they say that this improves user experience, that it implies the use case is primarily TLS. In which case store-now-decrypt-later attacks are already considered an urgent threat with regard to post quantum crypto. With FIPS 203 being released and Chrome is already using an implementation based on the draft standard, this seems like this algo (at least for TLS) should be on its way out.    reply          jonmon6691  1 day ago    | prev | next  [–]      I'm assuming when they say that this improves user experience, that it implies the use case is primarily TLS. In which case store-now-decrypt-later attacks are already considered an urgent threat with regard to post quantum crypto. With FIPS 203 being released and Chrome is already using an implementation based on the draft standard, this seems like this algo (at least for TLS) should be on its way out.    reply          jonmon6691  1 day ago    | prev | next  [–]      I'm assuming when they say that this improves user experience, that it implies the use case is primarily TLS. In which case store-now-decrypt-later attacks are already considered an urgent threat with regard to post quantum crypto. With FIPS 203 being released and Chrome is already using an implementation based on the draft standard, this seems like this algo (at least for TLS) should be on its way out.    reply          jonmon6691  1 day ago    | prev | next  [–]      I'm assuming when they say that this improves user experience, that it implies the use case is primarily TLS. In which case store-now-decrypt-later attacks are already considered an urgent threat with regard to post quantum crypto. With FIPS 203 being released and Chrome is already using an implementation based on the draft standard, this seems like this algo (at least for TLS) should be on its way out.    reply    jonmon6691  1 day ago    | prev | next  [–]     jonmon6691  1 day ago    | prev | next  [–]    jonmon6691 1 day ago 1 day ago | prev | next  [–]   prev next [–]  I'm assuming when they say that this improves user experience, that it implies the use case is primarily TLS. In which case store-now-decrypt-later attacks are already considered an urgent threat with regard to post quantum crypto. With FIPS 203 being released and Chrome is already using an implementation based on the draft standard, this seems like this algo (at least for TLS) should be on its way out.    reply   I'm assuming when they say that this improves user experience, that it implies the use case is primarily TLS. In which case store-now-decrypt-later attacks are already considered an urgent threat with regard to post quantum crypto. With FIPS 203 being released and Chrome is already using an implementation based on the draft standard, this seems like this algo (at least for TLS) should be on its way out.   reply    reply    reply  reply reply        dlgeek  1 day ago    | parent | next  [–]      The industry is moving to a hybrid that mixes classic crypto (including ECC) with post-quantum crypto. AWS has even turned this on in some places - https://aws.amazon.com/about-aws/whats-new/2022/03/aws-kms-a... from 2022 and https://docs.aws.amazon.com/kms/latest/developerguide/pqtls.... for some details.    reply           dlgeek  1 day ago    | parent | next  [–]      The industry is moving to a hybrid that mixes classic crypto (including ECC) with post-quantum crypto. AWS has even turned this on in some places - https://aws.amazon.com/about-aws/whats-new/2022/03/aws-kms-a... from 2022 and https://docs.aws.amazon.com/kms/latest/developerguide/pqtls.... for some details.    reply           dlgeek  1 day ago    | parent | next  [–]      The industry is moving to a hybrid that mixes classic crypto (including ECC) with post-quantum crypto. AWS has even turned this on in some places - https://aws.amazon.com/about-aws/whats-new/2022/03/aws-kms-a... from 2022 and https://docs.aws.amazon.com/kms/latest/developerguide/pqtls.... for some details.    reply          dlgeek  1 day ago    | parent | next  [–]      The industry is moving to a hybrid that mixes classic crypto (including ECC) with post-quantum crypto. AWS has even turned this on in some places - https://aws.amazon.com/about-aws/whats-new/2022/03/aws-kms-a... from 2022 and https://docs.aws.amazon.com/kms/latest/developerguide/pqtls.... for some details.    reply          dlgeek  1 day ago    | parent | next  [–]      The industry is moving to a hybrid that mixes classic crypto (including ECC) with post-quantum crypto. AWS has even turned this on in some places - https://aws.amazon.com/about-aws/whats-new/2022/03/aws-kms-a... from 2022 and https://docs.aws.amazon.com/kms/latest/developerguide/pqtls.... for some details.    reply          dlgeek  1 day ago    | parent | next  [–]      The industry is moving to a hybrid that mixes classic crypto (including ECC) with post-quantum crypto. AWS has even turned this on in some places - https://aws.amazon.com/about-aws/whats-new/2022/03/aws-kms-a... from 2022 and https://docs.aws.amazon.com/kms/latest/developerguide/pqtls.... for some details.    reply    dlgeek  1 day ago    | parent | next  [–]     dlgeek  1 day ago    | parent | next  [–]    dlgeek 1 day ago 1 day ago | parent | next  [–]   parent next [–]  The industry is moving to a hybrid that mixes classic crypto (including ECC) with post-quantum crypto. AWS has even turned this on in some places - https://aws.amazon.com/about-aws/whats-new/2022/03/aws-kms-a... from 2022 and https://docs.aws.amazon.com/kms/latest/developerguide/pqtls.... for some details.    reply   The industry is moving to a hybrid that mixes classic crypto (including ECC) with post-quantum crypto. AWS has even turned this on in some places - https://aws.amazon.com/about-aws/whats-new/2022/03/aws-kms-a... from 2022 and https://docs.aws.amazon.com/kms/latest/developerguide/pqtls.... for some details. https://aws.amazon.com/about-aws/whats-new/2022/03/aws-kms-a... https://docs.aws.amazon.com/kms/latest/developerguide/pqtls....   reply    reply    reply  reply reply        jonmon6691  1 day ago    | root | parent | next  [–]      Thanks I forgot about that. So if understand it right, the idea is to provide some insurance in the case that these relatively young algorithms are broken as they get exposed to more and more cryptanalysis    reply           jonmon6691  1 day ago    | root | parent | next  [–]      Thanks I forgot about that. So if understand it right, the idea is to provide some insurance in the case that these relatively young algorithms are broken as they get exposed to more and more cryptanalysis    reply           jonmon6691  1 day ago    | root | parent | next  [–]      Thanks I forgot about that. So if understand it right, the idea is to provide some insurance in the case that these relatively young algorithms are broken as they get exposed to more and more cryptanalysis    reply          jonmon6691  1 day ago    | root | parent | next  [–]      Thanks I forgot about that. So if understand it right, the idea is to provide some insurance in the case that these relatively young algorithms are broken as they get exposed to more and more cryptanalysis    reply          jonmon6691  1 day ago    | root | parent | next  [–]      Thanks I forgot about that. So if understand it right, the idea is to provide some insurance in the case that these relatively young algorithms are broken as they get exposed to more and more cryptanalysis    reply          jonmon6691  1 day ago    | root | parent | next  [–]      Thanks I forgot about that. So if understand it right, the idea is to provide some insurance in the case that these relatively young algorithms are broken as they get exposed to more and more cryptanalysis    reply    jonmon6691  1 day ago    | root | parent | next  [–]     jonmon6691  1 day ago    | root | parent | next  [–]    jonmon6691 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  Thanks I forgot about that. So if understand it right, the idea is to provide some insurance in the case that these relatively young algorithms are broken as they get exposed to more and more cryptanalysis    reply   Thanks I forgot about that. So if understand it right, the idea is to provide some insurance in the case that these relatively young algorithms are broken as they get exposed to more and more cryptanalysis   reply    reply    reply  reply reply        adgjlsfhk1  1 day ago    | parent | prev | next  [–]      No one other than NIST is recommending phasing out pre-quantum crypto. Everyone else is using a combination of pre-quantum and post-quantum because trust in the security and robustness of the post-quantum ecosystem is fairly low.    reply           adgjlsfhk1  1 day ago    | parent | prev | next  [–]      No one other than NIST is recommending phasing out pre-quantum crypto. Everyone else is using a combination of pre-quantum and post-quantum because trust in the security and robustness of the post-quantum ecosystem is fairly low.    reply           adgjlsfhk1  1 day ago    | parent | prev | next  [–]      No one other than NIST is recommending phasing out pre-quantum crypto. Everyone else is using a combination of pre-quantum and post-quantum because trust in the security and robustness of the post-quantum ecosystem is fairly low.    reply          adgjlsfhk1  1 day ago    | parent | prev | next  [–]      No one other than NIST is recommending phasing out pre-quantum crypto. Everyone else is using a combination of pre-quantum and post-quantum because trust in the security and robustness of the post-quantum ecosystem is fairly low.    reply          adgjlsfhk1  1 day ago    | parent | prev | next  [–]      No one other than NIST is recommending phasing out pre-quantum crypto. Everyone else is using a combination of pre-quantum and post-quantum because trust in the security and robustness of the post-quantum ecosystem is fairly low.    reply          adgjlsfhk1  1 day ago    | parent | prev | next  [–]      No one other than NIST is recommending phasing out pre-quantum crypto. Everyone else is using a combination of pre-quantum and post-quantum because trust in the security and robustness of the post-quantum ecosystem is fairly low.    reply    adgjlsfhk1  1 day ago    | parent | prev | next  [–]     adgjlsfhk1  1 day ago    | parent | prev | next  [–]    adgjlsfhk1 1 day ago 1 day ago | parent | prev | next  [–]   parent prev next [–]  No one other than NIST is recommending phasing out pre-quantum crypto. Everyone else is using a combination of pre-quantum and post-quantum because trust in the security and robustness of the post-quantum ecosystem is fairly low.    reply   No one other than NIST is recommending phasing out pre-quantum crypto. Everyone else is using a combination of pre-quantum and post-quantum because trust in the security and robustness of the post-quantum ecosystem is fairly low.   reply    reply    reply  reply reply        webXL  1 day ago    | prev | next  [–]      Why don't they just focus on making a Gravitron variant with those algorithms in the circuitry?    reply           webXL  1 day ago    | prev | next  [–]      Why don't they just focus on making a Gravitron variant with those algorithms in the circuitry?    reply           webXL  1 day ago    | prev | next  [–]      Why don't they just focus on making a Gravitron variant with those algorithms in the circuitry?    reply          webXL  1 day ago    | prev | next  [–]      Why don't they just focus on making a Gravitron variant with those algorithms in the circuitry?    reply          webXL  1 day ago    | prev | next  [–]      Why don't they just focus on making a Gravitron variant with those algorithms in the circuitry?    reply          webXL  1 day ago    | prev | next  [–]      Why don't they just focus on making a Gravitron variant with those algorithms in the circuitry?    reply    webXL  1 day ago    | prev | next  [–]     webXL  1 day ago    | prev | next  [–]    webXL 1 day ago 1 day ago | prev | next  [–]   prev next [–]  Why don't they just focus on making a Gravitron variant with those algorithms in the circuitry?    reply   Why don't they just focus on making a Gravitron variant with those algorithms in the circuitry?   reply    reply    reply  reply reply        londons_explore  1 day ago    | prev  [–]      Does 25519 suffer from key/data-dependant execution time? Is this implementation resistant to that? If it isn't, it's kinda a footgun which shouldn't be published for general use.    reply           londons_explore  1 day ago    | prev  [–]      Does 25519 suffer from key/data-dependant execution time? Is this implementation resistant to that? If it isn't, it's kinda a footgun which shouldn't be published for general use.    reply           londons_explore  1 day ago    | prev  [–]      Does 25519 suffer from key/data-dependant execution time? Is this implementation resistant to that? If it isn't, it's kinda a footgun which shouldn't be published for general use.    reply          londons_explore  1 day ago    | prev  [–]      Does 25519 suffer from key/data-dependant execution time? Is this implementation resistant to that? If it isn't, it's kinda a footgun which shouldn't be published for general use.    reply          londons_explore  1 day ago    | prev  [–]      Does 25519 suffer from key/data-dependant execution time? Is this implementation resistant to that? If it isn't, it's kinda a footgun which shouldn't be published for general use.    reply          londons_explore  1 day ago    | prev  [–]      Does 25519 suffer from key/data-dependant execution time? Is this implementation resistant to that? If it isn't, it's kinda a footgun which shouldn't be published for general use.    reply    londons_explore  1 day ago    | prev  [–]     londons_explore  1 day ago    | prev  [–]    londons_explore 1 day ago 1 day ago | prev  [–]   prev [–]  Does 25519 suffer from key/data-dependant execution time? Is this implementation resistant to that? If it isn't, it's kinda a footgun which shouldn't be published for general use.    reply   Does 25519 suffer from key/data-dependant execution time? Is this implementation resistant to that? If it isn't, it's kinda a footgun which shouldn't be published for general use. Is this implementation resistant to that? If it isn't, it's kinda a footgun which shouldn't be published for general use.   reply    reply    reply  reply reply        syncsynchalt  1 day ago    | parent | next  [–]      Curve25519 is designed to be resistant to timing attacks, such as clamping the 254th bit in x25519 keys to 1 so that implementors can not optimize away a multiplication round. That doesn't mean that this implementation doesn't have timing attacks, but the implementors claim they chose mechanisms which should be constant-time.    reply           syncsynchalt  1 day ago    | parent | next  [–]      Curve25519 is designed to be resistant to timing attacks, such as clamping the 254th bit in x25519 keys to 1 so that implementors can not optimize away a multiplication round. That doesn't mean that this implementation doesn't have timing attacks, but the implementors claim they chose mechanisms which should be constant-time.    reply           syncsynchalt  1 day ago    | parent | next  [–]      Curve25519 is designed to be resistant to timing attacks, such as clamping the 254th bit in x25519 keys to 1 so that implementors can not optimize away a multiplication round. That doesn't mean that this implementation doesn't have timing attacks, but the implementors claim they chose mechanisms which should be constant-time.    reply          syncsynchalt  1 day ago    | parent | next  [–]      Curve25519 is designed to be resistant to timing attacks, such as clamping the 254th bit in x25519 keys to 1 so that implementors can not optimize away a multiplication round. That doesn't mean that this implementation doesn't have timing attacks, but the implementors claim they chose mechanisms which should be constant-time.    reply          syncsynchalt  1 day ago    | parent | next  [–]      Curve25519 is designed to be resistant to timing attacks, such as clamping the 254th bit in x25519 keys to 1 so that implementors can not optimize away a multiplication round. That doesn't mean that this implementation doesn't have timing attacks, but the implementors claim they chose mechanisms which should be constant-time.    reply          syncsynchalt  1 day ago    | parent | next  [–]      Curve25519 is designed to be resistant to timing attacks, such as clamping the 254th bit in x25519 keys to 1 so that implementors can not optimize away a multiplication round. That doesn't mean that this implementation doesn't have timing attacks, but the implementors claim they chose mechanisms which should be constant-time.    reply    syncsynchalt  1 day ago    | parent | next  [–]     syncsynchalt  1 day ago    | parent | next  [–]    syncsynchalt 1 day ago 1 day ago | parent | next  [–]   parent next [–]  Curve25519 is designed to be resistant to timing attacks, such as clamping the 254th bit in x25519 keys to 1 so that implementors can not optimize away a multiplication round. That doesn't mean that this implementation doesn't have timing attacks, but the implementors claim they chose mechanisms which should be constant-time.    reply   Curve25519 is designed to be resistant to timing attacks, such as clamping the 254th bit in x25519 keys to 1 so that implementors can not optimize away a multiplication round. That doesn't mean that this implementation doesn't have timing attacks, but the implementors claim they chose mechanisms which should be constant-time. That doesn't mean that this implementation doesn't have timing attacks, but the implementors claim they chose mechanisms which should be constant-time.   reply    reply    reply  reply reply        vitus  1 day ago    | parent | prev  [–]      > Does 25519 suffer from key/data-dependant execution time? I mean, when implemented naively, yes, but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. From the article: > We also do our best to execute the algorithms in constant time, to thwart side-channel attacks that infer secret information from the durations of computations. https://github.com/awslabs/s2n-bignum (where most of the heavy lifting is done, per the article) further explicitly states that \"Each function is moreover written in a constant-time style to avoid timing side-channels.\"    reply           vitus  1 day ago    | parent | prev  [–]      > Does 25519 suffer from key/data-dependant execution time? I mean, when implemented naively, yes, but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. From the article: > We also do our best to execute the algorithms in constant time, to thwart side-channel attacks that infer secret information from the durations of computations. https://github.com/awslabs/s2n-bignum (where most of the heavy lifting is done, per the article) further explicitly states that \"Each function is moreover written in a constant-time style to avoid timing side-channels.\"    reply           vitus  1 day ago    | parent | prev  [–]      > Does 25519 suffer from key/data-dependant execution time? I mean, when implemented naively, yes, but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. From the article: > We also do our best to execute the algorithms in constant time, to thwart side-channel attacks that infer secret information from the durations of computations. https://github.com/awslabs/s2n-bignum (where most of the heavy lifting is done, per the article) further explicitly states that \"Each function is moreover written in a constant-time style to avoid timing side-channels.\"    reply          vitus  1 day ago    | parent | prev  [–]      > Does 25519 suffer from key/data-dependant execution time? I mean, when implemented naively, yes, but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. From the article: > We also do our best to execute the algorithms in constant time, to thwart side-channel attacks that infer secret information from the durations of computations. https://github.com/awslabs/s2n-bignum (where most of the heavy lifting is done, per the article) further explicitly states that \"Each function is moreover written in a constant-time style to avoid timing side-channels.\"    reply          vitus  1 day ago    | parent | prev  [–]      > Does 25519 suffer from key/data-dependant execution time? I mean, when implemented naively, yes, but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. From the article: > We also do our best to execute the algorithms in constant time, to thwart side-channel attacks that infer secret information from the durations of computations. https://github.com/awslabs/s2n-bignum (where most of the heavy lifting is done, per the article) further explicitly states that \"Each function is moreover written in a constant-time style to avoid timing side-channels.\"    reply          vitus  1 day ago    | parent | prev  [–]      > Does 25519 suffer from key/data-dependant execution time? I mean, when implemented naively, yes, but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. From the article: > We also do our best to execute the algorithms in constant time, to thwart side-channel attacks that infer secret information from the durations of computations. https://github.com/awslabs/s2n-bignum (where most of the heavy lifting is done, per the article) further explicitly states that \"Each function is moreover written in a constant-time style to avoid timing side-channels.\"    reply    vitus  1 day ago    | parent | prev  [–]     vitus  1 day ago    | parent | prev  [–]    vitus 1 day ago 1 day ago | parent | prev  [–]   parent prev [–]  > Does 25519 suffer from key/data-dependant execution time? I mean, when implemented naively, yes, but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. From the article: > We also do our best to execute the algorithms in constant time, to thwart side-channel attacks that infer secret information from the durations of computations. https://github.com/awslabs/s2n-bignum (where most of the heavy lifting is done, per the article) further explicitly states that \"Each function is moreover written in a constant-time style to avoid timing side-channels.\"    reply   > Does 25519 suffer from key/data-dependant execution time? I mean, when implemented naively, yes, but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. From the article: > We also do our best to execute the algorithms in constant time, to thwart side-channel attacks that infer secret information from the durations of computations. https://github.com/awslabs/s2n-bignum (where most of the heavy lifting is done, per the article) further explicitly states that \"Each function is moreover written in a constant-time style to avoid timing side-channels.\" I mean, when implemented naively, yes, but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. From the article: > We also do our best to execute the algorithms in constant time, to thwart side-channel attacks that infer secret information from the durations of computations. https://github.com/awslabs/s2n-bignum (where most of the heavy lifting is done, per the article) further explicitly states that \"Each function is moreover written in a constant-time style to avoid timing side-channels.\" https://github.com/awslabs/s2n-bignum   reply    reply    reply  reply reply        justinwsmith  1 day ago    | root | parent | next  [–]      The next paragraph makes a slightly stronger statement about its constant-time'ness: > Our implementations of x/Ed25519 are designed with constant time in mind. They perform exactly the same sequence of basic CPU instructions regardless of the input values, and they avoid any CPU instructions that might have data-dependent timing.    reply           justinwsmith  1 day ago    | root | parent | next  [–]      The next paragraph makes a slightly stronger statement about its constant-time'ness: > Our implementations of x/Ed25519 are designed with constant time in mind. They perform exactly the same sequence of basic CPU instructions regardless of the input values, and they avoid any CPU instructions that might have data-dependent timing.    reply           justinwsmith  1 day ago    | root | parent | next  [–]      The next paragraph makes a slightly stronger statement about its constant-time'ness: > Our implementations of x/Ed25519 are designed with constant time in mind. They perform exactly the same sequence of basic CPU instructions regardless of the input values, and they avoid any CPU instructions that might have data-dependent timing.    reply          justinwsmith  1 day ago    | root | parent | next  [–]      The next paragraph makes a slightly stronger statement about its constant-time'ness: > Our implementations of x/Ed25519 are designed with constant time in mind. They perform exactly the same sequence of basic CPU instructions regardless of the input values, and they avoid any CPU instructions that might have data-dependent timing.    reply          justinwsmith  1 day ago    | root | parent | next  [–]      The next paragraph makes a slightly stronger statement about its constant-time'ness: > Our implementations of x/Ed25519 are designed with constant time in mind. They perform exactly the same sequence of basic CPU instructions regardless of the input values, and they avoid any CPU instructions that might have data-dependent timing.    reply          justinwsmith  1 day ago    | root | parent | next  [–]      The next paragraph makes a slightly stronger statement about its constant-time'ness: > Our implementations of x/Ed25519 are designed with constant time in mind. They perform exactly the same sequence of basic CPU instructions regardless of the input values, and they avoid any CPU instructions that might have data-dependent timing.    reply    justinwsmith  1 day ago    | root | parent | next  [–]     justinwsmith  1 day ago    | root | parent | next  [–]    justinwsmith 1 day ago 1 day ago | root | parent | next  [–]   root parent next [–]  The next paragraph makes a slightly stronger statement about its constant-time'ness: > Our implementations of x/Ed25519 are designed with constant time in mind. They perform exactly the same sequence of basic CPU instructions regardless of the input values, and they avoid any CPU instructions that might have data-dependent timing.    reply   The next paragraph makes a slightly stronger statement about its constant-time'ness: > Our implementations of x/Ed25519 are designed with constant time in mind. They perform exactly the same sequence of basic CPU instructions regardless of the input values, and they avoid any CPU instructions that might have data-dependent timing. > Our implementations of x/Ed25519 are designed with constant time in mind. They perform exactly the same sequence of basic CPU instructions regardless of the input values, and they avoid any CPU instructions that might have data-dependent timing.   reply    reply    reply  reply reply        deathanatos  1 day ago    | root | parent | prev  [–]      > but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. When I see CVE-fests like — https://people.redhat.com/~hkario/marvin/ — … I just do not come away with that impression. [Widely used] Cryptographic Rust crates offering \"constant time\" operations in \"pure Rust\" — but Rust has no primitives for doing constant time operations , so it's only through hopes and prayers that it might actually work, and with no guarantee anywhere that it actually should . (Other, less timing attack related stuff, but e.g., major companies still not supporting anything beyond RSA.)    reply           deathanatos  1 day ago    | root | parent | prev  [–]      > but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. When I see CVE-fests like — https://people.redhat.com/~hkario/marvin/ — … I just do not come away with that impression. [Widely used] Cryptographic Rust crates offering \"constant time\" operations in \"pure Rust\" — but Rust has no primitives for doing constant time operations , so it's only through hopes and prayers that it might actually work, and with no guarantee anywhere that it actually should . (Other, less timing attack related stuff, but e.g., major companies still not supporting anything beyond RSA.)    reply           deathanatos  1 day ago    | root | parent | prev  [–]      > but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. When I see CVE-fests like — https://people.redhat.com/~hkario/marvin/ — … I just do not come away with that impression. [Widely used] Cryptographic Rust crates offering \"constant time\" operations in \"pure Rust\" — but Rust has no primitives for doing constant time operations , so it's only through hopes and prayers that it might actually work, and with no guarantee anywhere that it actually should . (Other, less timing attack related stuff, but e.g., major companies still not supporting anything beyond RSA.)    reply          deathanatos  1 day ago    | root | parent | prev  [–]      > but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. When I see CVE-fests like — https://people.redhat.com/~hkario/marvin/ — … I just do not come away with that impression. [Widely used] Cryptographic Rust crates offering \"constant time\" operations in \"pure Rust\" — but Rust has no primitives for doing constant time operations , so it's only through hopes and prayers that it might actually work, and with no guarantee anywhere that it actually should . (Other, less timing attack related stuff, but e.g., major companies still not supporting anything beyond RSA.)    reply          deathanatos  1 day ago    | root | parent | prev  [–]      > but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. When I see CVE-fests like — https://people.redhat.com/~hkario/marvin/ — … I just do not come away with that impression. [Widely used] Cryptographic Rust crates offering \"constant time\" operations in \"pure Rust\" — but Rust has no primitives for doing constant time operations , so it's only through hopes and prayers that it might actually work, and with no guarantee anywhere that it actually should . (Other, less timing attack related stuff, but e.g., major companies still not supporting anything beyond RSA.)    reply          deathanatos  1 day ago    | root | parent | prev  [–]      > but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. When I see CVE-fests like — https://people.redhat.com/~hkario/marvin/ — … I just do not come away with that impression. [Widely used] Cryptographic Rust crates offering \"constant time\" operations in \"pure Rust\" — but Rust has no primitives for doing constant time operations , so it's only through hopes and prayers that it might actually work, and with no guarantee anywhere that it actually should . (Other, less timing attack related stuff, but e.g., major companies still not supporting anything beyond RSA.)    reply    deathanatos  1 day ago    | root | parent | prev  [–]     deathanatos  1 day ago    | root | parent | prev  [–]    deathanatos 1 day ago 1 day ago | root | parent | prev  [–]   root parent prev [–]  > but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. When I see CVE-fests like — https://people.redhat.com/~hkario/marvin/ — … I just do not come away with that impression. [Widely used] Cryptographic Rust crates offering \"constant time\" operations in \"pure Rust\" — but Rust has no primitives for doing constant time operations , so it's only through hopes and prayers that it might actually work, and with no guarantee anywhere that it actually should . (Other, less timing attack related stuff, but e.g., major companies still not supporting anything beyond RSA.)    reply   > but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. When I see CVE-fests like — https://people.redhat.com/~hkario/marvin/ — … I just do not come away with that impression. [Widely used] Cryptographic Rust crates offering \"constant time\" operations in \"pure Rust\" — but Rust has no primitives for doing constant time operations , so it's only through hopes and prayers that it might actually work, and with no guarantee anywhere that it actually should . (Other, less timing attack related stuff, but e.g., major companies still not supporting anything beyond RSA.) but the industry has been aware of timing attacks for decades such that this is table stakes for any crypto implementations. When I see CVE-fests like — https://people.redhat.com/~hkario/marvin/ — … I just do not come away with that impression. https://people.redhat.com/~hkario/marvin/ [Widely used] Cryptographic Rust crates offering \"constant time\" operations in \"pure Rust\" — but Rust has no primitives for doing constant time operations , so it's only through hopes and prayers that it might actually work, and with no guarantee anywhere that it actually should . has no primitives for doing constant time operations should (Other, less timing attack related stuff, but e.g., major companies still not supporting anything beyond RSA.)   reply    reply    reply  reply reply     Guidelines | FAQ | Lists | API | Security | Legal | Apply to YC | Contact    Search:      Guidelines | FAQ | Lists | API | Security | Legal | Apply to YC | Contact    Search:     Guidelines | FAQ | Lists | API | Security | Legal | Apply to YC | Contact    Search:  Guidelines | FAQ | Lists | API | Security | Legal | Apply to YC | Contact Guidelines FAQ Lists API Security Legal Apply to YC Contact Search: ",
  "links": [
    {
      "id": 1,
      "url": "https://news.ycombinator.com/",
      "html": "<a href=\"https://news.ycombinator.com\"><img src=\"y18.svg\" width=\"18\" height=\"18\" style=\"border:1px white solid; display:block\"></a>",
      "text": ""
    },
    {
      "id": 2,
      "url": "https://news.ycombinator.com/news",
      "html": "<a href=\"news\">Hacker News</a>",
      "text": "Hacker News"
    },
    {
      "id": 3,
      "url": "https://news.ycombinator.com/newest",
      "html": "<a href=\"newest\">new</a>",
      "text": "new"
    },
    {
      "id": 4,
      "url": "https://news.ycombinator.com/front",
      "html": "<a href=\"front\">past</a>",
      "text": "past"
    },
    {
      "id": 5,
      "url": "https://news.ycombinator.com/newcomments",
      "html": "<a href=\"newcomments\">comments</a>",
      "text": "comments"
    },
    {
      "id": 6,
      "url": "https://news.ycombinator.com/ask",
      "html": "<a href=\"ask\">ask</a>",
      "text": "ask"
    },
    {
      "id": 7,
      "url": "https://news.ycombinator.com/show",
      "html": "<a href=\"show\">show</a>",
      "text": "show"
    },
    {
      "id": 8,
      "url": "https://news.ycombinator.com/jobs",
      "html": "<a href=\"jobs\">jobs</a>",
      "text": "jobs"
    },
    {
      "id": 9,
      "url": "https://news.ycombinator.com/submit",
      "html": "<a href=\"submit\" rel=\"nofollow\">submit</a>",
      "text": "submit"
    },
    {
      "id": 10,
      "url": "https://news.ycombinator.com/login?goto=item%3Fid%3D41527675",
      "html": "<a href=\"login?goto=item%3Fid%3D41527675\">login</a>",
      "text": "login"
    },
    {
      "id": 11,
      "url": "https://news.ycombinator.com/vote?id=41527675&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41527675\" href=\"vote?id=41527675&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 12,
      "url": "https://www.amazon.science/blog/better-performing-25519-elliptic-curve-cryptography",
      "html": "<a href=\"https://www.amazon.science/blog/better-performing-25519-elliptic-curve-cryptography\">Better-performing “25519” elliptic-curve cryptography</a>",
      "text": "Better-performing “25519” elliptic-curve cryptography"
    },
    {
      "id": 13,
      "url": "https://news.ycombinator.com/from?site=amazon.science",
      "html": "<a href=\"from?site=amazon.science\"><span class=\"sitestr\">amazon.science</span></a>",
      "text": "amazon.science"
    },
    {
      "id": 14,
      "url": "https://news.ycombinator.com/user?id=lemaudit",
      "html": "<a href=\"user?id=lemaudit\" class=\"hnuser\">lemaudit</a>",
      "text": "lemaudit"
    },
    {
      "id": 15,
      "url": "https://news.ycombinator.com/item?id=41527675",
      "html": "<a href=\"item?id=41527675\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 16,
      "url": "https://news.ycombinator.com/hide?id=41527675&goto=item%3Fid%3D41527675",
      "html": "<a href=\"hide?id=41527675&amp;goto=item%3Fid%3D41527675\">hide</a>",
      "text": "hide"
    },
    {
      "id": 17,
      "url": "https://hn.algolia.com/?query=Better-performing%20%E2%80%9C25519%E2%80%9D%20elliptic-curve%20cryptography&type=story&dateRange=all&sort=byDate&storyText=false&prefix&page=0",
      "html": "<a href=\"https://hn.algolia.com/?query=Better-performing%20%E2%80%9C25519%E2%80%9D%20elliptic-curve%20cryptography&amp;type=story&amp;dateRange=all&amp;sort=byDate&amp;storyText=false&amp;prefix&amp;page=0\" class=\"hnpast\">past</a>",
      "text": "past"
    },
    {
      "id": 18,
      "url": "https://news.ycombinator.com/fave?id=41527675&auth=24699b50103550f6489b5ced7e981adadd23f1d3",
      "html": "<a href=\"fave?id=41527675&amp;auth=24699b50103550f6489b5ced7e981adadd23f1d3\">favorite</a>",
      "text": "favorite"
    },
    {
      "id": 19,
      "url": "https://news.ycombinator.com/item?id=41527675",
      "html": "<a href=\"item?id=41527675\">87&nbsp;comments</a>",
      "text": "87 comments"
    },
    {
      "id": 20,
      "url": "https://news.ycombinator.com/vote?id=41528060&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41528060\" href=\"vote?id=41528060&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 21,
      "url": "https://news.ycombinator.com/user?id=SEJeff",
      "html": "<a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a>",
      "text": "SEJeff"
    },
    {
      "id": 22,
      "url": "https://news.ycombinator.com/item?id=41528060",
      "html": "<a href=\"item?id=41528060\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 23,
      "url": "https://news.ycombinator.com/item?id=41527675#41533915",
      "html": "<a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 24,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41528060\" n=\"38\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 25,
      "url": "https://github.com/firedancer-io/firedancer/pull/716",
      "html": "<a href=\"https://github.com/firedancer-io/firedancer/pull/716\">https://github.com/firedancer-io/firedancer/pull/716</a>",
      "text": "https://github.com/firedancer-io/firedancer/pull/716"
    },
    {
      "id": 26,
      "url": "https://github.com/firedancer-io/firedancer/pull/778",
      "html": "<a href=\"https://github.com/firedancer-io/firedancer/pull/778\">https://github.com/firedancer-io/firedancer/pull/778</a>",
      "text": "https://github.com/firedancer-io/firedancer/pull/778"
    },
    {
      "id": 27,
      "url": "https://github.com/firedancer-io/firedancer/pull/760",
      "html": "<a href=\"https://github.com/firedancer-io/firedancer/pull/760\">https://github.com/firedancer-io/firedancer/pull/760</a>",
      "text": "https://github.com/firedancer-io/firedancer/pull/760"
    },
    {
      "id": 28,
      "url": "https://news.ycombinator.com/reply?id=41528060&goto=item%3Fid%3D41527675%2341528060",
      "html": "<a href=\"reply?id=41528060&amp;goto=item%3Fid%3D41527675%2341528060\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 29,
      "url": "https://news.ycombinator.com/vote?id=41529393&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41529393\" href=\"vote?id=41529393&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 30,
      "url": "https://news.ycombinator.com/user?id=syzygyhack",
      "html": "<a href=\"user?id=syzygyhack\" class=\"hnuser\">syzygyhack</a>",
      "text": "syzygyhack"
    },
    {
      "id": 31,
      "url": "https://news.ycombinator.com/item?id=41529393",
      "html": "<a href=\"item?id=41529393\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 32,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 33,
      "url": "https://news.ycombinator.com/item?id=41527675#41531697",
      "html": "<a href=\"#41531697\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 34,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41529393\" n=\"8\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 35,
      "url": "https://news.ycombinator.com/reply?id=41529393&goto=item%3Fid%3D41527675%2341529393",
      "html": "<a href=\"reply?id=41529393&amp;goto=item%3Fid%3D41527675%2341529393\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 36,
      "url": "https://news.ycombinator.com/vote?id=41530425&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41530425\" href=\"vote?id=41530425&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 37,
      "url": "https://news.ycombinator.com/user?id=SEJeff",
      "html": "<a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a>",
      "text": "SEJeff"
    },
    {
      "id": 38,
      "url": "https://news.ycombinator.com/item?id=41530425",
      "html": "<a href=\"item?id=41530425\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 39,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 40,
      "url": "https://news.ycombinator.com/item?id=41527675#41529393",
      "html": "<a href=\"#41529393\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 41,
      "url": "https://news.ycombinator.com/item?id=41527675#41532043",
      "html": "<a href=\"#41532043\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 42,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41530425\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 43,
      "url": "https://news.ycombinator.com/reply?id=41530425&goto=item%3Fid%3D41527675%2341530425",
      "html": "<a href=\"reply?id=41530425&amp;goto=item%3Fid%3D41527675%2341530425\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 44,
      "url": "https://news.ycombinator.com/vote?id=41532043&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41532043\" href=\"vote?id=41532043&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 45,
      "url": "https://news.ycombinator.com/user?id=webXL",
      "html": "<a href=\"user?id=webXL\" class=\"hnuser\">webXL</a>",
      "text": "webXL"
    },
    {
      "id": 46,
      "url": "https://news.ycombinator.com/item?id=41532043",
      "html": "<a href=\"item?id=41532043\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 47,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 48,
      "url": "https://news.ycombinator.com/item?id=41527675#41529393",
      "html": "<a href=\"#41529393\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 49,
      "url": "https://news.ycombinator.com/item?id=41527675#41530425",
      "html": "<a href=\"#41530425\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 50,
      "url": "https://news.ycombinator.com/item?id=41527675#41531697",
      "html": "<a href=\"#41531697\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 51,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41532043\" n=\"6\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 52,
      "url": "https://news.ycombinator.com/reply?id=41532043&goto=item%3Fid%3D41527675%2341532043",
      "html": "<a href=\"reply?id=41532043&amp;goto=item%3Fid%3D41527675%2341532043\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 53,
      "url": "https://news.ycombinator.com/vote?id=41532456&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41532456\" href=\"vote?id=41532456&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 54,
      "url": "https://news.ycombinator.com/user?id=SEJeff",
      "html": "<a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a>",
      "text": "SEJeff"
    },
    {
      "id": 55,
      "url": "https://news.ycombinator.com/item?id=41532456",
      "html": "<a href=\"item?id=41532456\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 56,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 57,
      "url": "https://news.ycombinator.com/item?id=41527675#41532043",
      "html": "<a href=\"#41532043\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 58,
      "url": "https://news.ycombinator.com/item?id=41527675#41532723",
      "html": "<a href=\"#41532723\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 59,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41532456\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 60,
      "url": "https://news.ycombinator.com/reply?id=41532456&goto=item%3Fid%3D41527675%2341532456",
      "html": "<a href=\"reply?id=41532456&amp;goto=item%3Fid%3D41527675%2341532456\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 61,
      "url": "https://news.ycombinator.com/vote?id=41532723&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41532723\" href=\"vote?id=41532723&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 62,
      "url": "https://news.ycombinator.com/user?id=jandrese",
      "html": "<a href=\"user?id=jandrese\" class=\"hnuser\">jandrese</a>",
      "text": "jandrese"
    },
    {
      "id": 63,
      "url": "https://news.ycombinator.com/item?id=41532723",
      "html": "<a href=\"item?id=41532723\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 64,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 65,
      "url": "https://news.ycombinator.com/item?id=41527675#41532043",
      "html": "<a href=\"#41532043\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 66,
      "url": "https://news.ycombinator.com/item?id=41527675#41532456",
      "html": "<a href=\"#41532456\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 67,
      "url": "https://news.ycombinator.com/item?id=41527675#41532409",
      "html": "<a href=\"#41532409\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 68,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41532723\" n=\"3\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 69,
      "url": "https://news.ycombinator.com/reply?id=41532723&goto=item%3Fid%3D41527675%2341532723",
      "html": "<a href=\"reply?id=41532723&amp;goto=item%3Fid%3D41527675%2341532723\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 70,
      "url": "https://news.ycombinator.com/vote?id=41536393&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41536393\" href=\"vote?id=41536393&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 71,
      "url": "https://news.ycombinator.com/user?id=webXL",
      "html": "<a href=\"user?id=webXL\" class=\"hnuser\">webXL</a>",
      "text": "webXL"
    },
    {
      "id": 72,
      "url": "https://news.ycombinator.com/item?id=41536393",
      "html": "<a href=\"item?id=41536393\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 73,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 74,
      "url": "https://news.ycombinator.com/item?id=41527675#41532723",
      "html": "<a href=\"#41532723\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 75,
      "url": "https://news.ycombinator.com/item?id=41527675#41532409",
      "html": "<a href=\"#41532409\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 76,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41536393\" n=\"2\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 77,
      "url": "https://news.ycombinator.com/reply?id=41536393&goto=item%3Fid%3D41527675%2341536393",
      "html": "<a href=\"reply?id=41536393&amp;goto=item%3Fid%3D41527675%2341536393\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 78,
      "url": "https://news.ycombinator.com/vote?id=41537011&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41537011\" href=\"vote?id=41537011&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 79,
      "url": "https://news.ycombinator.com/user?id=sweeter",
      "html": "<a href=\"user?id=sweeter\" class=\"hnuser\">sweeter</a>",
      "text": "sweeter"
    },
    {
      "id": 80,
      "url": "https://news.ycombinator.com/item?id=41537011",
      "html": "<a href=\"item?id=41537011\">22 hours ago</a>",
      "text": "22 hours ago"
    },
    {
      "id": 81,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 82,
      "url": "https://news.ycombinator.com/item?id=41527675#41536393",
      "html": "<a href=\"#41536393\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 83,
      "url": "https://news.ycombinator.com/item?id=41527675#41532409",
      "html": "<a href=\"#41532409\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 84,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41537011\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 85,
      "url": "https://www.youtube.com/watch?v=PHlcAx-I0oY",
      "html": "<a href=\"https://www.youtube.com/watch?v=PHlcAx-I0oY\" rel=\"nofollow\">https://www.youtube.com/watch?v=PHlcAx-I0oY</a>",
      "text": "https://www.youtube.com/watch?v=PHlcAx-I0oY"
    },
    {
      "id": 86,
      "url": "https://news.ycombinator.com/reply?id=41537011&goto=item%3Fid%3D41527675%2341537011",
      "html": "<a href=\"reply?id=41537011&amp;goto=item%3Fid%3D41527675%2341537011\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 87,
      "url": "https://news.ycombinator.com/vote?id=41532409&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41532409\" href=\"vote?id=41532409&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 88,
      "url": "https://news.ycombinator.com/user?id=ShroudedNight",
      "html": "<a href=\"user?id=ShroudedNight\" class=\"hnuser\">ShroudedNight</a>",
      "text": "ShroudedNight"
    },
    {
      "id": 89,
      "url": "https://news.ycombinator.com/item?id=41532409",
      "html": "<a href=\"item?id=41532409\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 90,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 91,
      "url": "https://news.ycombinator.com/item?id=41527675#41532043",
      "html": "<a href=\"#41532043\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 92,
      "url": "https://news.ycombinator.com/item?id=41527675#41532723",
      "html": "<a href=\"#41532723\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 93,
      "url": "https://news.ycombinator.com/item?id=41527675#41531697",
      "html": "<a href=\"#41531697\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 94,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41532409\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 95,
      "url": "https://news.ycombinator.com/reply?id=41532409&goto=item%3Fid%3D41527675%2341532409",
      "html": "<a href=\"reply?id=41532409&amp;goto=item%3Fid%3D41527675%2341532409\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 96,
      "url": "https://news.ycombinator.com/vote?id=41531697&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41531697\" href=\"vote?id=41531697&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 97,
      "url": "https://news.ycombinator.com/user?id=nly",
      "html": "<a href=\"user?id=nly\" class=\"hnuser\">nly</a>",
      "text": "nly"
    },
    {
      "id": 98,
      "url": "https://news.ycombinator.com/item?id=41531697",
      "html": "<a href=\"item?id=41531697\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 99,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 100,
      "url": "https://news.ycombinator.com/item?id=41527675#41529393",
      "html": "<a href=\"#41529393\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 101,
      "url": "https://news.ycombinator.com/item?id=41527675#41532069",
      "html": "<a href=\"#41532069\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 102,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41531697\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 103,
      "url": "https://news.ycombinator.com/reply?id=41531697&goto=item%3Fid%3D41527675%2341531697",
      "html": "<a href=\"reply?id=41531697&amp;goto=item%3Fid%3D41527675%2341531697\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 104,
      "url": "https://news.ycombinator.com/vote?id=41532069&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41532069\" href=\"vote?id=41532069&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 105,
      "url": "https://news.ycombinator.com/user?id=inopinatus",
      "html": "<a href=\"user?id=inopinatus\" class=\"hnuser\">inopinatus</a>",
      "text": "inopinatus"
    },
    {
      "id": 106,
      "url": "https://news.ycombinator.com/item?id=41532069",
      "html": "<a href=\"item?id=41532069\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 107,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 108,
      "url": "https://news.ycombinator.com/item?id=41527675#41531697",
      "html": "<a href=\"#41531697\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 109,
      "url": "https://news.ycombinator.com/item?id=41527675#41528917",
      "html": "<a href=\"#41528917\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 110,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41532069\" n=\"2\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 111,
      "url": "https://news.ycombinator.com/reply?id=41532069&goto=item%3Fid%3D41527675%2341532069",
      "html": "<a href=\"reply?id=41532069&amp;goto=item%3Fid%3D41527675%2341532069\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 112,
      "url": "https://news.ycombinator.com/vote?id=41536223&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41536223\" href=\"vote?id=41536223&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 113,
      "url": "https://news.ycombinator.com/user?id=astrange",
      "html": "<a href=\"user?id=astrange\" class=\"hnuser\">astrange</a>",
      "text": "astrange"
    },
    {
      "id": 114,
      "url": "https://news.ycombinator.com/item?id=41536223",
      "html": "<a href=\"item?id=41536223\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 115,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 116,
      "url": "https://news.ycombinator.com/item?id=41527675#41532069",
      "html": "<a href=\"#41532069\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 117,
      "url": "https://news.ycombinator.com/item?id=41527675#41528917",
      "html": "<a href=\"#41528917\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 118,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41536223\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 119,
      "url": "https://news.ycombinator.com/reply?id=41536223&goto=item%3Fid%3D41527675%2341536223",
      "html": "<a href=\"reply?id=41536223&amp;goto=item%3Fid%3D41527675%2341536223\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 120,
      "url": "https://news.ycombinator.com/vote?id=41528917&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41528917\" href=\"vote?id=41528917&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 121,
      "url": "https://news.ycombinator.com/user?id=electricshampo1",
      "html": "<a href=\"user?id=electricshampo1\" class=\"hnuser\">electricshampo1</a>",
      "text": "electricshampo1"
    },
    {
      "id": 122,
      "url": "https://news.ycombinator.com/item?id=41528917",
      "html": "<a href=\"item?id=41528917\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 123,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 124,
      "url": "https://news.ycombinator.com/item?id=41527675#41532069",
      "html": "<a href=\"#41532069\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 125,
      "url": "https://news.ycombinator.com/item?id=41527675#41530161",
      "html": "<a href=\"#41530161\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 126,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41528917\" n=\"6\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 127,
      "url": "https://news.ycombinator.com/reply?id=41528917&goto=item%3Fid%3D41527675%2341528917",
      "html": "<a href=\"reply?id=41528917&amp;goto=item%3Fid%3D41527675%2341528917\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 128,
      "url": "https://news.ycombinator.com/vote?id=41531700&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41531700\" href=\"vote?id=41531700&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 129,
      "url": "https://news.ycombinator.com/user?id=dhx",
      "html": "<a href=\"user?id=dhx\" class=\"hnuser\">dhx</a>",
      "text": "dhx"
    },
    {
      "id": 130,
      "url": "https://news.ycombinator.com/item?id=41531700",
      "html": "<a href=\"item?id=41531700\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 131,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 132,
      "url": "https://news.ycombinator.com/item?id=41527675#41528917",
      "html": "<a href=\"#41528917\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 133,
      "url": "https://news.ycombinator.com/item?id=41527675#41530516",
      "html": "<a href=\"#41530516\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 134,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41531700\" n=\"4\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 135,
      "url": "https://github.com/firedancer-io/firedancer/blob/main/src/ballet/ed25519/fd_curve25519_secure.c",
      "html": "<a href=\"https://github.com/firedancer-io/firedancer/blob/main/src/ballet/ed25519/fd_curve25519_secure.c\">https://github.com/firedancer-io/firedancer/blob/main/src/ba...</a>",
      "text": "https://github.com/firedancer-io/firedancer/blob/main/src/ba..."
    },
    {
      "id": 136,
      "url": "https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication#Constant_time_Montgomery_ladder",
      "html": "<a href=\"https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication#Constant_time_Montgomery_ladder\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplic...</a>",
      "text": "https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplic..."
    },
    {
      "id": 137,
      "url": "https://eprint.iacr.org/2023/1713",
      "html": "<a href=\"https://eprint.iacr.org/2023/1713\" rel=\"nofollow\">https://eprint.iacr.org/2023/1713</a>",
      "text": "https://eprint.iacr.org/2023/1713"
    },
    {
      "id": 138,
      "url": "https://libsodium.gitbook.io/doc/internals#security-first",
      "html": "<a href=\"https://libsodium.gitbook.io/doc/internals#security-first\" rel=\"nofollow\">https://libsodium.gitbook.io/doc/internals#security-first</a>",
      "text": "https://libsodium.gitbook.io/doc/internals#security-first"
    },
    {
      "id": 139,
      "url": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/crypto/ecc.c",
      "html": "<a href=\"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/crypto/ecc.c\" rel=\"nofollow\">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/lin...</a>",
      "text": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/lin..."
    },
    {
      "id": 140,
      "url": "https://news.ycombinator.com/reply?id=41531700&goto=item%3Fid%3D41527675%2341531700",
      "html": "<a href=\"reply?id=41531700&amp;goto=item%3Fid%3D41527675%2341531700\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 141,
      "url": "https://news.ycombinator.com/vote?id=41531772&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41531772\" href=\"vote?id=41531772&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 142,
      "url": "https://news.ycombinator.com/user?id=tptacek",
      "html": "<a href=\"user?id=tptacek\" class=\"hnuser\">tptacek</a>",
      "text": "tptacek"
    },
    {
      "id": 143,
      "url": "https://news.ycombinator.com/item?id=41531772",
      "html": "<a href=\"item?id=41531772\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 144,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 145,
      "url": "https://news.ycombinator.com/item?id=41527675#41531700",
      "html": "<a href=\"#41531700\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 146,
      "url": "https://news.ycombinator.com/item?id=41527675#41530516",
      "html": "<a href=\"#41530516\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 147,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41531772\" n=\"3\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 148,
      "url": "https://news.ycombinator.com/reply?id=41531772&goto=item%3Fid%3D41527675%2341531772",
      "html": "<a href=\"reply?id=41531772&amp;goto=item%3Fid%3D41527675%2341531772\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 149,
      "url": "https://news.ycombinator.com/vote?id=41532199&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41532199\" href=\"vote?id=41532199&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 150,
      "url": "https://news.ycombinator.com/user?id=dhx",
      "html": "<a href=\"user?id=dhx\" class=\"hnuser\">dhx</a>",
      "text": "dhx"
    },
    {
      "id": 151,
      "url": "https://news.ycombinator.com/item?id=41532199",
      "html": "<a href=\"item?id=41532199\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 152,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 153,
      "url": "https://news.ycombinator.com/item?id=41527675#41531772",
      "html": "<a href=\"#41531772\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 154,
      "url": "https://news.ycombinator.com/item?id=41527675#41530516",
      "html": "<a href=\"#41530516\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 155,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41532199\" n=\"2\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 156,
      "url": "https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-zero_005fcall_005fused_005fregs-function-attribute",
      "html": "<a href=\"https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-zero_005fcall_005fused_005fregs-function-attribute\" rel=\"nofollow\">https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attribute...</a>",
      "text": "https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attribute..."
    },
    {
      "id": 157,
      "url": "https://clang.llvm.org/docs/AttributeReference.html#zero-call-used-regs",
      "html": "<a href=\"https://clang.llvm.org/docs/AttributeReference.html#zero-call-used-regs\" rel=\"nofollow\">https://clang.llvm.org/docs/AttributeReference.html#zero-cal...</a>",
      "text": "https://clang.llvm.org/docs/AttributeReference.html#zero-cal..."
    },
    {
      "id": 158,
      "url": "https://github.com/openssl/openssl/discussions/24321",
      "html": "<a href=\"https://github.com/openssl/openssl/discussions/24321\">https://github.com/openssl/openssl/discussions/24321</a>",
      "text": "https://github.com/openssl/openssl/discussions/24321"
    },
    {
      "id": 159,
      "url": "https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Common-Type-Attributes.html#index-strub-type-attribute",
      "html": "<a href=\"https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Common-Type-Attributes.html#index-strub-type-attribute\" rel=\"nofollow\">https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Common-Type-At...</a>",
      "text": "https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Common-Type-At..."
    },
    {
      "id": 160,
      "url": "https://gcc.gnu.org/onlinedocs/gcc/Stack-Scrubbing.html",
      "html": "<a href=\"https://gcc.gnu.org/onlinedocs/gcc/Stack-Scrubbing.html\" rel=\"nofollow\">https://gcc.gnu.org/onlinedocs/gcc/Stack-Scrubbing.html</a>",
      "text": "https://gcc.gnu.org/onlinedocs/gcc/Stack-Scrubbing.html"
    },
    {
      "id": 161,
      "url": "https://eprint.iacr.org/2023/1713.pdf",
      "html": "<a href=\"https://eprint.iacr.org/2023/1713.pdf\" rel=\"nofollow\">https://eprint.iacr.org/2023/1713.pdf</a>",
      "text": "https://eprint.iacr.org/2023/1713.pdf"
    },
    {
      "id": 162,
      "url": "https://www.phoronix.com/review/zero-used-regs/5",
      "html": "<a href=\"https://www.phoronix.com/review/zero-used-regs/5\" rel=\"nofollow\">https://www.phoronix.com/review/zero-used-regs/5</a>",
      "text": "https://www.phoronix.com/review/zero-used-regs/5"
    },
    {
      "id": 163,
      "url": "https://lore.kernel.org/lkml/20210505191804.4015873-1-keescook@chromium.org/",
      "html": "<a href=\"https://lore.kernel.org/lkml/20210505191804.4015873-1-keescook@chromium.org/\" rel=\"nofollow\">https://lore.kernel.org/lkml/20210505191804.4015873-1-keesco...</a>",
      "text": "https://lore.kernel.org/lkml/20210505191804.4015873-1-keesco..."
    },
    {
      "id": 164,
      "url": "https://github.com/firedancer-io/firedancer/blob/master/src/util/fd_util_base.h",
      "html": "<a href=\"https://github.com/firedancer-io/firedancer/blob/master/src/util/fd_util_base.h\">https://github.com/firedancer-io/firedancer/blob/master/src/...</a>",
      "text": "https://github.com/firedancer-io/firedancer/blob/master/src/..."
    },
    {
      "id": 165,
      "url": "https://news.ycombinator.com/reply?id=41532199&goto=item%3Fid%3D41527675%2341532199",
      "html": "<a href=\"reply?id=41532199&amp;goto=item%3Fid%3D41527675%2341532199\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 166,
      "url": "https://news.ycombinator.com/vote?id=41532761&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41532761\" href=\"vote?id=41532761&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 167,
      "url": "https://news.ycombinator.com/user?id=jandrese",
      "html": "<a href=\"user?id=jandrese\" class=\"hnuser\">jandrese</a>",
      "text": "jandrese"
    },
    {
      "id": 168,
      "url": "https://news.ycombinator.com/item?id=41532761",
      "html": "<a href=\"item?id=41532761\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 169,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 170,
      "url": "https://news.ycombinator.com/item?id=41527675#41532199",
      "html": "<a href=\"#41532199\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 171,
      "url": "https://news.ycombinator.com/item?id=41527675#41530516",
      "html": "<a href=\"#41530516\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 172,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41532761\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 173,
      "url": "https://news.ycombinator.com/reply?id=41532761&goto=item%3Fid%3D41527675%2341532761",
      "html": "<a href=\"reply?id=41532761&amp;goto=item%3Fid%3D41527675%2341532761\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 174,
      "url": "https://news.ycombinator.com/vote?id=41530516&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41530516\" href=\"vote?id=41530516&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 175,
      "url": "https://news.ycombinator.com/user?id=SEJeff",
      "html": "<a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a>",
      "text": "SEJeff"
    },
    {
      "id": 176,
      "url": "https://news.ycombinator.com/item?id=41530516",
      "html": "<a href=\"item?id=41530516\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 177,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 178,
      "url": "https://news.ycombinator.com/item?id=41527675#41528917",
      "html": "<a href=\"#41528917\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 179,
      "url": "https://news.ycombinator.com/item?id=41527675#41531700",
      "html": "<a href=\"#41531700\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 180,
      "url": "https://news.ycombinator.com/item?id=41527675#41530161",
      "html": "<a href=\"#41530161\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 181,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41530516\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 182,
      "url": "https://news.ycombinator.com/reply?id=41530516&goto=item%3Fid%3D41527675%2341530516",
      "html": "<a href=\"reply?id=41530516&amp;goto=item%3Fid%3D41527675%2341530516\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 183,
      "url": "https://news.ycombinator.com/vote?id=41530161&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41530161\" href=\"vote?id=41530161&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 184,
      "url": "https://news.ycombinator.com/user?id=pantalaimon",
      "html": "<a href=\"user?id=pantalaimon\" class=\"hnuser\">pantalaimon</a>",
      "text": "pantalaimon"
    },
    {
      "id": 185,
      "url": "https://news.ycombinator.com/item?id=41530161",
      "html": "<a href=\"item?id=41530161\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 186,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 187,
      "url": "https://news.ycombinator.com/item?id=41527675#41528917",
      "html": "<a href=\"#41528917\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 188,
      "url": "https://news.ycombinator.com/item?id=41527675#41529425",
      "html": "<a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 189,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41530161\" n=\"8\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 190,
      "url": "https://news.ycombinator.com/reply?id=41530161&goto=item%3Fid%3D41527675%2341530161",
      "html": "<a href=\"reply?id=41530161&amp;goto=item%3Fid%3D41527675%2341530161\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 191,
      "url": "https://news.ycombinator.com/vote?id=41530509&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41530509\" href=\"vote?id=41530509&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 192,
      "url": "https://news.ycombinator.com/user?id=SEJeff",
      "html": "<a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a>",
      "text": "SEJeff"
    },
    {
      "id": 193,
      "url": "https://news.ycombinator.com/item?id=41530509",
      "html": "<a href=\"item?id=41530509\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 194,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 195,
      "url": "https://news.ycombinator.com/item?id=41527675#41530161",
      "html": "<a href=\"#41530161\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 196,
      "url": "https://news.ycombinator.com/item?id=41527675#41529425",
      "html": "<a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 197,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41530509\" n=\"7\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 198,
      "url": "https://news.ycombinator.com/reply?id=41530509&goto=item%3Fid%3D41527675%2341530509",
      "html": "<a href=\"reply?id=41530509&amp;goto=item%3Fid%3D41527675%2341530509\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 199,
      "url": "https://news.ycombinator.com/vote?id=41531439&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41531439\" href=\"vote?id=41531439&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 200,
      "url": "https://news.ycombinator.com/user?id=scrlk",
      "html": "<a href=\"user?id=scrlk\" class=\"hnuser\">scrlk</a>",
      "text": "scrlk"
    },
    {
      "id": 201,
      "url": "https://news.ycombinator.com/item?id=41531439",
      "html": "<a href=\"item?id=41531439\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 202,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 203,
      "url": "https://news.ycombinator.com/item?id=41527675#41530509",
      "html": "<a href=\"#41530509\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 204,
      "url": "https://news.ycombinator.com/item?id=41527675#41532616",
      "html": "<a href=\"#41532616\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 205,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41531439\" n=\"4\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 206,
      "url": "https://news.ycombinator.com/reply?id=41531439&goto=item%3Fid%3D41527675%2341531439",
      "html": "<a href=\"reply?id=41531439&amp;goto=item%3Fid%3D41527675%2341531439\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 207,
      "url": "https://news.ycombinator.com/vote?id=41532404&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41532404\" href=\"vote?id=41532404&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 208,
      "url": "https://news.ycombinator.com/user?id=SEJeff",
      "html": "<a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a>",
      "text": "SEJeff"
    },
    {
      "id": 209,
      "url": "https://news.ycombinator.com/item?id=41532404",
      "html": "<a href=\"item?id=41532404\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 210,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 211,
      "url": "https://news.ycombinator.com/item?id=41527675#41531439",
      "html": "<a href=\"#41531439\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 212,
      "url": "https://news.ycombinator.com/item?id=41527675#41532616",
      "html": "<a href=\"#41532616\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 213,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41532404\" n=\"3\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 214,
      "url": "https://news.ycombinator.com/reply?id=41532404&goto=item%3Fid%3D41527675%2341532404",
      "html": "<a href=\"reply?id=41532404&amp;goto=item%3Fid%3D41527675%2341532404\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 215,
      "url": "https://news.ycombinator.com/vote?id=41534457&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41534457\" href=\"vote?id=41534457&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 216,
      "url": "https://news.ycombinator.com/user?id=sangnoir",
      "html": "<a href=\"user?id=sangnoir\" class=\"hnuser\">sangnoir</a>",
      "text": "sangnoir"
    },
    {
      "id": 217,
      "url": "https://news.ycombinator.com/item?id=41534457",
      "html": "<a href=\"item?id=41534457\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 218,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 219,
      "url": "https://news.ycombinator.com/item?id=41527675#41532404",
      "html": "<a href=\"#41532404\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 220,
      "url": "https://news.ycombinator.com/item?id=41527675#41532616",
      "html": "<a href=\"#41532616\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 221,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41534457\" n=\"2\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 222,
      "url": "https://news.ycombinator.com/reply?id=41534457&goto=item%3Fid%3D41527675%2341534457",
      "html": "<a href=\"reply?id=41534457&amp;goto=item%3Fid%3D41527675%2341534457\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 223,
      "url": "https://news.ycombinator.com/vote?id=41535913&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41535913\" href=\"vote?id=41535913&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 224,
      "url": "https://news.ycombinator.com/user?id=SEJeff",
      "html": "<a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a>",
      "text": "SEJeff"
    },
    {
      "id": 225,
      "url": "https://news.ycombinator.com/item?id=41535913",
      "html": "<a href=\"item?id=41535913\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 226,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 227,
      "url": "https://news.ycombinator.com/item?id=41527675#41534457",
      "html": "<a href=\"#41534457\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 228,
      "url": "https://news.ycombinator.com/item?id=41527675#41532616",
      "html": "<a href=\"#41532616\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 229,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41535913\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 230,
      "url": "https://news.ycombinator.com/reply?id=41535913&goto=item%3Fid%3D41527675%2341535913",
      "html": "<a href=\"reply?id=41535913&amp;goto=item%3Fid%3D41527675%2341535913\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 231,
      "url": "https://news.ycombinator.com/vote?id=41532616&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41532616\" href=\"vote?id=41532616&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 232,
      "url": "https://news.ycombinator.com/user?id=caned",
      "html": "<a href=\"user?id=caned\" class=\"hnuser\">caned</a>",
      "text": "caned"
    },
    {
      "id": 233,
      "url": "https://news.ycombinator.com/item?id=41532616",
      "html": "<a href=\"item?id=41532616\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 234,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 235,
      "url": "https://news.ycombinator.com/item?id=41527675#41530509",
      "html": "<a href=\"#41530509\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 236,
      "url": "https://news.ycombinator.com/item?id=41527675#41531439",
      "html": "<a href=\"#41531439\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 237,
      "url": "https://news.ycombinator.com/item?id=41527675#41529425",
      "html": "<a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 238,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41532616\" n=\"2\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 239,
      "url": "https://news.ycombinator.com/reply?id=41532616&goto=item%3Fid%3D41527675%2341532616",
      "html": "<a href=\"reply?id=41532616&amp;goto=item%3Fid%3D41527675%2341532616\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 240,
      "url": "https://news.ycombinator.com/vote?id=41533002&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41533002\" href=\"vote?id=41533002&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 241,
      "url": "https://news.ycombinator.com/user?id=SEJeff",
      "html": "<a href=\"user?id=SEJeff\" class=\"hnuser\">SEJeff</a>",
      "text": "SEJeff"
    },
    {
      "id": 242,
      "url": "https://news.ycombinator.com/item?id=41533002",
      "html": "<a href=\"item?id=41533002\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 243,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 244,
      "url": "https://news.ycombinator.com/item?id=41527675#41532616",
      "html": "<a href=\"#41532616\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 245,
      "url": "https://news.ycombinator.com/item?id=41527675#41529425",
      "html": "<a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 246,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41533002\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 247,
      "url": "https://news.ycombinator.com/reply?id=41533002&goto=item%3Fid%3D41527675%2341533002",
      "html": "<a href=\"reply?id=41533002&amp;goto=item%3Fid%3D41527675%2341533002\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 248,
      "url": "https://news.ycombinator.com/vote?id=41529425&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41529425\" href=\"vote?id=41529425&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 249,
      "url": "https://news.ycombinator.com/user?id=4gotunameagain",
      "html": "<a href=\"user?id=4gotunameagain\" class=\"hnuser\">4gotunameagain</a>",
      "text": "4gotunameagain"
    },
    {
      "id": 250,
      "url": "https://news.ycombinator.com/item?id=41529425",
      "html": "<a href=\"item?id=41529425\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 251,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 252,
      "url": "https://news.ycombinator.com/item?id=41527675#41530161",
      "html": "<a href=\"#41530161\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 253,
      "url": "https://news.ycombinator.com/item?id=41527675#41532959",
      "html": "<a href=\"#41532959\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 254,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41529425\" n=\"11\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 255,
      "url": "https://news.ycombinator.com/reply?id=41529425&goto=item%3Fid%3D41527675%2341529425",
      "html": "<a href=\"reply?id=41529425&amp;goto=item%3Fid%3D41527675%2341529425\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 256,
      "url": "https://news.ycombinator.com/vote?id=41529465&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41529465\" href=\"vote?id=41529465&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 257,
      "url": "https://news.ycombinator.com/user?id=posnet",
      "html": "<a href=\"user?id=posnet\" class=\"hnuser\">posnet</a>",
      "text": "posnet"
    },
    {
      "id": 258,
      "url": "https://news.ycombinator.com/item?id=41529465",
      "html": "<a href=\"item?id=41529465\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 259,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 260,
      "url": "https://news.ycombinator.com/item?id=41527675#41529425",
      "html": "<a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 261,
      "url": "https://news.ycombinator.com/item?id=41527675#41532000",
      "html": "<a href=\"#41532000\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 262,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41529465\" n=\"6\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 263,
      "url": "https://news.ycombinator.com/reply?id=41529465&goto=item%3Fid%3D41527675%2341529465",
      "html": "<a href=\"reply?id=41529465&amp;goto=item%3Fid%3D41527675%2341529465\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 264,
      "url": "https://news.ycombinator.com/vote?id=41536712&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41536712\" href=\"vote?id=41536712&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 265,
      "url": "https://news.ycombinator.com/user?id=geodel",
      "html": "<a href=\"user?id=geodel\" class=\"hnuser\">geodel</a>",
      "text": "geodel"
    },
    {
      "id": 266,
      "url": "https://news.ycombinator.com/item?id=41536712",
      "html": "<a href=\"item?id=41536712\">23 hours ago</a>",
      "text": "23 hours ago"
    },
    {
      "id": 267,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 268,
      "url": "https://news.ycombinator.com/item?id=41527675#41529465",
      "html": "<a href=\"#41529465\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 269,
      "url": "https://news.ycombinator.com/item?id=41527675#41536240",
      "html": "<a href=\"#41536240\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 270,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41536712\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 271,
      "url": "https://news.ycombinator.com/reply?id=41536712&goto=item%3Fid%3D41527675%2341536712",
      "html": "<a href=\"reply?id=41536712&amp;goto=item%3Fid%3D41527675%2341536712\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 272,
      "url": "https://news.ycombinator.com/vote?id=41536240&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41536240\" href=\"vote?id=41536240&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 273,
      "url": "https://news.ycombinator.com/user?id=astrange",
      "html": "<a href=\"user?id=astrange\" class=\"hnuser\">astrange</a>",
      "text": "astrange"
    },
    {
      "id": 274,
      "url": "https://news.ycombinator.com/item?id=41536240",
      "html": "<a href=\"item?id=41536240\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 275,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 276,
      "url": "https://news.ycombinator.com/item?id=41527675#41529465",
      "html": "<a href=\"#41529465\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 277,
      "url": "https://news.ycombinator.com/item?id=41527675#41536712",
      "html": "<a href=\"#41536712\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 278,
      "url": "https://news.ycombinator.com/item?id=41527675#41530201",
      "html": "<a href=\"#41530201\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 279,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41536240\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 280,
      "url": "https://news.ycombinator.com/reply?id=41536240&goto=item%3Fid%3D41527675%2341536240",
      "html": "<a href=\"reply?id=41536240&amp;goto=item%3Fid%3D41527675%2341536240\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 281,
      "url": "https://news.ycombinator.com/vote?id=41530201&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41530201\" href=\"vote?id=41530201&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 282,
      "url": "https://news.ycombinator.com/user?id=vladms",
      "html": "<a href=\"user?id=vladms\" class=\"hnuser\">vladms</a>",
      "text": "vladms"
    },
    {
      "id": 283,
      "url": "https://news.ycombinator.com/item?id=41530201",
      "html": "<a href=\"item?id=41530201\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 284,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 285,
      "url": "https://news.ycombinator.com/item?id=41527675#41529465",
      "html": "<a href=\"#41529465\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 286,
      "url": "https://news.ycombinator.com/item?id=41527675#41536240",
      "html": "<a href=\"#41536240\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 287,
      "url": "https://news.ycombinator.com/item?id=41527675#41529474",
      "html": "<a href=\"#41529474\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 288,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41530201\" n=\"2\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 289,
      "url": "https://news.ycombinator.com/reply?id=41530201&goto=item%3Fid%3D41527675%2341530201",
      "html": "<a href=\"reply?id=41530201&amp;goto=item%3Fid%3D41527675%2341530201\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 290,
      "url": "https://news.ycombinator.com/vote?id=41536721&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41536721\" href=\"vote?id=41536721&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 291,
      "url": "https://news.ycombinator.com/user?id=geodel",
      "html": "<a href=\"user?id=geodel\" class=\"hnuser\">geodel</a>",
      "text": "geodel"
    },
    {
      "id": 292,
      "url": "https://news.ycombinator.com/item?id=41536721",
      "html": "<a href=\"item?id=41536721\">23 hours ago</a>",
      "text": "23 hours ago"
    },
    {
      "id": 293,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 294,
      "url": "https://news.ycombinator.com/item?id=41527675#41530201",
      "html": "<a href=\"#41530201\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 295,
      "url": "https://news.ycombinator.com/item?id=41527675#41529474",
      "html": "<a href=\"#41529474\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 296,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41536721\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 297,
      "url": "https://news.ycombinator.com/reply?id=41536721&goto=item%3Fid%3D41527675%2341536721",
      "html": "<a href=\"reply?id=41536721&amp;goto=item%3Fid%3D41527675%2341536721\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 298,
      "url": "https://news.ycombinator.com/vote?id=41529474&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41529474\" href=\"vote?id=41529474&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 299,
      "url": "https://news.ycombinator.com/user?id=4gotunameagain",
      "html": "<a href=\"user?id=4gotunameagain\" class=\"hnuser\">4gotunameagain</a>",
      "text": "4gotunameagain"
    },
    {
      "id": 300,
      "url": "https://news.ycombinator.com/item?id=41529474",
      "html": "<a href=\"item?id=41529474\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 301,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 302,
      "url": "https://news.ycombinator.com/item?id=41527675#41529465",
      "html": "<a href=\"#41529465\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 303,
      "url": "https://news.ycombinator.com/item?id=41527675#41530201",
      "html": "<a href=\"#41530201\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 304,
      "url": "https://news.ycombinator.com/item?id=41527675#41532000",
      "html": "<a href=\"#41532000\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 305,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41529474\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 306,
      "url": "https://news.ycombinator.com/reply?id=41529474&goto=item%3Fid%3D41527675%2341529474",
      "html": "<a href=\"reply?id=41529474&amp;goto=item%3Fid%3D41527675%2341529474\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 307,
      "url": "https://news.ycombinator.com/vote?id=41532000&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41532000\" href=\"vote?id=41532000&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 308,
      "url": "https://news.ycombinator.com/user?id=toast0",
      "html": "<a href=\"user?id=toast0\" class=\"hnuser\">toast0</a>",
      "text": "toast0"
    },
    {
      "id": 309,
      "url": "https://news.ycombinator.com/item?id=41532000",
      "html": "<a href=\"item?id=41532000\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 310,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 311,
      "url": "https://news.ycombinator.com/item?id=41527675#41529425",
      "html": "<a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 312,
      "url": "https://news.ycombinator.com/item?id=41527675#41529465",
      "html": "<a href=\"#41529465\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 313,
      "url": "https://news.ycombinator.com/item?id=41527675#41530663",
      "html": "<a href=\"#41530663\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 314,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41532000\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 315,
      "url": "https://news.ycombinator.com/reply?id=41532000&goto=item%3Fid%3D41527675%2341532000",
      "html": "<a href=\"reply?id=41532000&amp;goto=item%3Fid%3D41527675%2341532000\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 316,
      "url": "https://news.ycombinator.com/vote?id=41530663&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41530663\" href=\"vote?id=41530663&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 317,
      "url": "https://news.ycombinator.com/user?id=appendix-rock",
      "html": "<a href=\"user?id=appendix-rock\" class=\"hnuser\">appendix-rock</a>",
      "text": "appendix-rock"
    },
    {
      "id": 318,
      "url": "https://news.ycombinator.com/item?id=41530663",
      "html": "<a href=\"item?id=41530663\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 319,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 320,
      "url": "https://news.ycombinator.com/item?id=41527675#41529425",
      "html": "<a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 321,
      "url": "https://news.ycombinator.com/item?id=41527675#41532000",
      "html": "<a href=\"#41532000\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 322,
      "url": "https://news.ycombinator.com/item?id=41527675#41530797",
      "html": "<a href=\"#41530797\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 323,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41530663\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 324,
      "url": "https://news.ycombinator.com/reply?id=41530663&goto=item%3Fid%3D41527675%2341530663",
      "html": "<a href=\"reply?id=41530663&amp;goto=item%3Fid%3D41527675%2341530663\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 325,
      "url": "https://news.ycombinator.com/vote?id=41530797&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41530797\" href=\"vote?id=41530797&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 326,
      "url": "https://news.ycombinator.com/user?id=almostgotcaught",
      "html": "<a href=\"user?id=almostgotcaught\" class=\"hnuser\">almostgotcaught</a>",
      "text": "almostgotcaught"
    },
    {
      "id": 327,
      "url": "https://news.ycombinator.com/item?id=41530797",
      "html": "<a href=\"item?id=41530797\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 328,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 329,
      "url": "https://news.ycombinator.com/item?id=41527675#41529425",
      "html": "<a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 330,
      "url": "https://news.ycombinator.com/item?id=41527675#41530663",
      "html": "<a href=\"#41530663\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 331,
      "url": "https://news.ycombinator.com/item?id=41527675#41532959",
      "html": "<a href=\"#41532959\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 332,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41530797\" n=\"2\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 333,
      "url": "https://news.ycombinator.com/reply?id=41530797&goto=item%3Fid%3D41527675%2341530797",
      "html": "<a href=\"reply?id=41530797&amp;goto=item%3Fid%3D41527675%2341530797\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 334,
      "url": "https://news.ycombinator.com/vote?id=41533370&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41533370\" href=\"vote?id=41533370&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 335,
      "url": "https://news.ycombinator.com/user?id=XorNot",
      "html": "<a href=\"user?id=XorNot\" class=\"hnuser\">XorNot</a>",
      "text": "XorNot"
    },
    {
      "id": 336,
      "url": "https://news.ycombinator.com/item?id=41533370",
      "html": "<a href=\"item?id=41533370\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 337,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 338,
      "url": "https://news.ycombinator.com/item?id=41527675#41530797",
      "html": "<a href=\"#41530797\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 339,
      "url": "https://news.ycombinator.com/item?id=41527675#41532959",
      "html": "<a href=\"#41532959\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 340,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41533370\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 341,
      "url": "https://news.ycombinator.com/reply?id=41533370&goto=item%3Fid%3D41527675%2341533370",
      "html": "<a href=\"reply?id=41533370&amp;goto=item%3Fid%3D41527675%2341533370\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 342,
      "url": "https://news.ycombinator.com/vote?id=41532959&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41532959\" href=\"vote?id=41532959&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 343,
      "url": "https://news.ycombinator.com/user?id=slt2021",
      "html": "<a href=\"user?id=slt2021\" class=\"hnuser\">slt2021</a>",
      "text": "slt2021"
    },
    {
      "id": 344,
      "url": "https://news.ycombinator.com/item?id=41532959",
      "html": "<a href=\"item?id=41532959\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 345,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 346,
      "url": "https://news.ycombinator.com/item?id=41527675#41529425",
      "html": "<a href=\"#41529425\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 347,
      "url": "https://news.ycombinator.com/item?id=41527675#41533915",
      "html": "<a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 348,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41532959\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 349,
      "url": "https://news.ycombinator.com/reply?id=41532959&goto=item%3Fid%3D41527675%2341532959",
      "html": "<a href=\"reply?id=41532959&amp;goto=item%3Fid%3D41527675%2341532959\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 350,
      "url": "https://news.ycombinator.com/vote?id=41533915&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41533915\" href=\"vote?id=41533915&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 351,
      "url": "https://news.ycombinator.com/user?id=notfed",
      "html": "<a href=\"user?id=notfed\" class=\"hnuser\">notfed</a>",
      "text": "notfed"
    },
    {
      "id": 352,
      "url": "https://news.ycombinator.com/item?id=41533915",
      "html": "<a href=\"item?id=41533915\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 353,
      "url": "https://news.ycombinator.com/item?id=41527675#41528060",
      "html": "<a href=\"#41528060\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 354,
      "url": "https://news.ycombinator.com/item?id=41527675#41527884",
      "html": "<a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 355,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41533915\" n=\"6\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 356,
      "url": "https://news.ycombinator.com/reply?id=41533915&goto=item%3Fid%3D41527675%2341533915",
      "html": "<a href=\"reply?id=41533915&amp;goto=item%3Fid%3D41527675%2341533915\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 357,
      "url": "https://news.ycombinator.com/vote?id=41535328&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41535328\" href=\"vote?id=41535328&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 358,
      "url": "https://news.ycombinator.com/user?id=westurner",
      "html": "<a href=\"user?id=westurner\" class=\"hnuser\">westurner</a>",
      "text": "westurner"
    },
    {
      "id": 359,
      "url": "https://news.ycombinator.com/item?id=41535328",
      "html": "<a href=\"item?id=41535328\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 360,
      "url": "https://news.ycombinator.com/item?id=41527675#41533915",
      "html": "<a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 361,
      "url": "https://news.ycombinator.com/item?id=41527675#41527884",
      "html": "<a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 362,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41535328\" n=\"5\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 363,
      "url": "https://news.ycombinator.com/item?id=41534500",
      "html": "<a href=\"https://news.ycombinator.com/item?id=41534500\">https://news.ycombinator.com/item?id=41534500</a>",
      "text": "https://news.ycombinator.com/item?id=41534500"
    },
    {
      "id": 364,
      "url": "https://www.google.com/search?q=X25519Kyber768Draft00",
      "html": "<a href=\"https://www.google.com/search?q=X25519Kyber768Draft00\" rel=\"nofollow\">https://www.google.com/search?q=X25519Kyber768Draft00</a>",
      "text": "https://www.google.com/search?q=X25519Kyber768Draft00"
    },
    {
      "id": 365,
      "url": "https://news.ycombinator.com/reply?id=41535328&goto=item%3Fid%3D41527675%2341535328",
      "html": "<a href=\"reply?id=41535328&amp;goto=item%3Fid%3D41527675%2341535328\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 366,
      "url": "https://news.ycombinator.com/vote?id=41535692&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41535692\" href=\"vote?id=41535692&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 367,
      "url": "https://news.ycombinator.com/user?id=notfed",
      "html": "<a href=\"user?id=notfed\" class=\"hnuser\">notfed</a>",
      "text": "notfed"
    },
    {
      "id": 368,
      "url": "https://news.ycombinator.com/item?id=41535692",
      "html": "<a href=\"item?id=41535692\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 369,
      "url": "https://news.ycombinator.com/item?id=41527675#41533915",
      "html": "<a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 370,
      "url": "https://news.ycombinator.com/item?id=41527675#41535328",
      "html": "<a href=\"#41535328\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 371,
      "url": "https://news.ycombinator.com/item?id=41527675#41527884",
      "html": "<a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 372,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41535692\" n=\"4\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 373,
      "url": "https://news.ycombinator.com/reply?id=41535692&goto=item%3Fid%3D41527675%2341535692",
      "html": "<a href=\"reply?id=41535692&amp;goto=item%3Fid%3D41527675%2341535692\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 374,
      "url": "https://news.ycombinator.com/vote?id=41535866&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41535866\" href=\"vote?id=41535866&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 375,
      "url": "https://news.ycombinator.com/user?id=westurner",
      "html": "<a href=\"user?id=westurner\" class=\"hnuser\">westurner</a>",
      "text": "westurner"
    },
    {
      "id": 376,
      "url": "https://news.ycombinator.com/item?id=41535866",
      "html": "<a href=\"item?id=41535866\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 377,
      "url": "https://news.ycombinator.com/item?id=41527675#41533915",
      "html": "<a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 378,
      "url": "https://news.ycombinator.com/item?id=41527675#41535692",
      "html": "<a href=\"#41535692\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 379,
      "url": "https://news.ycombinator.com/item?id=41527675#41527884",
      "html": "<a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 380,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41535866\" n=\"3\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 381,
      "url": "https://news.ycombinator.com/item?id=41456447#41456774",
      "html": "<a href=\"https://news.ycombinator.com/item?id=41456447#41456774\">https://news.ycombinator.com/item?id=41456447#41456774</a>",
      "text": "https://news.ycombinator.com/item?id=41456447#41456774"
    },
    {
      "id": 382,
      "url": "https://news.ycombinator.com/reply?id=41535866&goto=item%3Fid%3D41527675%2341535866",
      "html": "<a href=\"reply?id=41535866&amp;goto=item%3Fid%3D41527675%2341535866\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 383,
      "url": "https://news.ycombinator.com/vote?id=41541179&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41541179\" href=\"vote?id=41541179&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 384,
      "url": "https://news.ycombinator.com/user?id=notfed",
      "html": "<a href=\"user?id=notfed\" class=\"hnuser\">notfed</a>",
      "text": "notfed"
    },
    {
      "id": 385,
      "url": "https://news.ycombinator.com/item?id=41541179",
      "html": "<a href=\"item?id=41541179\">7 hours ago</a>",
      "text": "7 hours ago"
    },
    {
      "id": 386,
      "url": "https://news.ycombinator.com/item?id=41527675#41533915",
      "html": "<a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 387,
      "url": "https://news.ycombinator.com/item?id=41527675#41535866",
      "html": "<a href=\"#41535866\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 388,
      "url": "https://news.ycombinator.com/item?id=41527675#41527884",
      "html": "<a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 389,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41541179\" n=\"2\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 390,
      "url": "https://news.ycombinator.com/reply?id=41541179&goto=item%3Fid%3D41527675%2341541179",
      "html": "<a href=\"reply?id=41541179&amp;goto=item%3Fid%3D41527675%2341541179\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 391,
      "url": "https://news.ycombinator.com/vote?id=41541707&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41541707\" href=\"vote?id=41541707&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 392,
      "url": "https://news.ycombinator.com/user?id=westurner",
      "html": "<a href=\"user?id=westurner\" class=\"hnuser\">westurner</a>",
      "text": "westurner"
    },
    {
      "id": 393,
      "url": "https://news.ycombinator.com/item?id=41541707",
      "html": "<a href=\"item?id=41541707\">6 hours ago</a>",
      "text": "6 hours ago"
    },
    {
      "id": 394,
      "url": "https://news.ycombinator.com/item?id=41527675#41533915",
      "html": "<a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 395,
      "url": "https://news.ycombinator.com/item?id=41527675#41541179",
      "html": "<a href=\"#41541179\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 396,
      "url": "https://news.ycombinator.com/item?id=41527675#41527884",
      "html": "<a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 397,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41541707\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 398,
      "url": "https://news.ycombinator.com/reply?id=41541707&goto=item%3Fid%3D41527675%2341541707",
      "html": "<a href=\"reply?id=41541707&amp;goto=item%3Fid%3D41527675%2341541707\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 399,
      "url": "https://news.ycombinator.com/vote?id=41527884&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41527884\" href=\"vote?id=41527884&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 400,
      "url": "https://news.ycombinator.com/user?id=nanolith",
      "html": "<a href=\"user?id=nanolith\" class=\"hnuser\">nanolith</a>",
      "text": "nanolith"
    },
    {
      "id": 401,
      "url": "https://news.ycombinator.com/item?id=41527884",
      "html": "<a href=\"item?id=41527884\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 402,
      "url": "https://news.ycombinator.com/item?id=41527675#41533915",
      "html": "<a href=\"#41533915\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 403,
      "url": "https://news.ycombinator.com/item?id=41527675#41532635",
      "html": "<a href=\"#41532635\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 404,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41527884\" n=\"2\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 405,
      "url": "https://news.ycombinator.com/reply?id=41527884&goto=item%3Fid%3D41527675%2341527884",
      "html": "<a href=\"reply?id=41527884&amp;goto=item%3Fid%3D41527675%2341527884\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 406,
      "url": "https://news.ycombinator.com/vote?id=41529633&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41529633\" href=\"vote?id=41529633&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 407,
      "url": "https://news.ycombinator.com/user?id=holowoodman",
      "html": "<a href=\"user?id=holowoodman\" class=\"hnuser\">holowoodman</a>",
      "text": "holowoodman"
    },
    {
      "id": 408,
      "url": "https://news.ycombinator.com/item?id=41529633",
      "html": "<a href=\"item?id=41529633\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 409,
      "url": "https://news.ycombinator.com/item?id=41527675#41527884",
      "html": "<a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 410,
      "url": "https://news.ycombinator.com/item?id=41527675#41532635",
      "html": "<a href=\"#41532635\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 411,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41529633\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 412,
      "url": "https://news.ycombinator.com/reply?id=41529633&goto=item%3Fid%3D41527675%2341529633",
      "html": "<a href=\"reply?id=41529633&amp;goto=item%3Fid%3D41527675%2341529633\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 413,
      "url": "https://news.ycombinator.com/vote?id=41532635&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41532635\" href=\"vote?id=41532635&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 414,
      "url": "https://news.ycombinator.com/user?id=aseipp",
      "html": "<a href=\"user?id=aseipp\" class=\"hnuser\">aseipp</a>",
      "text": "aseipp"
    },
    {
      "id": 415,
      "url": "https://news.ycombinator.com/item?id=41532635",
      "html": "<a href=\"item?id=41532635\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 416,
      "url": "https://news.ycombinator.com/item?id=41527675#41527884",
      "html": "<a href=\"#41527884\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 417,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 418,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41532635\" n=\"2\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 419,
      "url": "https://github.com/aws/aws-lc",
      "html": "<a href=\"https://github.com/aws/aws-lc\">https://github.com/aws/aws-lc</a>",
      "text": "https://github.com/aws/aws-lc"
    },
    {
      "id": 420,
      "url": "https://www.cl.cam.ac.uk/~jrh13/",
      "html": "<a href=\"https://www.cl.cam.ac.uk/~jrh13/\" rel=\"nofollow\">https://www.cl.cam.ac.uk/~jrh13/</a>",
      "text": "https://www.cl.cam.ac.uk/~jrh13/"
    },
    {
      "id": 421,
      "url": "https://news.ycombinator.com/reply?id=41532635&goto=item%3Fid%3D41527675%2341532635",
      "html": "<a href=\"reply?id=41532635&amp;goto=item%3Fid%3D41527675%2341532635\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 422,
      "url": "https://news.ycombinator.com/vote?id=41533055&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41533055\" href=\"vote?id=41533055&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 423,
      "url": "https://news.ycombinator.com/user?id=newman314",
      "html": "<a href=\"user?id=newman314\" class=\"hnuser\">newman314</a>",
      "text": "newman314"
    },
    {
      "id": 424,
      "url": "https://news.ycombinator.com/item?id=41533055",
      "html": "<a href=\"item?id=41533055\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 425,
      "url": "https://news.ycombinator.com/item?id=41527675#41532635",
      "html": "<a href=\"#41532635\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 426,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 427,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41533055\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 428,
      "url": "https://github.com/aws/aws-lc/issues/1827",
      "html": "<a href=\"https://github.com/aws/aws-lc/issues/1827\">https://github.com/aws/aws-lc/issues/1827</a>",
      "text": "https://github.com/aws/aws-lc/issues/1827"
    },
    {
      "id": 429,
      "url": "https://news.ycombinator.com/reply?id=41533055&goto=item%3Fid%3D41527675%2341533055",
      "html": "<a href=\"reply?id=41533055&amp;goto=item%3Fid%3D41527675%2341533055\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 430,
      "url": "https://news.ycombinator.com/vote?id=41528011&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41528011\" href=\"vote?id=41528011&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 431,
      "url": "https://news.ycombinator.com/user?id=saghm",
      "html": "<a href=\"user?id=saghm\" class=\"hnuser\">saghm</a>",
      "text": "saghm"
    },
    {
      "id": 432,
      "url": "https://news.ycombinator.com/item?id=41528011",
      "html": "<a href=\"item?id=41528011\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 433,
      "url": "https://news.ycombinator.com/item?id=41527675#41532635",
      "html": "<a href=\"#41532635\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 434,
      "url": "https://news.ycombinator.com/item?id=41527675#41530898",
      "html": "<a href=\"#41530898\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 435,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41528011\" n=\"28\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 436,
      "url": "https://news.ycombinator.com/reply?id=41528011&goto=item%3Fid%3D41527675%2341528011",
      "html": "<a href=\"reply?id=41528011&amp;goto=item%3Fid%3D41527675%2341528011\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 437,
      "url": "https://news.ycombinator.com/vote?id=41528620&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41528620\" href=\"vote?id=41528620&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 438,
      "url": "https://news.ycombinator.com/user?id=scrapheap",
      "html": "<a href=\"user?id=scrapheap\" class=\"hnuser\">scrapheap</a>",
      "text": "scrapheap"
    },
    {
      "id": 439,
      "url": "https://news.ycombinator.com/item?id=41528620",
      "html": "<a href=\"item?id=41528620\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 440,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 441,
      "url": "https://news.ycombinator.com/item?id=41527675#41528168",
      "html": "<a href=\"#41528168\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 442,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41528620\" n=\"13\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 443,
      "url": "https://news.ycombinator.com/reply?id=41528620&goto=item%3Fid%3D41527675%2341528620",
      "html": "<a href=\"reply?id=41528620&amp;goto=item%3Fid%3D41527675%2341528620\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 444,
      "url": "https://news.ycombinator.com/vote?id=41529557&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41529557\" href=\"vote?id=41529557&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 445,
      "url": "https://news.ycombinator.com/user?id=miki123211",
      "html": "<a href=\"user?id=miki123211\" class=\"hnuser\">miki123211</a>",
      "text": "miki123211"
    },
    {
      "id": 446,
      "url": "https://news.ycombinator.com/item?id=41529557",
      "html": "<a href=\"item?id=41529557\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 447,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 448,
      "url": "https://news.ycombinator.com/item?id=41527675#41528620",
      "html": "<a href=\"#41528620\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 449,
      "url": "https://news.ycombinator.com/item?id=41527675#41530168",
      "html": "<a href=\"#41530168\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 450,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41529557\" n=\"4\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 451,
      "url": "https://news.ycombinator.com/reply?id=41529557&goto=item%3Fid%3D41527675%2341529557",
      "html": "<a href=\"reply?id=41529557&amp;goto=item%3Fid%3D41527675%2341529557\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 452,
      "url": "https://news.ycombinator.com/vote?id=41529976&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41529976\" href=\"vote?id=41529976&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 453,
      "url": "https://news.ycombinator.com/user?id=vitus",
      "html": "<a href=\"user?id=vitus\" class=\"hnuser\">vitus</a>",
      "text": "vitus"
    },
    {
      "id": 454,
      "url": "https://news.ycombinator.com/item?id=41529976",
      "html": "<a href=\"item?id=41529976\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 455,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 456,
      "url": "https://news.ycombinator.com/item?id=41527675#41529557",
      "html": "<a href=\"#41529557\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 457,
      "url": "https://news.ycombinator.com/item?id=41527675#41530168",
      "html": "<a href=\"#41530168\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 458,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41529976\" n=\"3\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 459,
      "url": "https://news.ycombinator.com/reply?id=41529976&goto=item%3Fid%3D41527675%2341529976",
      "html": "<a href=\"reply?id=41529976&amp;goto=item%3Fid%3D41527675%2341529976\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 460,
      "url": "https://news.ycombinator.com/vote?id=41531786&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41531786\" href=\"vote?id=41531786&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 461,
      "url": "https://news.ycombinator.com/user?id=tptacek",
      "html": "<a href=\"user?id=tptacek\" class=\"hnuser\">tptacek</a>",
      "text": "tptacek"
    },
    {
      "id": 462,
      "url": "https://news.ycombinator.com/item?id=41531786",
      "html": "<a href=\"item?id=41531786\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 463,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 464,
      "url": "https://news.ycombinator.com/item?id=41527675#41529976",
      "html": "<a href=\"#41529976\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 465,
      "url": "https://news.ycombinator.com/item?id=41527675#41530744",
      "html": "<a href=\"#41530744\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 466,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41531786\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 467,
      "url": "https://news.ycombinator.com/reply?id=41531786&goto=item%3Fid%3D41527675%2341531786",
      "html": "<a href=\"reply?id=41531786&amp;goto=item%3Fid%3D41527675%2341531786\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 468,
      "url": "https://news.ycombinator.com/vote?id=41530744&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41530744\" href=\"vote?id=41530744&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 469,
      "url": "https://news.ycombinator.com/user?id=throw0101b",
      "html": "<a href=\"user?id=throw0101b\" class=\"hnuser\">throw0101b</a>",
      "text": "throw0101b"
    },
    {
      "id": 470,
      "url": "https://news.ycombinator.com/item?id=41530744",
      "html": "<a href=\"item?id=41530744\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 471,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 472,
      "url": "https://news.ycombinator.com/item?id=41527675#41529976",
      "html": "<a href=\"#41529976\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 473,
      "url": "https://news.ycombinator.com/item?id=41527675#41531786",
      "html": "<a href=\"#41531786\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 474,
      "url": "https://news.ycombinator.com/item?id=41527675#41530168",
      "html": "<a href=\"#41530168\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 475,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41530744\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 476,
      "url": "https://news.ycombinator.com/reply?id=41530744&goto=item%3Fid%3D41527675%2341530744",
      "html": "<a href=\"reply?id=41530744&amp;goto=item%3Fid%3D41527675%2341530744\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 477,
      "url": "https://news.ycombinator.com/vote?id=41530168&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41530168\" href=\"vote?id=41530168&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 478,
      "url": "https://news.ycombinator.com/user?id=pantalaimon",
      "html": "<a href=\"user?id=pantalaimon\" class=\"hnuser\">pantalaimon</a>",
      "text": "pantalaimon"
    },
    {
      "id": 479,
      "url": "https://news.ycombinator.com/item?id=41530168",
      "html": "<a href=\"item?id=41530168\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 480,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 481,
      "url": "https://news.ycombinator.com/item?id=41527675#41528620",
      "html": "<a href=\"#41528620\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 482,
      "url": "https://news.ycombinator.com/item?id=41527675#41529557",
      "html": "<a href=\"#41529557\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 483,
      "url": "https://news.ycombinator.com/item?id=41527675#41529970",
      "html": "<a href=\"#41529970\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 484,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41530168\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 485,
      "url": "https://news.ycombinator.com/reply?id=41530168&goto=item%3Fid%3D41527675%2341530168",
      "html": "<a href=\"reply?id=41530168&amp;goto=item%3Fid%3D41527675%2341530168\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 486,
      "url": "https://news.ycombinator.com/vote?id=41529970&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41529970\" href=\"vote?id=41529970&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 487,
      "url": "https://news.ycombinator.com/user?id=Spooky23",
      "html": "<a href=\"user?id=Spooky23\" class=\"hnuser\">Spooky23</a>",
      "text": "Spooky23"
    },
    {
      "id": 488,
      "url": "https://news.ycombinator.com/item?id=41529970",
      "html": "<a href=\"item?id=41529970\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 489,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 490,
      "url": "https://news.ycombinator.com/item?id=41527675#41528620",
      "html": "<a href=\"#41528620\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 491,
      "url": "https://news.ycombinator.com/item?id=41527675#41530168",
      "html": "<a href=\"#41530168\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 492,
      "url": "https://news.ycombinator.com/item?id=41527675#41530221",
      "html": "<a href=\"#41530221\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 493,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41529970\" n=\"3\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 494,
      "url": "https://news.ycombinator.com/reply?id=41529970&goto=item%3Fid%3D41527675%2341529970",
      "html": "<a href=\"reply?id=41529970&amp;goto=item%3Fid%3D41527675%2341529970\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 495,
      "url": "https://news.ycombinator.com/vote?id=41530119&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41530119\" href=\"vote?id=41530119&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 496,
      "url": "https://news.ycombinator.com/user?id=vitus",
      "html": "<a href=\"user?id=vitus\" class=\"hnuser\">vitus</a>",
      "text": "vitus"
    },
    {
      "id": 497,
      "url": "https://news.ycombinator.com/item?id=41530119",
      "html": "<a href=\"item?id=41530119\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 498,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 499,
      "url": "https://news.ycombinator.com/item?id=41527675#41529970",
      "html": "<a href=\"#41529970\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 500,
      "url": "https://news.ycombinator.com/item?id=41527675#41531820",
      "html": "<a href=\"#41531820\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 501,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41530119\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 502,
      "url": "https://csrc.nist.gov/projects/cryptographic-module-validation-program/sp-800-140-series-supplemental-information/sp800-140c",
      "html": "<a href=\"https://csrc.nist.gov/projects/cryptographic-module-validation-program/sp-800-140-series-supplemental-information/sp800-140c\" rel=\"nofollow\">https://csrc.nist.gov/projects/cryptographic-module-validati...</a>",
      "text": "https://csrc.nist.gov/projects/cryptographic-module-validati..."
    },
    {
      "id": 503,
      "url": "https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-186.pdf",
      "html": "<a href=\"https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-186.pdf\" rel=\"nofollow\">https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.S...</a>",
      "text": "https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.S..."
    },
    {
      "id": 504,
      "url": "https://csrc.nist.gov/projects/cryptographic-module-validation-program/certificate/4631",
      "html": "<a href=\"https://csrc.nist.gov/projects/cryptographic-module-validation-program/certificate/4631\" rel=\"nofollow\">https://csrc.nist.gov/projects/cryptographic-module-validati...</a>",
      "text": "https://csrc.nist.gov/projects/cryptographic-module-validati..."
    },
    {
      "id": 505,
      "url": "https://csrc.nist.gov/projects/cryptographic-module-validation-program/certificate/4735",
      "html": "<a href=\"https://csrc.nist.gov/projects/cryptographic-module-validation-program/certificate/4735\" rel=\"nofollow\">https://csrc.nist.gov/projects/cryptographic-module-validati...</a>",
      "text": "https://csrc.nist.gov/projects/cryptographic-module-validati..."
    },
    {
      "id": 506,
      "url": "https://csrc.nist.gov/projects/cryptographic-module-validation-program/certificate/4496",
      "html": "<a href=\"https://csrc.nist.gov/projects/cryptographic-module-validation-program/certificate/4496\" rel=\"nofollow\">https://csrc.nist.gov/projects/cryptographic-module-validati...</a>",
      "text": "https://csrc.nist.gov/projects/cryptographic-module-validati..."
    },
    {
      "id": 507,
      "url": "https://news.ycombinator.com/reply?id=41530119&goto=item%3Fid%3D41527675%2341530119",
      "html": "<a href=\"reply?id=41530119&amp;goto=item%3Fid%3D41527675%2341530119\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 508,
      "url": "https://news.ycombinator.com/vote?id=41531820&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41531820\" href=\"vote?id=41531820&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 509,
      "url": "https://news.ycombinator.com/user?id=devman0",
      "html": "<a href=\"user?id=devman0\" class=\"hnuser\">devman0</a>",
      "text": "devman0"
    },
    {
      "id": 510,
      "url": "https://news.ycombinator.com/item?id=41531820",
      "html": "<a href=\"item?id=41531820\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 511,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 512,
      "url": "https://news.ycombinator.com/item?id=41527675#41529970",
      "html": "<a href=\"#41529970\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 513,
      "url": "https://news.ycombinator.com/item?id=41527675#41530119",
      "html": "<a href=\"#41530119\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 514,
      "url": "https://news.ycombinator.com/item?id=41527675#41530221",
      "html": "<a href=\"#41530221\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 515,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41531820\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 516,
      "url": "https://news.ycombinator.com/reply?id=41531820&goto=item%3Fid%3D41527675%2341531820",
      "html": "<a href=\"reply?id=41531820&amp;goto=item%3Fid%3D41527675%2341531820\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 517,
      "url": "https://news.ycombinator.com/vote?id=41530221&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41530221\" href=\"vote?id=41530221&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 518,
      "url": "https://news.ycombinator.com/user?id=loudmax",
      "html": "<a href=\"user?id=loudmax\" class=\"hnuser\">loudmax</a>",
      "text": "loudmax"
    },
    {
      "id": 519,
      "url": "https://news.ycombinator.com/item?id=41530221",
      "html": "<a href=\"item?id=41530221\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 520,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 521,
      "url": "https://news.ycombinator.com/item?id=41527675#41528620",
      "html": "<a href=\"#41528620\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 522,
      "url": "https://news.ycombinator.com/item?id=41527675#41529970",
      "html": "<a href=\"#41529970\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 523,
      "url": "https://news.ycombinator.com/item?id=41527675#41528168",
      "html": "<a href=\"#41528168\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 524,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41530221\" n=\"4\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 525,
      "url": "https://news.ycombinator.com/reply?id=41530221&goto=item%3Fid%3D41527675%2341530221",
      "html": "<a href=\"reply?id=41530221&amp;goto=item%3Fid%3D41527675%2341530221\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 526,
      "url": "https://news.ycombinator.com/vote?id=41530317&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41530317\" href=\"vote?id=41530317&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 527,
      "url": "https://news.ycombinator.com/user?id=homebrewer",
      "html": "<a href=\"user?id=homebrewer\" class=\"hnuser\">homebrewer</a>",
      "text": "homebrewer"
    },
    {
      "id": 528,
      "url": "https://news.ycombinator.com/item?id=41530317",
      "html": "<a href=\"item?id=41530317\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 529,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 530,
      "url": "https://news.ycombinator.com/item?id=41527675#41530221",
      "html": "<a href=\"#41530221\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 531,
      "url": "https://news.ycombinator.com/item?id=41527675#41530765",
      "html": "<a href=\"#41530765\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 532,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41530317\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 533,
      "url": "https://news.ycombinator.com/reply?id=41530317&goto=item%3Fid%3D41527675%2341530317",
      "html": "<a href=\"reply?id=41530317&amp;goto=item%3Fid%3D41527675%2341530317\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 534,
      "url": "https://news.ycombinator.com/vote?id=41530765&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41530765\" href=\"vote?id=41530765&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 535,
      "url": "https://news.ycombinator.com/user?id=throw0101b",
      "html": "<a href=\"user?id=throw0101b\" class=\"hnuser\">throw0101b</a>",
      "text": "throw0101b"
    },
    {
      "id": 536,
      "url": "https://news.ycombinator.com/item?id=41530765",
      "html": "<a href=\"item?id=41530765\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 537,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 538,
      "url": "https://news.ycombinator.com/item?id=41527675#41530221",
      "html": "<a href=\"#41530221\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 539,
      "url": "https://news.ycombinator.com/item?id=41527675#41530317",
      "html": "<a href=\"#41530317\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 540,
      "url": "https://news.ycombinator.com/item?id=41527675#41528168",
      "html": "<a href=\"#41528168\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 541,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41530765\" n=\"2\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 542,
      "url": "https://www.openssh.com/txt/release-9.5",
      "html": "<a href=\"https://www.openssh.com/txt/release-9.5\" rel=\"nofollow\">https://www.openssh.com/txt/release-9.5</a>",
      "text": "https://www.openssh.com/txt/release-9.5"
    },
    {
      "id": 543,
      "url": "https://news.ycombinator.com/reply?id=41530765&goto=item%3Fid%3D41527675%2341530765",
      "html": "<a href=\"reply?id=41530765&amp;goto=item%3Fid%3D41527675%2341530765\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 544,
      "url": "https://news.ycombinator.com/vote?id=41531951&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41531951\" href=\"vote?id=41531951&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 545,
      "url": "https://news.ycombinator.com/user?id=saghm",
      "html": "<a href=\"user?id=saghm\" class=\"hnuser\">saghm</a>",
      "text": "saghm"
    },
    {
      "id": 546,
      "url": "https://news.ycombinator.com/item?id=41531951",
      "html": "<a href=\"item?id=41531951\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 547,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 548,
      "url": "https://news.ycombinator.com/item?id=41527675#41530765",
      "html": "<a href=\"#41530765\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 549,
      "url": "https://news.ycombinator.com/item?id=41527675#41528168",
      "html": "<a href=\"#41528168\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 550,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41531951\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 551,
      "url": "https://news.ycombinator.com/reply?id=41531951&goto=item%3Fid%3D41527675%2341531951",
      "html": "<a href=\"reply?id=41531951&amp;goto=item%3Fid%3D41527675%2341531951\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 552,
      "url": "https://news.ycombinator.com/vote?id=41528168&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41528168\" href=\"vote?id=41528168&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 553,
      "url": "https://news.ycombinator.com/user?id=toast0",
      "html": "<a href=\"user?id=toast0\" class=\"hnuser\">toast0</a>",
      "text": "toast0"
    },
    {
      "id": 554,
      "url": "https://news.ycombinator.com/item?id=41528168",
      "html": "<a href=\"item?id=41528168\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 555,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 556,
      "url": "https://news.ycombinator.com/item?id=41527675#41528620",
      "html": "<a href=\"#41528620\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 557,
      "url": "https://news.ycombinator.com/item?id=41527675#41528046",
      "html": "<a href=\"#41528046\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 558,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41528168\" n=\"3\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 559,
      "url": "https://news.ycombinator.com/reply?id=41528168&goto=item%3Fid%3D41527675%2341528168",
      "html": "<a href=\"reply?id=41528168&amp;goto=item%3Fid%3D41527675%2341528168\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 560,
      "url": "https://news.ycombinator.com/vote?id=41531995&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41531995\" href=\"vote?id=41531995&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 561,
      "url": "https://news.ycombinator.com/user?id=saghm",
      "html": "<a href=\"user?id=saghm\" class=\"hnuser\">saghm</a>",
      "text": "saghm"
    },
    {
      "id": 562,
      "url": "https://news.ycombinator.com/item?id=41531995",
      "html": "<a href=\"item?id=41531995\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 563,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 564,
      "url": "https://news.ycombinator.com/item?id=41527675#41528168",
      "html": "<a href=\"#41528168\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 565,
      "url": "https://news.ycombinator.com/item?id=41527675#41528046",
      "html": "<a href=\"#41528046\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 566,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41531995\" n=\"2\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 567,
      "url": "https://news.ycombinator.com/reply?id=41531995&goto=item%3Fid%3D41527675%2341531995",
      "html": "<a href=\"reply?id=41531995&amp;goto=item%3Fid%3D41527675%2341531995\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 568,
      "url": "https://news.ycombinator.com/vote?id=41536618&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41536618\" href=\"vote?id=41536618&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 569,
      "url": "https://news.ycombinator.com/user?id=toast0",
      "html": "<a href=\"user?id=toast0\" class=\"hnuser\">toast0</a>",
      "text": "toast0"
    },
    {
      "id": 570,
      "url": "https://news.ycombinator.com/item?id=41536618",
      "html": "<a href=\"item?id=41536618\">23 hours ago</a>",
      "text": "23 hours ago"
    },
    {
      "id": 571,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 572,
      "url": "https://news.ycombinator.com/item?id=41527675#41531995",
      "html": "<a href=\"#41531995\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 573,
      "url": "https://news.ycombinator.com/item?id=41527675#41528046",
      "html": "<a href=\"#41528046\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 574,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41536618\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 575,
      "url": "https://news.ycombinator.com/reply?id=41536618&goto=item%3Fid%3D41527675%2341536618",
      "html": "<a href=\"reply?id=41536618&amp;goto=item%3Fid%3D41527675%2341536618\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 576,
      "url": "https://news.ycombinator.com/vote?id=41528046&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41528046\" href=\"vote?id=41528046&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 577,
      "url": "https://news.ycombinator.com/user?id=stouset",
      "html": "<a href=\"user?id=stouset\" class=\"hnuser\">stouset</a>",
      "text": "stouset"
    },
    {
      "id": 578,
      "url": "https://news.ycombinator.com/item?id=41528046",
      "html": "<a href=\"item?id=41528046\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 579,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 580,
      "url": "https://news.ycombinator.com/item?id=41527675#41528168",
      "html": "<a href=\"#41528168\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 581,
      "url": "https://news.ycombinator.com/item?id=41527675#41530209",
      "html": "<a href=\"#41530209\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 582,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41528046\" n=\"10\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 583,
      "url": "https://news.ycombinator.com/reply?id=41528046&goto=item%3Fid%3D41527675%2341528046",
      "html": "<a href=\"reply?id=41528046&amp;goto=item%3Fid%3D41527675%2341528046\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 584,
      "url": "https://news.ycombinator.com/vote?id=41528118&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41528118\" href=\"vote?id=41528118&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 585,
      "url": "https://news.ycombinator.com/user?id=saghm",
      "html": "<a href=\"user?id=saghm\" class=\"hnuser\">saghm</a>",
      "text": "saghm"
    },
    {
      "id": 586,
      "url": "https://news.ycombinator.com/item?id=41528118",
      "html": "<a href=\"item?id=41528118\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 587,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 588,
      "url": "https://news.ycombinator.com/item?id=41527675#41528046",
      "html": "<a href=\"#41528046\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 589,
      "url": "https://news.ycombinator.com/item?id=41527675#41530209",
      "html": "<a href=\"#41530209\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 590,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41528118\" n=\"9\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 591,
      "url": "https://news.ycombinator.com/reply?id=41528118&goto=item%3Fid%3D41527675%2341528118",
      "html": "<a href=\"reply?id=41528118&amp;goto=item%3Fid%3D41527675%2341528118\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 592,
      "url": "https://news.ycombinator.com/vote?id=41528180&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41528180\" href=\"vote?id=41528180&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 593,
      "url": "https://news.ycombinator.com/user?id=stouset",
      "html": "<a href=\"user?id=stouset\" class=\"hnuser\">stouset</a>",
      "text": "stouset"
    },
    {
      "id": 594,
      "url": "https://news.ycombinator.com/item?id=41528180",
      "html": "<a href=\"item?id=41528180\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 595,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 596,
      "url": "https://news.ycombinator.com/item?id=41527675#41528118",
      "html": "<a href=\"#41528118\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 597,
      "url": "https://news.ycombinator.com/item?id=41527675#41535836",
      "html": "<a href=\"#41535836\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 598,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41528180\" n=\"7\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 599,
      "url": "https://news.ycombinator.com/reply?id=41528180&goto=item%3Fid%3D41527675%2341528180",
      "html": "<a href=\"reply?id=41528180&amp;goto=item%3Fid%3D41527675%2341528180\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 600,
      "url": "https://news.ycombinator.com/vote?id=41532036&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41532036\" href=\"vote?id=41532036&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 601,
      "url": "https://news.ycombinator.com/user?id=saghm",
      "html": "<a href=\"user?id=saghm\" class=\"hnuser\">saghm</a>",
      "text": "saghm"
    },
    {
      "id": 602,
      "url": "https://news.ycombinator.com/item?id=41532036",
      "html": "<a href=\"item?id=41532036\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 603,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 604,
      "url": "https://news.ycombinator.com/item?id=41527675#41528180",
      "html": "<a href=\"#41528180\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 605,
      "url": "https://news.ycombinator.com/item?id=41527675#41535836",
      "html": "<a href=\"#41535836\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 606,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41532036\" n=\"6\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 607,
      "url": "https://news.ycombinator.com/reply?id=41532036&goto=item%3Fid%3D41527675%2341532036",
      "html": "<a href=\"reply?id=41532036&amp;goto=item%3Fid%3D41527675%2341532036\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 608,
      "url": "https://news.ycombinator.com/vote?id=41532485&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41532485\" href=\"vote?id=41532485&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 609,
      "url": "https://news.ycombinator.com/user?id=tptacek",
      "html": "<a href=\"user?id=tptacek\" class=\"hnuser\">tptacek</a>",
      "text": "tptacek"
    },
    {
      "id": 610,
      "url": "https://news.ycombinator.com/item?id=41532485",
      "html": "<a href=\"item?id=41532485\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 611,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 612,
      "url": "https://news.ycombinator.com/item?id=41527675#41532036",
      "html": "<a href=\"#41532036\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 613,
      "url": "https://news.ycombinator.com/item?id=41527675#41535836",
      "html": "<a href=\"#41535836\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 614,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41532485\" n=\"5\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 615,
      "url": "https://news.ycombinator.com/reply?id=41532485&goto=item%3Fid%3D41527675%2341532485",
      "html": "<a href=\"reply?id=41532485&amp;goto=item%3Fid%3D41527675%2341532485\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 616,
      "url": "https://news.ycombinator.com/vote?id=41533561&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41533561\" href=\"vote?id=41533561&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 617,
      "url": "https://news.ycombinator.com/user?id=saghm",
      "html": "<a href=\"user?id=saghm\" class=\"hnuser\">saghm</a>",
      "text": "saghm"
    },
    {
      "id": 618,
      "url": "https://news.ycombinator.com/item?id=41533561",
      "html": "<a href=\"item?id=41533561\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 619,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 620,
      "url": "https://news.ycombinator.com/item?id=41527675#41532485",
      "html": "<a href=\"#41532485\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 621,
      "url": "https://news.ycombinator.com/item?id=41527675#41535836",
      "html": "<a href=\"#41535836\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 622,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41533561\" n=\"4\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 623,
      "url": "https://news.ycombinator.com/reply?id=41533561&goto=item%3Fid%3D41527675%2341533561",
      "html": "<a href=\"reply?id=41533561&amp;goto=item%3Fid%3D41527675%2341533561\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 624,
      "url": "https://news.ycombinator.com/vote?id=41533690&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41533690\" href=\"vote?id=41533690&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 625,
      "url": "https://news.ycombinator.com/user?id=tptacek",
      "html": "<a href=\"user?id=tptacek\" class=\"hnuser\">tptacek</a>",
      "text": "tptacek"
    },
    {
      "id": 626,
      "url": "https://news.ycombinator.com/item?id=41533690",
      "html": "<a href=\"item?id=41533690\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 627,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 628,
      "url": "https://news.ycombinator.com/item?id=41527675#41533561",
      "html": "<a href=\"#41533561\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 629,
      "url": "https://news.ycombinator.com/item?id=41527675#41535836",
      "html": "<a href=\"#41535836\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 630,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41533690\" n=\"3\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 631,
      "url": "https://news.ycombinator.com/reply?id=41533690&goto=item%3Fid%3D41527675%2341533690",
      "html": "<a href=\"reply?id=41533690&amp;goto=item%3Fid%3D41527675%2341533690\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 632,
      "url": "https://news.ycombinator.com/vote?id=41535453&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41535453\" href=\"vote?id=41535453&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 633,
      "url": "https://news.ycombinator.com/user?id=saghm",
      "html": "<a href=\"user?id=saghm\" class=\"hnuser\">saghm</a>",
      "text": "saghm"
    },
    {
      "id": 634,
      "url": "https://news.ycombinator.com/item?id=41535453",
      "html": "<a href=\"item?id=41535453\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 635,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 636,
      "url": "https://news.ycombinator.com/item?id=41527675#41533690",
      "html": "<a href=\"#41533690\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 637,
      "url": "https://news.ycombinator.com/item?id=41527675#41535836",
      "html": "<a href=\"#41535836\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 638,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41535453\" n=\"2\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 639,
      "url": "https://news.ycombinator.com/reply?id=41535453&goto=item%3Fid%3D41527675%2341535453",
      "html": "<a href=\"reply?id=41535453&amp;goto=item%3Fid%3D41527675%2341535453\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 640,
      "url": "https://news.ycombinator.com/vote?id=41543028&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41543028\" href=\"vote?id=41543028&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 641,
      "url": "https://news.ycombinator.com/user?id=tptacek",
      "html": "<a href=\"user?id=tptacek\" class=\"hnuser\">tptacek</a>",
      "text": "tptacek"
    },
    {
      "id": 642,
      "url": "https://news.ycombinator.com/item?id=41543028",
      "html": "<a href=\"item?id=41543028\">3 hours ago</a>",
      "text": "3 hours ago"
    },
    {
      "id": 643,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 644,
      "url": "https://news.ycombinator.com/item?id=41527675#41535453",
      "html": "<a href=\"#41535453\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 645,
      "url": "https://news.ycombinator.com/item?id=41527675#41535836",
      "html": "<a href=\"#41535836\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 646,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41543028\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 647,
      "url": "https://news.ycombinator.com/reply?id=41543028&goto=item%3Fid%3D41527675%2341543028",
      "html": "<a href=\"reply?id=41543028&amp;goto=item%3Fid%3D41527675%2341543028\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 648,
      "url": "https://news.ycombinator.com/vote?id=41535836&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41535836\" href=\"vote?id=41535836&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 649,
      "url": "https://news.ycombinator.com/user?id=syncsynchalt",
      "html": "<a href=\"user?id=syncsynchalt\" class=\"hnuser\">syncsynchalt</a>",
      "text": "syncsynchalt"
    },
    {
      "id": 650,
      "url": "https://news.ycombinator.com/item?id=41535836",
      "html": "<a href=\"item?id=41535836\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 651,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 652,
      "url": "https://news.ycombinator.com/item?id=41527675#41528118",
      "html": "<a href=\"#41528118\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 653,
      "url": "https://news.ycombinator.com/item?id=41527675#41528180",
      "html": "<a href=\"#41528180\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 654,
      "url": "https://news.ycombinator.com/item?id=41527675#41530209",
      "html": "<a href=\"#41530209\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 655,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41535836\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 656,
      "url": "https://curves.xargs.org/",
      "html": "<a href=\"https://curves.xargs.org\" rel=\"nofollow\">https://curves.xargs.org</a>",
      "text": "https://curves.xargs.org"
    },
    {
      "id": 657,
      "url": "https://x25519.xargs.org/",
      "html": "<a href=\"https://x25519.xargs.org\" rel=\"nofollow\">https://x25519.xargs.org</a>",
      "text": "https://x25519.xargs.org"
    },
    {
      "id": 658,
      "url": "https://news.ycombinator.com/reply?id=41535836&goto=item%3Fid%3D41527675%2341535836",
      "html": "<a href=\"reply?id=41535836&amp;goto=item%3Fid%3D41527675%2341535836\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 659,
      "url": "https://news.ycombinator.com/vote?id=41530209&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41530209\" href=\"vote?id=41530209&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 660,
      "url": "https://news.ycombinator.com/user?id=upofadown",
      "html": "<a href=\"user?id=upofadown\" class=\"hnuser\">upofadown</a>",
      "text": "upofadown"
    },
    {
      "id": 661,
      "url": "https://news.ycombinator.com/item?id=41530209",
      "html": "<a href=\"item?id=41530209\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 662,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 663,
      "url": "https://news.ycombinator.com/item?id=41527675#41528046",
      "html": "<a href=\"#41528046\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 664,
      "url": "https://news.ycombinator.com/item?id=41527675#41530898",
      "html": "<a href=\"#41530898\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 665,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41530209\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 666,
      "url": "https://www.amazon.science/blog/formal-verification-makes-rsa-faster-and-faster-to-deploy",
      "html": "<a href=\"https://www.amazon.science/blog/formal-verification-makes-rsa-faster-and-faster-to-deploy\" rel=\"nofollow\">https://www.amazon.science/blog/formal-verification-makes-rs...</a>",
      "text": "https://www.amazon.science/blog/formal-verification-makes-rs..."
    },
    {
      "id": 667,
      "url": "https://news.ycombinator.com/reply?id=41530209&goto=item%3Fid%3D41527675%2341530209",
      "html": "<a href=\"reply?id=41530209&amp;goto=item%3Fid%3D41527675%2341530209\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 668,
      "url": "https://news.ycombinator.com/vote?id=41530898&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41530898\" href=\"vote?id=41530898&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 669,
      "url": "https://news.ycombinator.com/user?id=fefe23",
      "html": "<a href=\"user?id=fefe23\" class=\"hnuser\">fefe23</a>",
      "text": "fefe23"
    },
    {
      "id": 670,
      "url": "https://news.ycombinator.com/item?id=41530898",
      "html": "<a href=\"item?id=41530898\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 671,
      "url": "https://news.ycombinator.com/item?id=41527675#41528011",
      "html": "<a href=\"#41528011\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 672,
      "url": "https://news.ycombinator.com/item?id=41527675#41532049",
      "html": "<a href=\"#41532049\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 673,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41530898\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 674,
      "url": "https://news.ycombinator.com/reply?id=41530898&goto=item%3Fid%3D41527675%2341530898",
      "html": "<a href=\"reply?id=41530898&amp;goto=item%3Fid%3D41527675%2341530898\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 675,
      "url": "https://news.ycombinator.com/vote?id=41532049&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41532049\" href=\"vote?id=41532049&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 676,
      "url": "https://news.ycombinator.com/user?id=jonmon6691",
      "html": "<a href=\"user?id=jonmon6691\" class=\"hnuser\">jonmon6691</a>",
      "text": "jonmon6691"
    },
    {
      "id": 677,
      "url": "https://news.ycombinator.com/item?id=41532049",
      "html": "<a href=\"item?id=41532049\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 678,
      "url": "https://news.ycombinator.com/item?id=41527675#41530898",
      "html": "<a href=\"#41530898\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 679,
      "url": "https://news.ycombinator.com/item?id=41527675#41536430",
      "html": "<a href=\"#41536430\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 680,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41532049\" n=\"4\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 681,
      "url": "https://news.ycombinator.com/reply?id=41532049&goto=item%3Fid%3D41527675%2341532049",
      "html": "<a href=\"reply?id=41532049&amp;goto=item%3Fid%3D41527675%2341532049\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 682,
      "url": "https://news.ycombinator.com/vote?id=41532421&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41532421\" href=\"vote?id=41532421&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 683,
      "url": "https://news.ycombinator.com/user?id=dlgeek",
      "html": "<a href=\"user?id=dlgeek\" class=\"hnuser\">dlgeek</a>",
      "text": "dlgeek"
    },
    {
      "id": 684,
      "url": "https://news.ycombinator.com/item?id=41532421",
      "html": "<a href=\"item?id=41532421\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 685,
      "url": "https://news.ycombinator.com/item?id=41527675#41532049",
      "html": "<a href=\"#41532049\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 686,
      "url": "https://news.ycombinator.com/item?id=41527675#41532624",
      "html": "<a href=\"#41532624\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 687,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41532421\" n=\"2\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 688,
      "url": "https://aws.amazon.com/about-aws/whats-new/2022/03/aws-kms-acm-support-latest-hybrid-post-quantum-tls-ciphers/",
      "html": "<a href=\"https://aws.amazon.com/about-aws/whats-new/2022/03/aws-kms-acm-support-latest-hybrid-post-quantum-tls-ciphers/\" rel=\"nofollow\">https://aws.amazon.com/about-aws/whats-new/2022/03/aws-kms-a...</a>",
      "text": "https://aws.amazon.com/about-aws/whats-new/2022/03/aws-kms-a..."
    },
    {
      "id": 689,
      "url": "https://docs.aws.amazon.com/kms/latest/developerguide/pqtls.html",
      "html": "<a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/pqtls.html\" rel=\"nofollow\">https://docs.aws.amazon.com/kms/latest/developerguide/pqtls....</a>",
      "text": "https://docs.aws.amazon.com/kms/latest/developerguide/pqtls...."
    },
    {
      "id": 690,
      "url": "https://news.ycombinator.com/reply?id=41532421&goto=item%3Fid%3D41527675%2341532421",
      "html": "<a href=\"reply?id=41532421&amp;goto=item%3Fid%3D41527675%2341532421\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 691,
      "url": "https://news.ycombinator.com/vote?id=41532598&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41532598\" href=\"vote?id=41532598&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 692,
      "url": "https://news.ycombinator.com/user?id=jonmon6691",
      "html": "<a href=\"user?id=jonmon6691\" class=\"hnuser\">jonmon6691</a>",
      "text": "jonmon6691"
    },
    {
      "id": 693,
      "url": "https://news.ycombinator.com/item?id=41532598",
      "html": "<a href=\"item?id=41532598\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 694,
      "url": "https://news.ycombinator.com/item?id=41527675#41532049",
      "html": "<a href=\"#41532049\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 695,
      "url": "https://news.ycombinator.com/item?id=41527675#41532421",
      "html": "<a href=\"#41532421\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 696,
      "url": "https://news.ycombinator.com/item?id=41527675#41532624",
      "html": "<a href=\"#41532624\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 697,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41532598\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 698,
      "url": "https://news.ycombinator.com/reply?id=41532598&goto=item%3Fid%3D41527675%2341532598",
      "html": "<a href=\"reply?id=41532598&amp;goto=item%3Fid%3D41527675%2341532598\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 699,
      "url": "https://news.ycombinator.com/vote?id=41532624&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41532624\" href=\"vote?id=41532624&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 700,
      "url": "https://news.ycombinator.com/user?id=adgjlsfhk1",
      "html": "<a href=\"user?id=adgjlsfhk1\" class=\"hnuser\">adgjlsfhk1</a>",
      "text": "adgjlsfhk1"
    },
    {
      "id": 701,
      "url": "https://news.ycombinator.com/item?id=41532624",
      "html": "<a href=\"item?id=41532624\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 702,
      "url": "https://news.ycombinator.com/item?id=41527675#41532049",
      "html": "<a href=\"#41532049\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 703,
      "url": "https://news.ycombinator.com/item?id=41527675#41532421",
      "html": "<a href=\"#41532421\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 704,
      "url": "https://news.ycombinator.com/item?id=41527675#41536430",
      "html": "<a href=\"#41536430\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 705,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41532624\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 706,
      "url": "https://news.ycombinator.com/reply?id=41532624&goto=item%3Fid%3D41527675%2341532624",
      "html": "<a href=\"reply?id=41532624&amp;goto=item%3Fid%3D41527675%2341532624\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 707,
      "url": "https://news.ycombinator.com/vote?id=41536430&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41536430\" href=\"vote?id=41536430&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 708,
      "url": "https://news.ycombinator.com/user?id=webXL",
      "html": "<a href=\"user?id=webXL\" class=\"hnuser\">webXL</a>",
      "text": "webXL"
    },
    {
      "id": 709,
      "url": "https://news.ycombinator.com/item?id=41536430",
      "html": "<a href=\"item?id=41536430\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 710,
      "url": "https://news.ycombinator.com/item?id=41527675#41532049",
      "html": "<a href=\"#41532049\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 711,
      "url": "https://news.ycombinator.com/item?id=41527675#41529881",
      "html": "<a href=\"#41529881\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 712,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41536430\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 713,
      "url": "https://news.ycombinator.com/reply?id=41536430&goto=item%3Fid%3D41527675%2341536430",
      "html": "<a href=\"reply?id=41536430&amp;goto=item%3Fid%3D41527675%2341536430\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 714,
      "url": "https://news.ycombinator.com/vote?id=41529881&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41529881\" href=\"vote?id=41529881&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 715,
      "url": "https://news.ycombinator.com/user?id=londons_explore",
      "html": "<a href=\"user?id=londons_explore\" class=\"hnuser\">londons_explore</a>",
      "text": "londons_explore"
    },
    {
      "id": 716,
      "url": "https://news.ycombinator.com/item?id=41529881",
      "html": "<a href=\"item?id=41529881\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 717,
      "url": "https://news.ycombinator.com/item?id=41527675#41536430",
      "html": "<a href=\"#41536430\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 718,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41529881\" n=\"5\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 719,
      "url": "https://news.ycombinator.com/reply?id=41529881&goto=item%3Fid%3D41527675%2341529881",
      "html": "<a href=\"reply?id=41529881&amp;goto=item%3Fid%3D41527675%2341529881\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 720,
      "url": "https://news.ycombinator.com/vote?id=41535817&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41535817\" href=\"vote?id=41535817&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 721,
      "url": "https://news.ycombinator.com/user?id=syncsynchalt",
      "html": "<a href=\"user?id=syncsynchalt\" class=\"hnuser\">syncsynchalt</a>",
      "text": "syncsynchalt"
    },
    {
      "id": 722,
      "url": "https://news.ycombinator.com/item?id=41535817",
      "html": "<a href=\"item?id=41535817\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 723,
      "url": "https://news.ycombinator.com/item?id=41527675#41529881",
      "html": "<a href=\"#41529881\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 724,
      "url": "https://news.ycombinator.com/item?id=41527675#41530302",
      "html": "<a href=\"#41530302\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 725,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41535817\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 726,
      "url": "https://news.ycombinator.com/reply?id=41535817&goto=item%3Fid%3D41527675%2341535817",
      "html": "<a href=\"reply?id=41535817&amp;goto=item%3Fid%3D41527675%2341535817\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 727,
      "url": "https://news.ycombinator.com/vote?id=41530302&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41530302\" href=\"vote?id=41530302&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 728,
      "url": "https://news.ycombinator.com/user?id=vitus",
      "html": "<a href=\"user?id=vitus\" class=\"hnuser\">vitus</a>",
      "text": "vitus"
    },
    {
      "id": 729,
      "url": "https://news.ycombinator.com/item?id=41530302",
      "html": "<a href=\"item?id=41530302\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 730,
      "url": "https://news.ycombinator.com/item?id=41527675#41529881",
      "html": "<a href=\"#41529881\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 731,
      "url": "https://news.ycombinator.com/item?id=41527675#41535817",
      "html": "<a href=\"#41535817\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 732,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41530302\" n=\"3\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 733,
      "url": "https://github.com/awslabs/s2n-bignum",
      "html": "<a href=\"https://github.com/awslabs/s2n-bignum\">https://github.com/awslabs/s2n-bignum</a>",
      "text": "https://github.com/awslabs/s2n-bignum"
    },
    {
      "id": 734,
      "url": "https://news.ycombinator.com/reply?id=41530302&goto=item%3Fid%3D41527675%2341530302",
      "html": "<a href=\"reply?id=41530302&amp;goto=item%3Fid%3D41527675%2341530302\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 735,
      "url": "https://news.ycombinator.com/vote?id=41531101&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41531101\" href=\"vote?id=41531101&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 736,
      "url": "https://news.ycombinator.com/user?id=justinwsmith",
      "html": "<a href=\"user?id=justinwsmith\" class=\"hnuser\">justinwsmith</a>",
      "text": "justinwsmith"
    },
    {
      "id": 737,
      "url": "https://news.ycombinator.com/item?id=41531101",
      "html": "<a href=\"item?id=41531101\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 738,
      "url": "https://news.ycombinator.com/item?id=41527675#41529881",
      "html": "<a href=\"#41529881\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 739,
      "url": "https://news.ycombinator.com/item?id=41527675#41530302",
      "html": "<a href=\"#41530302\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 740,
      "url": "https://news.ycombinator.com/item?id=41527675#41531853",
      "html": "<a href=\"#41531853\" class=\"clicky\" aria-hidden=\"true\">next</a>",
      "text": "next"
    },
    {
      "id": 741,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41531101\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 742,
      "url": "https://news.ycombinator.com/reply?id=41531101&goto=item%3Fid%3D41527675%2341531101",
      "html": "<a href=\"reply?id=41531101&amp;goto=item%3Fid%3D41527675%2341531101\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 743,
      "url": "https://news.ycombinator.com/vote?id=41531853&how=up&goto=item%3Fid%3D41527675",
      "html": "<a id=\"up_41531853\" href=\"vote?id=41531853&amp;how=up&amp;goto=item%3Fid%3D41527675\"><div class=\"votearrow\" title=\"upvote\"></div></a>",
      "text": ""
    },
    {
      "id": 744,
      "url": "https://news.ycombinator.com/user?id=deathanatos",
      "html": "<a href=\"user?id=deathanatos\" class=\"hnuser\">deathanatos</a>",
      "text": "deathanatos"
    },
    {
      "id": 745,
      "url": "https://news.ycombinator.com/item?id=41531853",
      "html": "<a href=\"item?id=41531853\">1 day ago</a>",
      "text": "1 day ago"
    },
    {
      "id": 746,
      "url": "https://news.ycombinator.com/item?id=41527675#41529881",
      "html": "<a href=\"#41529881\" class=\"clicky\" aria-hidden=\"true\">root</a>",
      "text": "root"
    },
    {
      "id": 747,
      "url": "https://news.ycombinator.com/item?id=41527675#41530302",
      "html": "<a href=\"#41530302\" class=\"clicky\" aria-hidden=\"true\">parent</a>",
      "text": "parent"
    },
    {
      "id": 748,
      "url": "https://news.ycombinator.com/item?id=41527675#41531101",
      "html": "<a href=\"#41531101\" class=\"clicky\" aria-hidden=\"true\">prev</a>",
      "text": "prev"
    },
    {
      "id": 749,
      "url": "javascript:void(0)",
      "html": "<a class=\"togg clicky\" id=\"41531853\" n=\"1\" href=\"javascript:void(0)\">[–]</a>",
      "text": "[–]"
    },
    {
      "id": 750,
      "url": "https://people.redhat.com/~hkario/marvin/",
      "html": "<a href=\"https://people.redhat.com/~hkario/marvin/\" rel=\"nofollow\">https://people.redhat.com/~hkario/marvin/</a>",
      "text": "https://people.redhat.com/~hkario/marvin/"
    },
    {
      "id": 751,
      "url": "https://news.ycombinator.com/reply?id=41531853&goto=item%3Fid%3D41527675%2341531853",
      "html": "<a href=\"reply?id=41531853&amp;goto=item%3Fid%3D41527675%2341531853\" rel=\"nofollow\">reply</a>",
      "text": "reply"
    },
    {
      "id": 752,
      "url": "https://news.ycombinator.com/newsguidelines.html",
      "html": "<a href=\"newsguidelines.html\">Guidelines</a>",
      "text": "Guidelines"
    },
    {
      "id": 753,
      "url": "https://news.ycombinator.com/newsfaq.html",
      "html": "<a href=\"newsfaq.html\">FAQ</a>",
      "text": "FAQ"
    },
    {
      "id": 754,
      "url": "https://news.ycombinator.com/lists",
      "html": "<a href=\"lists\">Lists</a>",
      "text": "Lists"
    },
    {
      "id": 755,
      "url": "https://github.com/HackerNews/API",
      "html": "<a href=\"https://github.com/HackerNews/API\">API</a>",
      "text": "API"
    },
    {
      "id": 756,
      "url": "https://news.ycombinator.com/security.html",
      "html": "<a href=\"security.html\">Security</a>",
      "text": "Security"
    },
    {
      "id": 757,
      "url": "https://www.ycombinator.com/legal/",
      "html": "<a href=\"https://www.ycombinator.com/legal/\">Legal</a>",
      "text": "Legal"
    },
    {
      "id": 758,
      "url": "https://www.ycombinator.com/apply/",
      "html": "<a href=\"https://www.ycombinator.com/apply/\">Apply to YC</a>",
      "text": "Apply to YC"
    },
    {
      "id": 759,
      "url": "mailto:hn@ycombinator.com",
      "html": "<a href=\"mailto:hn@ycombinator.com\">Contact</a>",
      "text": "Contact"
    }
  ],
  "resp": {
    "url": "https://news.ycombinator.com/item?id=41527675",
    "status": 200,
    "statusText": "OK",
    "headers": {
      "cache-control": "private; max-age=0",
      "connection": "keep-alive",
      "content-encoding": "gzip",
      "content-security-policy": "default-src 'self'; script-src 'self' 'unsafe-inline' https://www.google.com/recaptcha/ https://www.gstatic.com/recaptcha/ https://cdnjs.cloudflare.com/; frame-src 'self' https://www.google.com/recaptcha/; style-src 'self' 'unsafe-inline'; img-src 'self' https://account.ycombinator.com; frame-ancestors 'self'",
      "content-type": "text/html; charset=utf-8",
      "date": "Sun, 15 Sep 2024 00:44:53 GMT",
      "referrer-policy": "origin",
      "server": "nginx",
      "strict-transport-security": "max-age=31556900",
      "transfer-encoding": "chunked",
      "vary": "Accept-Encoding",
      "x-content-type-options": "nosniff",
      "x-frame-options": "DENY",
      "x-xss-protection": "1; mode=block"
    }
  },
  "contentType": "text/html",
  "req": {
    "url": "https://news.ycombinator.com/item?id=41527675"
  }
}